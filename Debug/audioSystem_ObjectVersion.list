
audioSystem_ObjectVersion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f24  080136f8  080136f8  000236f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801561c  0801561c  00159437  2**0
                  CONTENTS
  4 .ARM          00000008  0801561c  0801561c  0002561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015624  08015624  00159437  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015624  08015624  00025624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801562c  0801562c  0002562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08015634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006be8  20000114  08015748  00030114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006cfc  08015748  00036cfc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00159437  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00119437  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .comment      000000b1  00000000  00000000  00159465  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c240  00000000  00000000  00159516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008681  00000000  00000000  00195756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c50  00000000  00000000  0019ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002209  00000000  00000000  001a0a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e383  00000000  00000000  001a2c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003e3a1  00000000  00000000  001e0fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00145f17  00000000  00000000  0021f355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c3a4  00000000  00000000  0036526c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00371610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000000aa  00000000  00000000  00371683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000010  00000000  00000000  0037172d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000114 	.word	0x20000114
 800021c:	00000000 	.word	0x00000000
 8000220:	080136dc 	.word	0x080136dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000118 	.word	0x20000118
 800023c:	080136dc 	.word	0x080136dc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_ZN11DelayBufferC1Et>:
	int index; //points to where the newest sample is
	int size ;

public:

  DelayBuffer(uint16_t size_param){
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
    delayBuffer = new int16_t[size_param](); //Create and return Ptr to array, () init to 0
 80005e8:	887c      	ldrh	r4, [r7, #2]
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <_ZN11DelayBufferC1Et+0x54>)
 80005ec:	429c      	cmp	r4, r3
 80005ee:	d801      	bhi.n	80005f4 <_ZN11DelayBufferC1Et+0x18>
 80005f0:	0063      	lsls	r3, r4, #1
 80005f2:	e001      	b.n	80005f8 <_ZN11DelayBufferC1Et+0x1c>
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f8:	4618      	mov	r0, r3
 80005fa:	f011 f8d7 	bl	80117ac <_Znaj>
 80005fe:	4603      	mov	r3, r0
 8000600:	4619      	mov	r1, r3
 8000602:	460a      	mov	r2, r1
 8000604:	1e63      	subs	r3, r4, #1
 8000606:	e003      	b.n	8000610 <_ZN11DelayBufferC1Et+0x34>
 8000608:	2000      	movs	r0, #0
 800060a:	8010      	strh	r0, [r2, #0]
 800060c:	3202      	adds	r2, #2
 800060e:	3b01      	subs	r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	daf9      	bge.n	8000608 <_ZN11DelayBufferC1Et+0x2c>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6019      	str	r1, [r3, #0]
    size = size_param;
 8000618:	887a      	ldrh	r2, [r7, #2]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	609a      	str	r2, [r3, #8]
    index = 0;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
    /*An alternative to this is through the use of Vectors. These are dynamic arrays that can grow
     * and shrink and have methods associated with them
     */
  }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	bf00      	nop
 8000630:	3ffffffc 	.word	0x3ffffffc

08000634 <_ZN11DelayBufferD1Ev>:

  ~DelayBuffer(){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	  delete[] delayBuffer; //Just nice house keeping due to dynamic array creation. Safe.
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d004      	beq.n	800064e <_ZN11DelayBufferD1Ev+0x1a>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f011 f8ad 	bl	80117a8 <_ZdaPv>
  }
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZN10SATURBlockC1Ev>:
#include <cmath>

//Define the enums for setting maybe?


class SATURBlock {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <_ZN10SATURBlockC1Ev+0x1c>)
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	3ff33333 	.word	0x3ff33333

08000678 <LocalFunction>:





void LocalFunction(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	// https://arm-software.github.io/CMSIS_5/DSP/html/index.html
	arm_biquad_cascade_df1_init_f32 ( &iirsettings_l, 1, &iir_coeffs[0], &iir_l_state[0]);
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <LocalFunction+0x14>)
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <LocalFunction+0x18>)
 8000680:	2101      	movs	r1, #1
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <LocalFunction+0x1c>)
 8000684:	f011 f882 	bl	801178c <arm_biquad_cascade_df1_init_f32>
    //This creates the instance of the ARM based BiQuad, we then access it via its process call
	//citing its iirsettings_l address

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000013c 	.word	0x2000013c
 8000690:	20000000 	.word	0x20000000
 8000694:	20000130 	.word	0x20000130

08000698 <UpdateObjects>:

//Coeff update funtion

void UpdateObjects(){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

	 float filter_access = filterC;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <UpdateObjects+0x5c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	607b      	str	r3, [r7, #4]

	 float chorus_rate = volume; //fudge for test
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <UpdateObjects+0x60>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	603b      	str	r3, [r7, #0]
	    //could check here for a change..
	    //quick check
	    //myFiltObjL.FlyUpdate(2, filter_access, 48000); //update as required but this does it all the time
	    //myFiltObjR.FlyUpdate(2, filter_access, 48000);

	 	myChorusL.setDepth(filterC);
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <UpdateObjects+0x5c>)
 80006ac:	edd3 7a00 	vldr	s15, [r3]
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <UpdateObjects+0x64>)
 80006b6:	f000 fa6e 	bl	8000b96 <_ZN11ChorusBlock8setDepthEf>
	 	myChorusR.setDepth(filterC);
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <UpdateObjects+0x5c>)
 80006bc:	edd3 7a00 	vldr	s15, [r3]
 80006c0:	eeb0 0a67 	vmov.f32	s0, s15
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <UpdateObjects+0x68>)
 80006c6:	f000 fa66 	bl	8000b96 <_ZN11ChorusBlock8setDepthEf>

	    myChorusL.setRate(volume);
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <UpdateObjects+0x60>)
 80006cc:	edd3 7a00 	vldr	s15, [r3]
 80006d0:	eeb0 0a67 	vmov.f32	s0, s15
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <UpdateObjects+0x64>)
 80006d6:	f000 fa4f 	bl	8000b78 <_ZN11ChorusBlock7setRateEf>
	    myChorusR.setRate(volume);
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <UpdateObjects+0x60>)
 80006dc:	edd3 7a00 	vldr	s15, [r3]
 80006e0:	eeb0 0a67 	vmov.f32	s0, s15
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <UpdateObjects+0x68>)
 80006e6:	f000 fa47 	bl	8000b78 <_ZN11ChorusBlock7setRateEf>



}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000001c 	.word	0x2000001c
 80006f8:	20000018 	.word	0x20000018
 80006fc:	20000254 	.word	0x20000254
 8000700:	20000274 	.word	0x20000274

08000704 <AudioProcess>:

//Main CPP based audio processing loop

void AudioProcess(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BlockSize){
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	4613      	mov	r3, r2
 8000710:	80fb      	strh	r3, [r7, #6]
*/



	//Chorus Test
		 for (uint16_t i = 0; i < BlockSize; i+=4) //Hop over 8 bytes
 8000712:	2300      	movs	r3, #0
 8000714:	82fb      	strh	r3, [r7, #22]
 8000716:	e022      	b.n	800075e <AudioProcess+0x5a>
		 	 {

	            //L
			    pbuffer1[i] = myChorusL.process(pbuffer2[i]);
 8000718:	8afb      	ldrh	r3, [r7, #22]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	4413      	add	r3, r2
 8000720:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000724:	8afb      	ldrh	r3, [r7, #22]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	18d4      	adds	r4, r2, r3
 800072c:	4815      	ldr	r0, [pc, #84]	; (8000784 <AudioProcess+0x80>)
 800072e:	f000 f91b 	bl	8000968 <_ZN11ChorusBlock7processEs>
 8000732:	4603      	mov	r3, r0
 8000734:	8023      	strh	r3, [r4, #0]


			    //R
			    //4 sin calls appear to creak the system..
			    //Try FPU, cache and also then LUT.
			    pbuffer1[i+2] = myChorusR.process(pbuffer2[i+2]);
 8000736:	8afb      	ldrh	r3, [r7, #22]
 8000738:	3302      	adds	r3, #2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3302      	adds	r3, #2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	18d4      	adds	r4, r2, r3
 800074e:	480e      	ldr	r0, [pc, #56]	; (8000788 <AudioProcess+0x84>)
 8000750:	f000 f90a 	bl	8000968 <_ZN11ChorusBlock7processEs>
 8000754:	4603      	mov	r3, r0
 8000756:	8023      	strh	r3, [r4, #0]
		 for (uint16_t i = 0; i < BlockSize; i+=4) //Hop over 8 bytes
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	3304      	adds	r3, #4
 800075c:	82fb      	strh	r3, [r7, #22]
 800075e:	8afa      	ldrh	r2, [r7, #22]
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	429a      	cmp	r2, r3
 8000764:	d3d8      	bcc.n	8000718 <AudioProcess+0x14>

  /*Could try to blitz the serial output by printing the first Left samepl of the audio block, this will of course be sample reduction
	but we can  then dislpay this on a terminal like the arduino serial plotter
	*/

	CurrentLsample = pbuffer1[0]; //processed
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f9b3 2000 	ldrsh.w	r2, [r3]
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <AudioProcess+0x88>)
 800076e:	801a      	strh	r2, [r3, #0]
	CurrentRsample = pbuffer1[0+2]; //processed
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <AudioProcess+0x8c>)
 8000778:	801a      	strh	r2, [r3, #0]

}
 800077a:	bf00      	nop
 800077c:	371c      	adds	r7, #28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	bf00      	nop
 8000784:	20000254 	.word	0x20000254
 8000788:	20000274 	.word	0x20000274
 800078c:	20002702 	.word	0x20002702
 8000790:	20002704 	.word	0x20002704

08000794 <_ZN11ChorusBlockD1Ev>:


//Define the enums for setting maybe?
 

class ChorusBlock {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff48 	bl	8000634 <_ZN11DelayBufferD1Ev>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <_Z41__static_initialization_and_destruction_0ii>:
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d133      	bne.n	8000828 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d12e      	bne.n	8000828 <_Z41__static_initialization_and_destruction_0ii+0x78>
LowpassFilter myFiltObjL(2, 150, 48000); //Initial creation of the filter object
 80007ca:	eddf 0a23 	vldr	s1, [pc, #140]	; 8000858 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80007ce:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800085c <_Z41__static_initialization_and_destruction_0ii+0xac>
 80007d2:	2102      	movs	r1, #2
 80007d4:	4822      	ldr	r0, [pc, #136]	; (8000860 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80007d6:	f000 fb0e 	bl	8000df6 <_ZN13LowpassFilterC1Eiff>
LowpassFilter myFiltObjR(2, 150, 48000);
 80007da:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8000858 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80007de:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800085c <_Z41__static_initialization_and_destruction_0ii+0xac>
 80007e2:	2102      	movs	r1, #2
 80007e4:	481f      	ldr	r0, [pc, #124]	; (8000864 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80007e6:	f000 fb06 	bl	8000df6 <_ZN13LowpassFilterC1Eiff>
TREMBlock myTremoloL; //
 80007ea:	481f      	ldr	r0, [pc, #124]	; (8000868 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80007ec:	f000 f9e8 	bl	8000bc0 <_ZN9TREMBlockC1Ev>
TREMBlock myTremoloR; //
 80007f0:	481e      	ldr	r0, [pc, #120]	; (800086c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80007f2:	f000 f9e5 	bl	8000bc0 <_ZN9TREMBlockC1Ev>
DelayBuffer myDelayL(2048*2);
 80007f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fa:	481d      	ldr	r0, [pc, #116]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80007fc:	f7ff feee 	bl	80005dc <_ZN11DelayBufferC1Et>
DelayBuffer myDelayR(2048*2);
 8000800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000804:	481b      	ldr	r0, [pc, #108]	; (8000874 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000806:	f7ff fee9 	bl	80005dc <_ZN11DelayBufferC1Et>
ChorusBlock myChorusL(0.1f, 10);
 800080a:	210a      	movs	r1, #10
 800080c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000878 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000810:	481a      	ldr	r0, [pc, #104]	; (800087c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8000812:	f000 f87d 	bl	8000910 <_ZN11ChorusBlockC1Eft>
ChorusBlock myChorusR(0.1f, 10);
 8000816:	210a      	movs	r1, #10
 8000818:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000878 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800081c:	4818      	ldr	r0, [pc, #96]	; (8000880 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800081e:	f000 f877 	bl	8000910 <_ZN11ChorusBlockC1Eft>
SATURBlock mySaturator;
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8000824:	f7ff ff18 	bl	8000658 <_ZN10SATURBlockC1Ev>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d110      	bne.n	8000850 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000834:	4293      	cmp	r3, r2
 8000836:	d10b      	bne.n	8000850 <_Z41__static_initialization_and_destruction_0ii+0xa0>
ChorusBlock myChorusR(0.1f, 10);
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800083a:	f7ff ffab 	bl	8000794 <_ZN11ChorusBlockD1Ev>
ChorusBlock myChorusL(0.1f, 10);
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8000840:	f7ff ffa8 	bl	8000794 <_ZN11ChorusBlockD1Ev>
DelayBuffer myDelayR(2048*2);
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000846:	f7ff fef5 	bl	8000634 <_ZN11DelayBufferD1Ev>
DelayBuffer myDelayL(2048*2);
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800084c:	f7ff fef2 	bl	8000634 <_ZN11DelayBufferD1Ev>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	473b8000 	.word	0x473b8000
 800085c:	43160000 	.word	0x43160000
 8000860:	2000014c 	.word	0x2000014c
 8000864:	200001a8 	.word	0x200001a8
 8000868:	20000204 	.word	0x20000204
 800086c:	20000220 	.word	0x20000220
 8000870:	2000023c 	.word	0x2000023c
 8000874:	20000248 	.word	0x20000248
 8000878:	3dcccccd 	.word	0x3dcccccd
 800087c:	20000254 	.word	0x20000254
 8000880:	20000274 	.word	0x20000274
 8000884:	20000294 	.word	0x20000294

08000888 <_GLOBAL__sub_I_iirsettings_l>:
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ff8d 	bl	80007b0 <_Z41__static_initialization_and_destruction_0ii>
 8000896:	bd80      	pop	{r7, pc}

08000898 <_GLOBAL__sub_D_iirsettings_l>:
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
 800089c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ff85 	bl	80007b0 <_Z41__static_initialization_and_destruction_0ii>
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_ZN11ChorusBlock8xFadeLinEfss>:
	float sampleRate = 48000.0f;
	int16_t processedSample;
	float phase = 0.0f;
	
	//private cross fade
	int16_t xFadeLin(float xFadeCtrl, int16_t in0, int16_t in1)
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80008b4:	460b      	mov	r3, r1
 80008b6:	80fb      	strh	r3, [r7, #6]
 80008b8:	4613      	mov	r3, r2
 80008ba:	80bb      	strh	r3, [r7, #4]
	{
     // Perform crossfading and return the value
		return (in0 * (1.0 - xFadeCtrl) + in1 * xFadeCtrl);
 80008bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80008cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80008d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80008d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008e0:	ee07 3a90 	vmov	s15, r3
 80008e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008fc:	ee17 3a90 	vmov	r3, s15
 8000900:	b21b      	sxth	r3, r3
	}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <_ZN11ChorusBlockC1Eft>:
 */

#include "BasicChorus.hpp"


ChorusBlock::ChorusBlock(float initRate, uint16_t initDepth){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	ed87 0a02 	vstr	s0, [r7, #8]
 800091c:	460b      	mov	r3, r1
 800091e:	80fb      	strh	r3, [r7, #6]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe58 	bl	80005dc <_ZN11DelayBufferC1Et>
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	220a      	movs	r2, #10
 8000930:	819a      	strh	r2, [r3, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000938:	81da      	strh	r2, [r3, #14]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <_ZN11ChorusBlockC1Eft+0x50>)
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f04f 0200 	mov.w	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
	rate = initRate;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	611a      	str	r2, [r3, #16]
	modDepth = initDepth;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	88fa      	ldrh	r2, [r7, #6]
 8000952:	819a      	strh	r2, [r3, #12]
}
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	473b8000 	.word	0x473b8000
 8000964:	00000000 	.word	0x00000000

08000968 <_ZN11ChorusBlock7processEs>:


int16_t ChorusBlock::process(int16_t val){
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	ed2d 8b06 	vpush	{d8-d10}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	807b      	strh	r3, [r7, #2]


    int16_t modulatedSample = objectDelay.getDelayedSample(voiceOffset+modDepth*sin(2*M_PI*phase));
 8000978:	687c      	ldr	r4, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	89db      	ldrh	r3, [r3, #14]
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	899b      	ldrh	r3, [r3, #12]
 800098a:	ee07 3a90 	vmov	s15, r3
 800098e:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	edd3 7a07 	vldr	s15, [r3, #28]
 8000998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800099c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8000b70 <_ZN11ChorusBlock7processEs+0x208>
 80009a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009a4:	eeb0 0b47 	vmov.f64	d0, d7
 80009a8:	f010 ff1e 	bl	80117e8 <sin>
 80009ac:	eeb0 7b40 	vmov.f64	d7, d0
 80009b0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80009b4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80009b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009bc:	ee17 3a90 	vmov	r3, s15
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	4619      	mov	r1, r3
 80009c4:	4620      	mov	r0, r4
 80009c6:	f000 f93f 	bl	8000c48 <_ZN11DelayBuffer16getDelayedSampleEs>
 80009ca:	4603      	mov	r3, r0
 80009cc:	82fb      	strh	r3, [r7, #22]
    int16_t targetSample = objectDelay.getDelayedSample(voiceOffset+modDepth*sin(2*M_PI*phase)+1);
 80009ce:	687c      	ldr	r4, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	89db      	ldrh	r3, [r3, #14]
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	899b      	ldrh	r3, [r3, #12]
 80009e0:	ee07 3a90 	vmov	s15, r3
 80009e4:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80009ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f2:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8000b70 <_ZN11ChorusBlock7processEs+0x208>
 80009f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009fa:	eeb0 0b47 	vmov.f64	d0, d7
 80009fe:	f010 fef3 	bl	80117e8 <sin>
 8000a02:	eeb0 7b40 	vmov.f64	d7, d0
 8000a06:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000a0a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000a0e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a16:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a1a:	ee17 3a90 	vmov	r3, s15
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 f910 	bl	8000c48 <_ZN11DelayBuffer16getDelayedSampleEs>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	82bb      	strh	r3, [r7, #20]
    float fraction = (voiceOffset+modDepth*sin(2*M_PI*phase)) - (int16_t)(voiceOffset+modDepth*sin(2*M_PI*phase));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	89db      	ldrh	r3, [r3, #14]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	899b      	ldrh	r3, [r3, #12]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	edd3 7a07 	vldr	s15, [r3, #28]
 8000a4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4e:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8000b70 <_ZN11ChorusBlock7processEs+0x208>
 8000a52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a56:	eeb0 0b47 	vmov.f64	d0, d7
 8000a5a:	f010 fec5 	bl	80117e8 <sin>
 8000a5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000a62:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000a66:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	89db      	ldrh	r3, [r3, #14]
 8000a6e:	ee07 3a90 	vmov	s15, r3
 8000a72:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	899b      	ldrh	r3, [r3, #12]
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eeb8 abe7 	vcvt.f64.s32	d10, s15
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	edd3 7a07 	vldr	s15, [r3, #28]
 8000a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a8c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8000b70 <_ZN11ChorusBlock7processEs+0x208>
 8000a90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a94:	eeb0 0b47 	vmov.f64	d0, d7
 8000a98:	f010 fea6 	bl	80117e8 <sin>
 8000a9c:	eeb0 7b40 	vmov.f64	d7, d0
 8000aa0:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8000aa4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000aa8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000aac:	ee17 3a90 	vmov	r3, s15
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aba:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000abe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac2:	edc7 7a04 	vstr	s15, [r7, #16]
    int16_t interpolatedSample = xFadeLin(fraction, modulatedSample, targetSample);
 8000ac6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000aca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fee7 	bl	80008a8 <_ZN11ChorusBlock8xFadeLinEfss>
 8000ada:	4603      	mov	r3, r0
 8000adc:	81fb      	strh	r3, [r7, #14]

    processedSample = 0.5f*(val+interpolatedSample);
 8000ade:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000afc:	ee17 3a90 	vmov	r3, s15
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	831a      	strh	r2, [r3, #24]
    //R
    //4 sin calls appear to creak the system..
    //Try FPU, cache and also then LUT.

    //push into the delay buffer..
    objectDelay.insertSample(val);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f878 	bl	8000c04 <_ZN11DelayBuffer12insertSampleEs>

    phase+=rate/sampleRate; //Equivalent to 2*pi*F*t where t increments by 1/fs, thus rate/sampleRate
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	ed93 7a07 	vldr	s14, [r3, #28]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	ed93 6a04 	vldr	s12, [r3, #16]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	edd3 6a05 	vldr	s13, [r3, #20]
 8000b26:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	edc3 7a07 	vstr	s15, [r3, #28]
    if (phase>=1.0f)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	edd3 7a07 	vldr	s15, [r3, #28]
 8000b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b46:	db09      	blt.n	8000b5c <_ZN11ChorusBlock7processEs+0x1f4>
    	phase -=1.0f;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	edc3 7a07 	vstr	s15, [r3, #28]

    return processedSample;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]

}
 8000b62:	4618      	mov	r0, r3
 8000b64:	371c      	adds	r7, #28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	ecbd 8b06 	vpop	{d8-d10}
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	54442d18 	.word	0x54442d18
 8000b74:	401921fb 	.word	0x401921fb

08000b78 <_ZN11ChorusBlock7setRateEf>:

void ChorusBlock::setRate(float TargetRate){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	ed87 0a00 	vstr	s0, [r7]
	rate = TargetRate;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	611a      	str	r2, [r3, #16]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_ZN11ChorusBlock8setDepthEf>:


void ChorusBlock::setDepth(float TargetDepth){
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	ed87 0a00 	vstr	s0, [r7]
	 modDepth = TargetDepth;
 8000ba2:	edd7 7a00 	vldr	s15, [r7]
 8000ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000baa:	ee17 3a90 	vmov	r3, s15
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	819a      	strh	r2, [r3, #12]
 }
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZN9TREMBlockC1Ev>:

#include "BasicTremolo.hpp"

#include <cmath>

TREMBlock::TREMBlock()
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <_ZN9TREMBlockC1Ev+0x3c>)
 8000bdc:	611a      	str	r2, [r3, #16]
  {
    depth = 100.0; //50% depth
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <_ZN9TREMBlockC1Ev+0x40>)
 8000be2:	601a      	str	r2, [r3, #0]
    rate = 1.0;   //1Hz
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000bea:	605a      	str	r2, [r3, #4]

}
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	37aec33e 	.word	0x37aec33e
 8000c00:	42c80000 	.word	0x42c80000

08000c04 <_ZN11DelayBuffer12insertSampleEs>:
 * data = delayBuffer->getDelayedSample(delayNumSamples);
 *
 */


void DelayBuffer::insertSample(const int16_t sample){
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
	delayBuffer[index] = sample;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	887a      	ldrh	r2, [r7, #2]
 8000c1e:	801a      	strh	r2, [r3, #0]
	index++;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	605a      	str	r2, [r3, #4]
    if(index >= size){
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	db02      	blt.n	8000c3c <_ZN11DelayBuffer12insertSampleEs+0x38>
      index = 0;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
    }


}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_ZN11DelayBuffer16getDelayedSampleEs>:

int16_t DelayBuffer::getDelayedSample(int16_t delay){
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
    int16_t indexToReturn;
    delay = delay%size; //Trap delay>Size
 8000c54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6892      	ldr	r2, [r2, #8]
 8000c5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c60:	fb01 f202 	mul.w	r2, r1, r2
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	807b      	strh	r3, [r7, #2]
    if(delay <= index){
 8000c68:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dc0f      	bgt.n	8000c94 <_ZN11DelayBuffer16getDelayedSampleEs+0x4c>
      indexToReturn = (index - delay); //WriteIndex is index
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	81fb      	strh	r3, [r7, #14]
      return delayBuffer[indexToReturn];
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c92:	e013      	b.n	8000cbc <_ZN11DelayBuffer16getDelayedSampleEs+0x74>
    }else{
      indexToReturn = (size) - (delay - index); //wrap (at this point delay>index and if delay>size we get -ve)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	81fb      	strh	r3, [r7, #14]
      return delayBuffer[indexToReturn];
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
    }
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_ZN6Filter7prewarpEff>:
#include "Filter.hpp"

void Filter::prewarp(float fc, float fs) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	ed2d 8b02 	vpush	{d8}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cd8:	edc7 0a01 	vstr	s1, [r7, #4]

  // Check bounds on fs, prevent divide by zero or negative fs
  if (fs < 0)
 8000cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce8:	d502      	bpl.n	8000cf0 <_ZN6Filter7prewarpEff+0x28>
    fs = 1.0;
 8000cea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000cee:	607b      	str	r3, [r7, #4]

  // Check that fc <= fs / 2 (Nyquist)
  if (fc > fs / 2.0)
 8000cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cf4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cfc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d00:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000d04:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d10:	dd08      	ble.n	8000d24 <_ZN6Filter7prewarpEff+0x5c>
    fc = fs / 2.0;
 8000d12:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d1e:	edc7 7a02 	vstr	s15, [r7, #8]
 8000d22:	e009      	b.n	8000d38 <_ZN6Filter7prewarpEff+0x70>
  else if (fc < 0.0)
 8000d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d30:	d502      	bpl.n	8000d38 <_ZN6Filter7prewarpEff+0x70>
    fc = 0.0;
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]

  T = 1 / fs;
 8000d38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	edc3 7a01 	vstr	s15, [r3, #4]
  wc = (2 / T) * tan(M_PI * fc / fs);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d58:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000da0 <_ZN6Filter7prewarpEff+0xd8>
 8000d68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d74:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000d78:	eeb0 0b45 	vmov.f64	d0, d5
 8000d7c:	f010 fd80 	bl	8011880 <tan>
 8000d80:	eeb0 7b40 	vmov.f64	d7, d0
 8000d84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000d88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	edc3 7a00 	vstr	s15, [r3]
  
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	ecbd 8b02 	vpop	{d8}
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	54442d18 	.word	0x54442d18
 8000da4:	400921fb 	.word	0x400921fb

08000da8 <_ZN6Filter5resetEv>:

  return T;
  
}

void Filter::reset() {
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  for (int i = 0; i <= order; i++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e013      	b.n	8000dde <_ZN6Filter5resetEv+0x36>
    u[i] = 0.0;
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	330c      	adds	r3, #12
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
    y[i] = 0.0;
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3312      	adds	r3, #18
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
  for (int i = 0; i <= order; i++) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dde6      	ble.n	8000db6 <_ZN6Filter5resetEv+0xe>
  }
  
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_ZN13LowpassFilterC1Eiff>:
#include "LowpassFilter.hpp"

LowpassFilter::LowpassFilter(int n, float fc, float fs) {
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e04:	edc7 0a00 	vstr	s1, [r7]

  // Set filter order and check bounds
  order = n;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	609a      	str	r2, [r3, #8]
  
  if (order > 2) // Only up to second order at the moment...
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	dd03      	ble.n	8000e1e <_ZN13LowpassFilterC1Eiff+0x28>
    order = 2;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2202      	movs	r2, #2
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	e006      	b.n	8000e2c <_ZN13LowpassFilterC1Eiff+0x36>
  else if (order < 1)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	dc02      	bgt.n	8000e2c <_ZN13LowpassFilterC1Eiff+0x36>
    order = 1;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	609a      	str	r2, [r3, #8]

  // Pre-warp cut-off frequency (Tustin)
  prewarp(fc, fs);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	edd7 0a00 	vldr	s1, [r7]
 8000e32:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff46 	bl	8000cc8 <_ZN6Filter7prewarpEff>

  // Reset filter inputs and outputs
  reset();
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ffb2 	bl	8000da8 <_ZN6Filter5resetEv>

  // Set filter numerator and denominator coefficients
  float wcT   = wc * T;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	ed93 7a00 	vldr	s14, [r3]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e54:	edc7 7a05 	vstr	s15, [r7, #20]
  float wcTsq = wcT * wcT;
 8000e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e60:	edc7 7a04 	vstr	s15, [r7, #16]
  
  switch (order) {
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d002      	beq.n	8000e72 <_ZN13LowpassFilterC1Eiff+0x7c>
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d01b      	beq.n	8000ea8 <_ZN13LowpassFilterC1Eiff+0xb2>
 8000e70:	e055      	b.n	8000f1e <_ZN13LowpassFilterC1Eiff+0x128>

    case 1:

      num[0] = wc;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	60da      	str	r2, [r3, #12]
      num[1] = wc;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	611a      	str	r2, [r3, #16]

      den[0] =  2 + wcT;
 8000e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e86:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	edc3 7a08 	vstr	s15, [r3, #32]
      den[1] = -2 + wcT;
 8000e94:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      break;
 8000ea6:	e03a      	b.n	8000f1e <_ZN13LowpassFilterC1Eiff+0x128>

    case 2:     

      num[0] =     wcTsq;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
      num[1] = 2 * wcTsq;
 8000eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	edc3 7a04 	vstr	s15, [r3, #16]
      num[2] =     wcTsq;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	615a      	str	r2, [r3, #20]

      den[0] =  4 + 4 * wcT +     wcTsq;
 8000ec2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ec6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ece:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000ed6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	edc3 7a08 	vstr	s15, [r3, #32]
      den[1] = -8 +           2 * wcTsq;
 8000ee4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ee8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000eec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000ef0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      den[2] =  4 - 4 * wcT +     wcTsq;
 8000efa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000efe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      break;
 8000f1c:	bf00      	nop

  }
  
}
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f2e:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <MX_DFSDM1_Init+0x6c>)
 8000f30:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_DFSDM1_Init+0x68>)
 8000f7e:	f006 fc53 	bl	8007828 <HAL_DFSDM_ChannelInit>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000f88:	f001 fde4 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000029c 	.word	0x2000029c
 8000f94:	40017400 	.word	0x40017400

08000f98 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ae      	sub	sp, #184	; 0xb8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2290      	movs	r2, #144	; 0x90
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f011 fd33 	bl	8012a24 <memset>
  if(DFSDM1_Init == 0)
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d163      	bne.n	800108e <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00b fcd4 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000fe2:	f001 fdb7 	bl	8002b54 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a2c      	ldr	r2, [pc, #176]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 8000fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_DFSDM_ChannelMspInit+0x104>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 800102e:	f640 0308 	movw	r3, #2056	; 0x808
 8001032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001048:	2303      	movs	r3, #3
 800104a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001056:	f008 fdd1 	bl	8009bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800105a:	2308      	movs	r3, #8
 800105c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001072:	2303      	movs	r3, #3
 8001074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800107c:	4619      	mov	r1, r3
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001080:	f008 fdbc 	bl	8009bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_DFSDM_ChannelMspInit+0x100>)
 800108c:	6013      	str	r3, [r2, #0]
  }
}
 800108e:	bf00      	nop
 8001090:	37b8      	adds	r7, #184	; 0xb8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002d4 	.word	0x200002d4
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <MX_DMA2D_Init+0x6c>)
 80010b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010d8:	2200      	movs	r2, #0
 80010da:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010de:	2200      	movs	r2, #0
 80010e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010ea:	f007 f87f 	bl	80081ec <HAL_DMA2D_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80010f4:	f001 fd2e 	bl	8002b54 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010f8:	2101      	movs	r1, #1
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_DMA2D_Init+0x68>)
 80010fc:	f007 faf4 	bl	80086e8 <HAL_DMA2D_ConfigLayer>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8001106:	f001 fd25 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200002d8 	.word	0x200002d8
 8001114:	4002b000 	.word	0x4002b000

08001118 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <HAL_DMA2D_MspInit+0x44>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d113      	bne.n	8001152 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_DMA2D_MspInit+0x48>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_DMA2D_MspInit+0x48>)
 8001130:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_DMA2D_MspInit+0x48>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	205a      	movs	r0, #90	; 0x5a
 8001148:	f006 fb36 	bl	80077b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800114c:	205a      	movs	r0, #90	; 0x5a
 800114e:	f006 fb4f 	bl	80077f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	4002b000 	.word	0x4002b000
 8001160:	40023800 	.word	0x40023800

08001164 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0aa      	sub	sp, #168	; 0xa8
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800116a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001176:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f011 fc50 	bl	8012a24 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001184:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119a:	2234      	movs	r2, #52	; 0x34
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f011 fc40 	bl	8012a24 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	222c      	movs	r2, #44	; 0x2c
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f011 fc3a 	bl	8012a24 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80011b0:	4b64      	ldr	r3, [pc, #400]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 80011b2:	4a65      	ldr	r2, [pc, #404]	; (8001348 <MX_DSIHOST_DSI_Init+0x1e4>)
 80011b4:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80011bc:	4b61      	ldr	r3, [pc, #388]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 80011be:	2204      	movs	r2, #4
 80011c0:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80011c8:	2314      	movs	r3, #20
 80011ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80011da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011de:	4619      	mov	r1, r3
 80011e0:	4858      	ldr	r0, [pc, #352]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 80011e2:	f007 fc03 	bl	80089ec <HAL_DSI_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f001 fcb2 	bl	8002b54 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001222:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001226:	4619      	mov	r1, r3
 8001228:	4846      	ldr	r0, [pc, #280]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 800122a:	f008 fafb 	bl	8009824 <HAL_DSI_ConfigHostTimeouts>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8001234:	f001 fc8e 	bl	8002b54 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001238:	231c      	movs	r3, #28
 800123a:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800123c:	2321      	movs	r3, #33	; 0x21
 800123e:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8001240:	230f      	movs	r3, #15
 8001242:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8001244:	2319      	movs	r3, #25
 8001246:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8001250:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001254:	4619      	mov	r1, r3
 8001256:	483b      	ldr	r0, [pc, #236]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 8001258:	f008 fa7a 	bl	8009750 <HAL_DSI_ConfigPhyTimer>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8001262:	f001 fc77 	bl	8002b54 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001266:	2104      	movs	r1, #4
 8001268:	4836      	ldr	r0, [pc, #216]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 800126a:	f008 fa49 	bl	8009700 <HAL_DSI_ConfigFlowControl>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8001274:	f001 fc6e 	bl	8002b54 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001278:	f242 7110 	movw	r1, #10000	; 0x2710
 800127c:	4831      	ldr	r0, [pc, #196]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 800127e:	f008 fc8f 	bl	8009ba0 <HAL_DSI_SetLowPowerRXFilter>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001288:	f001 fc64 	bl	8002b54 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	482d      	ldr	r0, [pc, #180]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 8001290:	f007 fd3c 	bl	8008d0c <HAL_DSI_ConfigErrorMonitor>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800129a:	f001 fc5b 	bl	8002b54 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80012d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d6:	4619      	mov	r1, r3
 80012d8:	481a      	ldr	r0, [pc, #104]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 80012da:	f008 f9b3 	bl	8009644 <HAL_DSI_ConfigCommand>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 80012e4:	f001 fc36 	bl	8002b54 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80012ec:	2305      	movs	r3, #5
 80012ee:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 80012f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012f4:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80012f6:	2310      	movs	r3, #16
 80012f8:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80012fe:	2304      	movs	r3, #4
 8001300:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800130e:	2340      	movs	r3, #64	; 0x40
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 800131c:	f008 f8b8 	bl	8009490 <HAL_DSI_ConfigAdaptedCommandMode>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8001326:	f001 fc15 	bl	8002b54 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_DSIHOST_DSI_Init+0x1e0>)
 800132e:	f007 fe86 	bl	800903e <HAL_DSI_SetGenericVCID>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8001338:	f001 fc0c 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	37a8      	adds	r7, #168	; 0xa8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000330 	.word	0x20000330
 8001348:	40016c00 	.word	0x40016c00

0800134c <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_DSI_MspInit+0x8c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12f      	bne.n	80013ce <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_DSI_MspInit+0x90>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_DSI_MspInit+0x90>)
 8001374:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_DSI_MspInit+0x90>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_DSI_MspInit+0x90>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_DSI_MspInit+0x90>)
 800138c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_DSI_MspInit+0x90>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 800139e:	2304      	movs	r3, #4
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80013ae:	230d      	movs	r3, #13
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_DSI_MspInit+0x94>)
 80013ba:	f008 fc1f 	bl	8009bfc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2105      	movs	r1, #5
 80013c2:	2062      	movs	r0, #98	; 0x62
 80013c4:	f006 f9f8 	bl	80077b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80013c8:	2062      	movs	r0, #98	; 0x62
 80013ca:	f006 fa11 	bl	80077f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40016c00 	.word	0x40016c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40022400 	.word	0x40022400

080013e4 <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_DSI_MspDeInit+0x34>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10c      	bne.n	8001410 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_DSI_MspDeInit+0x38>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_DSI_MspDeInit+0x38>)
 80013fc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8001402:	2104      	movs	r1, #4
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <HAL_DSI_MspDeInit+0x3c>)
 8001406:	f008 fda5 	bl	8009f54 <HAL_GPIO_DeInit>

    /* DSI interrupt Deinit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 800140a:	2062      	movs	r0, #98	; 0x62
 800140c:	f006 f9fe 	bl	800780c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40016c00 	.word	0x40016c00
 800141c:	40023800 	.word	0x40023800
 8001420:	40022400 	.word	0x40022400

08001424 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_FMC_Init+0x94>)
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <MX_FMC_Init+0x98>)
 8001440:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_FMC_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_FMC_Init+0x94>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_FMC_Init+0x94>)
 8001450:	2204      	movs	r2, #4
 8001452:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_FMC_Init+0x94>)
 8001456:	2220      	movs	r2, #32
 8001458:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_FMC_Init+0x94>)
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_FMC_Init+0x94>)
 8001462:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001466:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_FMC_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_FMC_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_FMC_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_FMC_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001480:	2310      	movs	r3, #16
 8001482:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001484:	2310      	movs	r3, #16
 8001486:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001488:	2310      	movs	r3, #16
 800148a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800148c:	2310      	movs	r3, #16
 800148e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001490:	2310      	movs	r3, #16
 8001492:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001494:	2310      	movs	r3, #16
 8001496:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001498:	2310      	movs	r3, #16
 800149a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_FMC_Init+0x94>)
 80014a2:	f00c fd46 	bl	800df32 <HAL_SDRAM_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 80014ac:	f001 fb52 	bl	8002b54 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000034c 	.word	0x2000034c
 80014bc:	a0000140 	.word	0xa0000140

080014c0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_FMC_MspInit+0x104>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d16f      	bne.n	80015bc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_FMC_MspInit+0x104>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_FMC_MspInit+0x108>)
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_FMC_MspInit+0x108>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_FMC_MspInit+0x108>)
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80014fa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014fe:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800150c:	230c      	movs	r3, #12
 800150e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	482d      	ldr	r0, [pc, #180]	; (80015cc <HAL_FMC_MspInit+0x10c>)
 8001516:	f008 fb71 	bl	8009bfc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 800151a:	f248 1337 	movw	r3, #33079	; 0x8137
 800151e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800152c:	230c      	movs	r3, #12
 800152e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4826      	ldr	r0, [pc, #152]	; (80015d0 <HAL_FMC_MspInit+0x110>)
 8001536:	f008 fb61 	bl	8009bfc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800153a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800153e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154c:	230c      	movs	r3, #12
 800154e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <HAL_FMC_MspInit+0x114>)
 8001556:	f008 fb51 	bl	8009bfc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800155a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800155e:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800156c:	230c      	movs	r3, #12
 800156e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <HAL_FMC_MspInit+0x118>)
 8001576:	f008 fb41 	bl	8009bfc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800157a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800157e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800158c:	230c      	movs	r3, #12
 800158e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <HAL_FMC_MspInit+0x11c>)
 8001596:	f008 fb31 	bl	8009bfc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 800159a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800159e:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ac:	230c      	movs	r3, #12
 80015ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <HAL_FMC_MspInit+0x120>)
 80015b6:	f008 fb21 	bl	8009bfc <HAL_GPIO_Init>
 80015ba:	e000      	b.n	80015be <HAL_FMC_MspInit+0xfe>
    return;
 80015bc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000380 	.word	0x20000380
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40021800 	.word	0x40021800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40022000 	.word	0x40022000
 80015dc:	40021400 	.word	0x40021400
 80015e0:	40021c00 	.word	0x40021c00

080015e4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015ec:	f7ff ff68 	bl	80014c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <vApplicationGetIdleTaskMemory+0x2c>)
 8001608:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <vApplicationGetIdleTaskMemory+0x30>)
 800160e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000394 	.word	0x20000394
 8001628:	20000434 	.word	0x20000434

0800162c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b09a      	sub	sp, #104	; 0x68
 8001630:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of audioQueue */
  osMessageQDef(audioQueue, 16, uint8_t);
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_FREERTOS_Init+0x9c>)
 8001634:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  audioQueueHandle = osMessageCreate(osMessageQ(audioQueue), NULL);
 800163e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f00d fe64 	bl	800f312 <osMessageCreate>
 800164a:	4603      	mov	r3, r0
 800164c:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <MX_FREERTOS_Init+0xa0>)
 800164e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of audioTask */
  osThreadDef(audioTask, StartAudioTask, osPriorityHigh, 0, 128);
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_FREERTOS_Init+0xa4>)
 8001652:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001656:	461d      	mov	r5, r3
 8001658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  audioTaskHandle = osThreadCreate(osThread(audioTask), NULL);
 8001664:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f00d fdf1 	bl	800f252 <osThreadCreate>
 8001670:	4603      	mov	r3, r0
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <MX_FREERTOS_Init+0xa8>)
 8001674:	6013      	str	r3, [r2, #0]

  /* definition and creation of auxTask */
  osThreadDef(auxTask, auxTaskStart, osPriorityIdle, 0, 128);
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <MX_FREERTOS_Init+0xac>)
 8001678:	f107 0420 	add.w	r4, r7, #32
 800167c:	461d      	mov	r5, r3
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  auxTaskHandle = osThreadCreate(osThread(auxTask), NULL);
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f00d fdde 	bl	800f252 <osThreadCreate>
 8001696:	4603      	mov	r3, r0
 8001698:	4a10      	ldr	r2, [pc, #64]	; (80016dc <MX_FREERTOS_Init+0xb0>)
 800169a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myFlashAliveTas */
  osThreadDef(myFlashAliveTas, StartFlashAliveTask, osPriorityIdle, 0, 128);
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_FREERTOS_Init+0xb4>)
 800169e:	1d3c      	adds	r4, r7, #4
 80016a0:	461d      	mov	r5, r3
 80016a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myFlashAliveTasHandle = osThreadCreate(osThread(myFlashAliveTas), NULL);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00d fdcd 	bl	800f252 <osThreadCreate>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <MX_FREERTOS_Init+0xb8>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016be:	bf00      	nop
 80016c0:	3768      	adds	r7, #104	; 0x68
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bdb0      	pop	{r4, r5, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	080136f8 	.word	0x080136f8
 80016cc:	20000390 	.word	0x20000390
 80016d0:	08013714 	.word	0x08013714
 80016d4:	20000384 	.word	0x20000384
 80016d8:	08013738 	.word	0x08013738
 80016dc:	20000388 	.word	0x20000388
 80016e0:	08013764 	.word	0x08013764
 80016e4:	2000038c 	.word	0x2000038c

080016e8 <StartAudioTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAudioTask */
void StartAudioTask(void const * argument)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioTask */
  LocalFunction();
 80016f0:	f7fe ffc2 	bl	8000678 <LocalFunction>
  /* Infinite loop */
  for(;;)
  {
	BufferHandling();
 80016f4:	f000 f8f6 	bl	80018e4 <BufferHandling>
    osDelay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f00d fdf6 	bl	800f2ea <osDelay>
	BufferHandling();
 80016fe:	e7f9      	b.n	80016f4 <StartAudioTask+0xc>

08001700 <auxTaskStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_auxTaskStart */
void auxTaskStart(void const * argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOJ, ARD_D4_Pin); //Signify the task is running
      //We can read things and based on wha we read, change Globals
	  ts_status = BSP_TS_GetState(&TS_State);
 8001708:	482e      	ldr	r0, [pc, #184]	; (80017c4 <auxTaskStart+0xc4>)
 800170a:	f005 fe13 	bl	8007334 <BSP_TS_GetState>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <auxTaskStart+0xc8>)
 8001714:	601a      	str	r2, [r3, #0]
      if(TS_State.touchDetected){
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <auxTaskStart+0xc4>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d04d      	beq.n	80017ba <auxTaskStart+0xba>

		  //Due to the capacitive nature, sometimes spurious touches
		  //are detected..so watch this with traps.

		  /* Get X and Y position of the first touch post calibrated */
		  uint16_t x1 = TS_State.touchX[0];
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <auxTaskStart+0xc4>)
 8001720:	885b      	ldrh	r3, [r3, #2]
 8001722:	81fb      	strh	r3, [r7, #14]
		  uint16_t y1 = TS_State.touchY[0];
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <auxTaskStart+0xc4>)
 8001726:	88db      	ldrh	r3, [r3, #6]
 8001728:	81bb      	strh	r3, [r7, #12]

		  //Need to check these values in case of spurious values
		  //limit with a mod instruction for example
		  x1 = x1 % 800;
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <auxTaskStart+0xcc>)
 800172e:	fba2 1203 	umull	r1, r2, r2, r3
 8001732:	0a12      	lsrs	r2, r2, #8
 8001734:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001738:	fb01 f202 	mul.w	r2, r1, r2
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	81fb      	strh	r3, [r7, #14]
		  y1 = y1 % 480;
 8001740:	89ba      	ldrh	r2, [r7, #12]
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <auxTaskStart+0xd0>)
 8001744:	fba3 1302 	umull	r1, r3, r3, r2
 8001748:	0a19      	lsrs	r1, r3, #8
 800174a:	460b      	mov	r3, r1
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	015b      	lsls	r3, r3, #5
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	81bb      	strh	r3, [r7, #12]

		  volume = (float)(480-y1)*volume_inc;
 8001756:	89bb      	ldrh	r3, [r7, #12]
 8001758:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <auxTaskStart+0xd4>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <auxTaskStart+0xd8>)
 8001770:	edc3 7a00 	vstr	s15, [r3]
		  filterC = (float)(800-x1)*filter_inc;
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <auxTaskStart+0xdc>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <auxTaskStart+0xe0>)
 800178e:	edc3 7a00 	vstr	s15, [r3]

		  //filterC = filterC * 24000; //let's try Nyquist
		  filterC = filterC * 1000; // test mod depth
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <auxTaskStart+0xe0>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80017e4 <auxTaskStart+0xe4>
 800179c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <auxTaskStart+0xe0>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]
		  volume = volume * 2;  // settings for crazy x/y test
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <auxTaskStart+0xd8>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <auxTaskStart+0xd8>)
 80017b2:	edc3 7a00 	vstr	s15, [r3]



		  //Check we're still in the audio thread here ..use the LEDS as we're back in main..
		  UpdateObjects(); //This allows it to be called separately now..and also only call if a control has changed
 80017b6:	f7fe ff6f 	bl	8000698 <UpdateObjects>

      }

      //BSP_LCD_FillRect(100, 200, 10, 100);

      osDelay(10); //this will slow the scan time of the TS
 80017ba:	200a      	movs	r0, #10
 80017bc:	f00d fd95 	bl	800f2ea <osDelay>
	  ts_status = BSP_TS_GetState(&TS_State);
 80017c0:	e7a2      	b.n	8001708 <auxTaskStart+0x8>
 80017c2:	bf00      	nop
 80017c4:	200026e8 	.word	0x200026e8
 80017c8:	200026f4 	.word	0x200026f4
 80017cc:	51eb851f 	.word	0x51eb851f
 80017d0:	88888889 	.word	0x88888889
 80017d4:	20000020 	.word	0x20000020
 80017d8:	20000018 	.word	0x20000018
 80017dc:	20000024 	.word	0x20000024
 80017e0:	2000001c 	.word	0x2000001c
 80017e4:	447a0000 	.word	0x447a0000

080017e8 <StartFlashAliveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashAliveTask */
void StartFlashAliveTask(void const * argument)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashAliveTask */
  /* Infinite loop */


	HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2108      	movs	r1, #8
 80017f4:	4827      	ldr	r0, [pc, #156]	; (8001894 <StartFlashAliveTask+0xac>)
 80017f6:	f008 fcd1 	bl	800a19c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, ARD_D6_Pin, GPIO_PIN_SET );
 80017fa:	2201      	movs	r2, #1
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	4826      	ldr	r0, [pc, #152]	; (8001898 <StartFlashAliveTask+0xb0>)
 8001800:	f008 fccc 	bl	800a19c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D5_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180a:	4824      	ldr	r0, [pc, #144]	; (800189c <StartFlashAliveTask+0xb4>)
 800180c:	f008 fcc6 	bl	800a19c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, ARD_D4_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2101      	movs	r1, #1
 8001814:	481f      	ldr	r0, [pc, #124]	; (8001894 <StartFlashAliveTask+0xac>)
 8001816:	f008 fcc1 	bl	800a19c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, ARD_D3_Pin,  GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2140      	movs	r1, #64	; 0x40
 800181e:	481e      	ldr	r0, [pc, #120]	; (8001898 <StartFlashAliveTask+0xb0>)
 8001820:	f008 fcbc 	bl	800a19c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, ARD_D2_Pin, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2102      	movs	r1, #2
 8001828:	481a      	ldr	r0, [pc, #104]	; (8001894 <StartFlashAliveTask+0xac>)
 800182a:	f008 fcb7 	bl	800a19c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D1_Pin,  GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	481a      	ldr	r0, [pc, #104]	; (800189c <StartFlashAliveTask+0xb4>)
 8001834:	f008 fcb2 	bl	800a19c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, ARD_D0_Pin,  GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	4817      	ldr	r0, [pc, #92]	; (800189c <StartFlashAliveTask+0xb4>)
 800183e:	f008 fcad 	bl	800a19c <HAL_GPIO_WritePin>

	for(;;)
	{
		BSP_LED_Toggle(LED_GREEN);//Flash on main board
 8001842:	2001      	movs	r0, #1
 8001844:	f003 fc2e 	bl	80050a4 <BSP_LED_Toggle>
		//BSP_LCD_FillRect(350, 200, 100, 100);

		//Basic Audio Monitor..

		//flash all the other leds..
		HAL_GPIO_TogglePin(GPIOJ, ARD_D7_Pin);
 8001848:	2108      	movs	r1, #8
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <StartFlashAliveTask+0xac>)
 800184c:	f008 fcbf 	bl	800a1ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOF, ARD_D6_Pin);
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <StartFlashAliveTask+0xb0>)
 8001854:	f008 fcbb 	bl	800a1ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
 8001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185c:	480f      	ldr	r0, [pc, #60]	; (800189c <StartFlashAliveTask+0xb4>)
 800185e:	f008 fcb6 	bl	800a1ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOJ, ARD_D4_Pin);
 8001862:	2101      	movs	r1, #1
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <StartFlashAliveTask+0xac>)
 8001866:	f008 fcb2 	bl	800a1ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOF, ARD_D3_Pin);
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <StartFlashAliveTask+0xb0>)
 800186e:	f008 fcae 	bl	800a1ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOJ, ARD_D2_Pin);
 8001872:	2102      	movs	r1, #2
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <StartFlashAliveTask+0xac>)
 8001876:	f008 fcaa 	bl	800a1ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D1_Pin);
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <StartFlashAliveTask+0xb4>)
 800187e:	f008 fca6 	bl	800a1ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, ARD_D0_Pin);
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <StartFlashAliveTask+0xb4>)
 8001886:	f008 fca2 	bl	800a1ce <HAL_GPIO_TogglePin>

		osDelay(100);
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	f00d fd2d 	bl	800f2ea <osDelay>
		BSP_LED_Toggle(LED_GREEN);//Flash on main board
 8001890:	e7d7      	b.n	8001842 <StartFlashAliveTask+0x5a>
 8001892:	bf00      	nop
 8001894:	40022400 	.word	0x40022400
 8001898:	40021400 	.word	0x40021400
 800189c:	40020800 	.word	0x40020800

080018a0 <CopyBuffer>:
   * Will get called at half and full buffer point so..can copy the contents into
   * L & R buffer then process so long as the copy is quick enough..
   *
   */
 void CopyBuffer(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BlockSize)
  {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	4613      	mov	r3, r2
 80018ac:	80fb      	strh	r3, [r7, #6]
     //Lets clear the entire destination playback DMA buffer here..
 	 //We're just clearing  because if we operate only on the left or right
 	 //the  data from  the last block will still be there..
	 //If we're operating on both, this can be removed

 	 for (uint32_t i = 0; i < BlockSize; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e008      	b.n	80018c6 <CopyBuffer+0x26>
 	 {
 		 pbuffer1[i] = 0; //needs  to  be careful as these are still int16_t buffers when we do maths
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	2200      	movs	r2, #0
 80018be:	801a      	strh	r2, [r3, #0]
 	 for (uint32_t i = 0; i < BlockSize; i++)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3f2      	bcc.n	80018b4 <CopyBuffer+0x14>
 	 * circular buffer, block size, and the
 	 * current output pointer to Playback Buffer, the latter
 	 * being a flip flop between Playback[0] and Playback[size/2]
 	 */

 	 AudioProcess( pbuffer1, pbuffer2, BlockSize);
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	461a      	mov	r2, r3
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7fe ff15 	bl	8000704 <AudioProcess>
 	 //We could also try the access to the CMSIS DSP functions here..




} //Copy Buffer function
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <BufferHandling>:



void BufferHandling(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0

     /* 1st or 2nd half of the record buffer ready for being copied to the Playback buffer */

	osEvent retvalue  = osMessageGet( audioQueueHandle, 1000 );
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <BufferHandling+0x64>)
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	463b      	mov	r3, r7
 80018f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00d fd75 	bl	800f3e4 <osMessageGet>
	uint16_t buffer_state = retvalue.value.v;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	81fb      	strh	r3, [r7, #14]

    switch(buffer_state){
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d00f      	beq.n	8001924 <BufferHandling+0x40>
 8001904:	2b02      	cmp	r3, #2
 8001906:	dc17      	bgt.n	8001938 <BufferHandling+0x54>
 8001908:	2b00      	cmp	r3, #0
 800190a:	d018      	beq.n	800193e <BufferHandling+0x5a>
 800190c:	2b01      	cmp	r3, #1
 800190e:	d113      	bne.n	8001938 <BufferHandling+0x54>
    	case BUFFER_OFFSET_HALF:{
    		//HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_SET); //Indicate rate of half filling buffer
    		//Ready to copy first block of audio samples to output buffer
        	CopyBuffer(&PlaybackBuffer[0],
 8001910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001914:	490d      	ldr	r1, [pc, #52]	; (800194c <BufferHandling+0x68>)
 8001916:	480e      	ldr	r0, [pc, #56]	; (8001950 <BufferHandling+0x6c>)
 8001918:	f7ff ffc2 	bl	80018a0 <CopyBuffer>
        	&RecordBuffer[0],
        	RECORD_BUFFER_SIZE / 2);
        	audio_rec_buffer_state = BUFFER_OFFSET_NONE;  //Reset
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <BufferHandling+0x70>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
        	//HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
        	//HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin, GPIO_PIN_RESET); //Indicate rate of half filling buffer
        	break;
 8001922:	e00d      	b.n	8001940 <BufferHandling+0x5c>
        	}
    	case BUFFER_OFFSET_FULL:{
    		//Ready to copy next block of audio samples to output buffer
    		 CopyBuffer(&PlaybackBuffer[RECORD_BUFFER_SIZE / 2],
 8001924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001928:	490b      	ldr	r1, [pc, #44]	; (8001958 <BufferHandling+0x74>)
 800192a:	480c      	ldr	r0, [pc, #48]	; (800195c <BufferHandling+0x78>)
 800192c:	f7ff ffb8 	bl	80018a0 <CopyBuffer>
        	 &RecordBuffer[RECORD_BUFFER_SIZE / 2],
        	 RECORD_BUFFER_SIZE / 2);
        	 audio_rec_buffer_state = BUFFER_OFFSET_NONE; //Reset
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <BufferHandling+0x70>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
        	 //HAL_GPIO_TogglePin(GPIOC, ARD_D5_Pin);
        	 break;
 8001936:	e003      	b.n	8001940 <BufferHandling+0x5c>
        	 //Allow subtask like  scan of TS proc
        	 break;
        	 }
        default : {
        	//printf("Error on audio_rec_buffer_state switch\r\n");
        	Error_Handler();
 8001938:	f001 f90c 	bl	8002b54 <Error_Handler>
        	break;
 800193c:	e000      	b.n	8001940 <BufferHandling+0x5c>
        	 break;
 800193e:	bf00      	nop
        	}
    	} //End of switch
} // end AUDIO_PROCESS function
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000390 	.word	0x20000390
 800194c:	200006e0 	.word	0x200006e0
 8001950:	200016e0 	.word	0x200016e0
 8001954:	200026e0 	.word	0x200026e0
 8001958:	20000ee0 	.word	0x20000ee0
 800195c:	20001ee0 	.word	0x20001ee0

08001960 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
//These are the important call back functions, declared as weak in the discovery_audio.h/.c
    //So we can override them as needed
    //As they're in main, we will need to make sure they then can see and can send to the FreeRTOS listener
    //thread
    void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
    {
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
        //audio_tx_buffer_state = 1;
        //Everything is driven by the receive but we need to have
        //this callback
    }
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <BSP_AUDIO_IN_TransferComplete_CallBack>:
      * @brief Manages the DMA Transfer complete interrupt.
      * @param None
      * @retval None
      */
    void BSP_AUDIO_IN_TransferComplete_CallBack(void)
    {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
       audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
       osMessagePut(audioQueueHandle, audio_rec_buffer_state, 1000); //Send 1
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <BSP_AUDIO_IN_TransferComplete_CallBack+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <BSP_AUDIO_IN_TransferComplete_CallBack+0x20>)
 8001980:	6811      	ldr	r1, [r2, #0]
 8001982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001986:	4618      	mov	r0, r3
 8001988:	f00d fcec 	bl	800f364 <osMessagePut>
    }
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200026e0 	.word	0x200026e0
 8001994:	20000390 	.word	0x20000390

08001998 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
      * @brief  Manages the DMA Half Transfer complete interrupt.
      * @param  None
      * @retval None
      */
    void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
    {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
        audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
        osMessagePut(audioQueueHandle, audio_rec_buffer_state, 1000); //Send 1
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x20>)
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00d fcd8 	bl	800f364 <osMessagePut>
    }
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200026e0 	.word	0x200026e0
 80019bc:	20000390 	.word	0x20000390

080019c0 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b090      	sub	sp, #64	; 0x40
 80019c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d6:	4bad      	ldr	r3, [pc, #692]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4aac      	ldr	r2, [pc, #688]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 80019dc:	f043 0310 	orr.w	r3, r3, #16
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4baa      	ldr	r3, [pc, #680]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ee:	4ba7      	ldr	r3, [pc, #668]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4aa6      	ldr	r2, [pc, #664]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 80019f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4ba4      	ldr	r3, [pc, #656]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4ba1      	ldr	r3, [pc, #644]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4aa0      	ldr	r2, [pc, #640]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b9e      	ldr	r3, [pc, #632]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b9b      	ldr	r3, [pc, #620]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a9a      	ldr	r2, [pc, #616]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b98      	ldr	r3, [pc, #608]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b95      	ldr	r3, [pc, #596]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b8f      	ldr	r3, [pc, #572]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a8e      	ldr	r2, [pc, #568]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b8c      	ldr	r3, [pc, #560]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a88      	ldr	r2, [pc, #544]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b86      	ldr	r3, [pc, #536]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a7e:	4b83      	ldr	r3, [pc, #524]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a82      	ldr	r2, [pc, #520]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a96:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a7c      	ldr	r2, [pc, #496]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b7a      	ldr	r3, [pc, #488]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	4b77      	ldr	r3, [pc, #476]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a76      	ldr	r2, [pc, #472]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b74      	ldr	r3, [pc, #464]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac6:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a70      	ldr	r2, [pc, #448]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b6e      	ldr	r3, [pc, #440]	; (8001c8c <MX_GPIO_Init+0x2cc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ARD_D5_Pin|ARD_D0_Pin|ARD_D1_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001ae4:	486a      	ldr	r0, [pc, #424]	; (8001c90 <MX_GPIO_Init+0x2d0>)
 8001ae6:	f008 fb59 	bl	800a19c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ARD_D6_Pin|ARD_D3_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	21c0      	movs	r1, #192	; 0xc0
 8001aee:	4869      	ldr	r0, [pc, #420]	; (8001c94 <MX_GPIO_Init+0x2d4>)
 8001af0:	f008 fb54 	bl	800a19c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	210b      	movs	r1, #11
 8001af8:	4867      	ldr	r0, [pc, #412]	; (8001c98 <MX_GPIO_Init+0x2d8>)
 8001afa:	f008 fb4f 	bl	800a19c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001afe:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b10:	230b      	movs	r3, #11
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4860      	ldr	r0, [pc, #384]	; (8001c9c <MX_GPIO_Init+0x2dc>)
 8001b1c:	f008 f86e 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001b20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b26:	2312      	movs	r3, #18
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b32:	2304      	movs	r3, #4
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4858      	ldr	r0, [pc, #352]	; (8001ca0 <MX_GPIO_Init+0x2e0>)
 8001b3e:	f008 f85d 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001b42:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b54:	230a      	movs	r3, #10
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4850      	ldr	r0, [pc, #320]	; (8001ca0 <MX_GPIO_Init+0x2e0>)
 8001b60:	f008 f84c 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001b64:	2318      	movs	r3, #24
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001b74:	230a      	movs	r3, #10
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4848      	ldr	r0, [pc, #288]	; (8001ca0 <MX_GPIO_Init+0x2e0>)
 8001b80:	f008 f83c 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001b94:	230b      	movs	r3, #11
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4841      	ldr	r0, [pc, #260]	; (8001ca4 <MX_GPIO_Init+0x2e4>)
 8001ba0:	f008 f82c 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4833      	ldr	r0, [pc, #204]	; (8001c90 <MX_GPIO_Init+0x2d0>)
 8001bc2:	f008 f81b 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8001bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	4619      	mov	r1, r3
 8001be2:	4831      	ldr	r0, [pc, #196]	; (8001ca8 <MX_GPIO_Init+0x2e8>)
 8001be4:	f008 f80a 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001bf8:	230b      	movs	r3, #11
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c00:	4619      	mov	r1, r3
 8001c02:	4827      	ldr	r0, [pc, #156]	; (8001ca0 <MX_GPIO_Init+0x2e0>)
 8001c04:	f007 fffa 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin
 8001c08:	f24f 0330 	movw	r3, #61488	; 0xf030
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481e      	ldr	r0, [pc, #120]	; (8001c98 <MX_GPIO_Init+0x2d8>)
 8001c1e:	f007 ffed 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c34:	2305      	movs	r3, #5
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	481a      	ldr	r0, [pc, #104]	; (8001ca8 <MX_GPIO_Init+0x2e8>)
 8001c40:	f007 ffdc 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8001c44:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4814      	ldr	r0, [pc, #80]	; (8001cac <MX_GPIO_Init+0x2ec>)
 8001c5a:	f007 ffcf 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001c5e:	23f8      	movs	r3, #248	; 0xf8
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <MX_GPIO_Init+0x2f0>)
 8001c72:	f007 ffc3 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	e013      	b.n	8001cb4 <MX_GPIO_Init+0x2f4>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40021400 	.word	0x40021400
 8001c98:	40022400 	.word	0x40022400
 8001c9c:	40021800 	.word	0x40021800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40022000 	.word	0x40022000
 8001cb0:	40022800 	.word	0x40022800
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	48b6      	ldr	r0, [pc, #728]	; (8001f98 <MX_GPIO_Init+0x5d8>)
 8001cbe:	f007 ff9d 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001cc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001cd4:	230b      	movs	r3, #11
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	48ae      	ldr	r0, [pc, #696]	; (8001f98 <MX_GPIO_Init+0x5d8>)
 8001ce0:	f007 ff8c 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001ce4:	2330      	movs	r3, #48	; 0x30
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	48a9      	ldr	r0, [pc, #676]	; (8001f9c <MX_GPIO_Init+0x5dc>)
 8001cf8:	f007 ff80 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d16:	4619      	mov	r1, r3
 8001d18:	48a1      	ldr	r0, [pc, #644]	; (8001fa0 <MX_GPIO_Init+0x5e0>)
 8001d1a:	f007 ff6f 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	4898      	ldr	r0, [pc, #608]	; (8001f9c <MX_GPIO_Init+0x5dc>)
 8001d3a:	f007 ff5f 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d50:	230a      	movs	r3, #10
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4892      	ldr	r0, [pc, #584]	; (8001fa4 <MX_GPIO_Init+0x5e4>)
 8001d5c:	f007 ff4e 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8001d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d72:	2300      	movs	r3, #0
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4888      	ldr	r0, [pc, #544]	; (8001fa0 <MX_GPIO_Init+0x5e0>)
 8001d7e:	f007 ff3d 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d96:	4619      	mov	r1, r3
 8001d98:	4882      	ldr	r0, [pc, #520]	; (8001fa4 <MX_GPIO_Init+0x5e4>)
 8001d9a:	f007 ff2f 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin|ARD_D0_Pin|ARD_D1_Pin;
 8001d9e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	487c      	ldr	r0, [pc, #496]	; (8001fa8 <MX_GPIO_Init+0x5e8>)
 8001db8:	f007 ff20 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dcc:	230a      	movs	r3, #10
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4875      	ldr	r0, [pc, #468]	; (8001fac <MX_GPIO_Init+0x5ec>)
 8001dd8:	f007 ff10 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001ddc:	2348      	movs	r3, #72	; 0x48
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	486a      	ldr	r0, [pc, #424]	; (8001f98 <MX_GPIO_Init+0x5d8>)
 8001df0:	f007 ff04 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D3_Pin;
 8001df4:	23c0      	movs	r3, #192	; 0xc0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4869      	ldr	r0, [pc, #420]	; (8001fb0 <MX_GPIO_Init+0x5f0>)
 8001e0c:	f007 fef6 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001e10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e16:	2303      	movs	r3, #3
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	4619      	mov	r1, r3
 8001e24:	4862      	ldr	r0, [pc, #392]	; (8001fb0 <MX_GPIO_Init+0x5f0>)
 8001e26:	f007 fee9 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e42:	4619      	mov	r1, r3
 8001e44:	4858      	ldr	r0, [pc, #352]	; (8001fa8 <MX_GPIO_Init+0x5e8>)
 8001e46:	f007 fed9 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e4a:	2332      	movs	r3, #50	; 0x32
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e5a:	230b      	movs	r3, #11
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e62:	4619      	mov	r1, r3
 8001e64:	4850      	ldr	r0, [pc, #320]	; (8001fa8 <MX_GPIO_Init+0x5e8>)
 8001e66:	f007 fec9 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	484a      	ldr	r0, [pc, #296]	; (8001fa8 <MX_GPIO_Init+0x5e8>)
 8001e7e:	f007 febd 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e88:	2312      	movs	r3, #18
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	483f      	ldr	r0, [pc, #252]	; (8001f9c <MX_GPIO_Init+0x5dc>)
 8001ea0:	f007 feac 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ea4:	2386      	movs	r3, #134	; 0x86
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eb4:	230b      	movs	r3, #11
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4838      	ldr	r0, [pc, #224]	; (8001fa0 <MX_GPIO_Init+0x5e0>)
 8001ec0:	f007 fe9c 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4831      	ldr	r0, [pc, #196]	; (8001fa0 <MX_GPIO_Init+0x5e0>)
 8001eda:	f007 fe8f 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001ede:	2350      	movs	r3, #80	; 0x50
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	482b      	ldr	r0, [pc, #172]	; (8001fa0 <MX_GPIO_Init+0x5e0>)
 8001ef2:	f007 fe83 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
 8001ef6:	230b      	movs	r3, #11
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4829      	ldr	r0, [pc, #164]	; (8001fb4 <MX_GPIO_Init+0x5f4>)
 8001f0e:	f007 fe75 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f24:	230a      	movs	r3, #10
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	481b      	ldr	r0, [pc, #108]	; (8001f9c <MX_GPIO_Init+0x5dc>)
 8001f30:	f007 fe64 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|ARD_D9_Pin;
 8001f34:	23c0      	movs	r3, #192	; 0xc0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f44:	4619      	mov	r1, r3
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <MX_GPIO_Init+0x5ec>)
 8001f48:	f007 fe58 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f4c:	2328      	movs	r3, #40	; 0x28
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f64:	4619      	mov	r1, r3
 8001f66:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <MX_GPIO_Init+0x5e0>)
 8001f68:	f007 fe48 	bl	8009bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001f6c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f86:	4619      	mov	r1, r3
 8001f88:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <MX_GPIO_Init+0x5f8>)
 8001f8a:	f007 fe37 	bl	8009bfc <HAL_GPIO_Init>

}
 8001f8e:	bf00      	nop
 8001f90:	3740      	adds	r7, #64	; 0x40
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40021c00 	.word	0x40021c00
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40022400 	.word	0x40022400
 8001fb8:	40020400 	.word	0x40020400

08001fbc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09a      	sub	sp, #104	; 0x68
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fc6:	2234      	movs	r2, #52	; 0x34
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f010 fd2a 	bl	8012a24 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	2234      	movs	r2, #52	; 0x34
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f010 fd24 	bl	8012a24 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001fdc:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <MX_LTDC_Init+0x15c>)
 8001fde:	4a4f      	ldr	r2, [pc, #316]	; (800211c <MX_LTDC_Init+0x160>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001fe2:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <MX_LTDC_Init+0x15c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <MX_LTDC_Init+0x15c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <MX_LTDC_Init+0x15c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ff4:	4b48      	ldr	r3, [pc, #288]	; (8002118 <MX_LTDC_Init+0x15c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <MX_LTDC_Init+0x15c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8002000:	4b45      	ldr	r3, [pc, #276]	; (8002118 <MX_LTDC_Init+0x15c>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8002006:	4b44      	ldr	r3, [pc, #272]	; (8002118 <MX_LTDC_Init+0x15c>)
 8002008:	2201      	movs	r2, #1
 800200a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 800200c:	4b42      	ldr	r3, [pc, #264]	; (8002118 <MX_LTDC_Init+0x15c>)
 800200e:	2201      	movs	r2, #1
 8002010:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <MX_LTDC_Init+0x15c>)
 8002014:	f240 3221 	movw	r2, #801	; 0x321
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 800201a:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <MX_LTDC_Init+0x15c>)
 800201c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 802;
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <MX_LTDC_Init+0x15c>)
 8002024:	f240 3222 	movw	r2, #802	; 0x322
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <MX_LTDC_Init+0x15c>)
 800202c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <MX_LTDC_Init+0x15c>)
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <MX_LTDC_Init+0x15c>)
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002042:	4b35      	ldr	r3, [pc, #212]	; (8002118 <MX_LTDC_Init+0x15c>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800204a:	4833      	ldr	r0, [pc, #204]	; (8002118 <MX_LTDC_Init+0x15c>)
 800204c:	f008 fe84 	bl	800ad58 <HAL_LTDC_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002056:	f000 fd7d 	bl	8002b54 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800206a:	2300      	movs	r3, #0
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800207c:	2305      	movs	r3, #5
 800207e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800209e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	481c      	ldr	r0, [pc, #112]	; (8002118 <MX_LTDC_Init+0x15c>)
 80020a8:	f008 ffde 	bl	800b068 <HAL_LTDC_ConfigLayer>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80020b2:	f000 fd4f 	bl	8002b54 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80020d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80020d8:	2305      	movs	r3, #5
 80020da:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80020fa:	463b      	mov	r3, r7
 80020fc:	2201      	movs	r2, #1
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_LTDC_Init+0x15c>)
 8002102:	f008 ffb1 	bl	800b068 <HAL_LTDC_ConfigLayer>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800210c:	f000 fd22 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	3768      	adds	r7, #104	; 0x68
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000634 	.word	0x20000634
 800211c:	40016800 	.word	0x40016800

08002120 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_LTDC_MspInit+0x44>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d113      	bne.n	800215a <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_LTDC_MspInit+0x48>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <HAL_LTDC_MspInit+0x48>)
 8002138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_LTDC_MspInit+0x48>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2105      	movs	r1, #5
 800214e:	2058      	movs	r0, #88	; 0x58
 8002150:	f005 fb32 	bl	80077b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002154:	2058      	movs	r0, #88	; 0x58
 8002156:	f005 fb4b 	bl	80077f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40016800 	.word	0x40016800
 8002168:	40023800 	.word	0x40023800

0800216c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002170:	f3bf 8f4f 	dsb	sy
}
 8002174:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002176:	f3bf 8f6f 	isb	sy
}
 800217a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <SCB_EnableICache+0x48>)
 800217e:	2200      	movs	r2, #0
 8002180:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002184:	f3bf 8f4f 	dsb	sy
}
 8002188:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800218a:	f3bf 8f6f 	isb	sy
}
 800218e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <SCB_EnableICache+0x48>)
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <SCB_EnableICache+0x48>)
 8002196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800219c:	f3bf 8f4f 	dsb	sy
}
 80021a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021a2:	f3bf 8f6f 	isb	sy
}
 80021a6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <SCB_EnableDCache+0x84>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80021c6:	f3bf 8f4f 	dsb	sy
}
 80021ca:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <SCB_EnableDCache+0x84>)
 80021ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0b5b      	lsrs	r3, r3, #13
 80021d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021dc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80021f0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80021f6:	4911      	ldr	r1, [pc, #68]	; (800223c <SCB_EnableDCache+0x84>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	60ba      	str	r2, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ef      	bne.n	80021e8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	60fa      	str	r2, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e5      	bne.n	80021de <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8002212:	f3bf 8f4f 	dsb	sy
}
 8002216:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <SCB_EnableDCache+0x84>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <SCB_EnableDCache+0x84>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002222:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002224:	f3bf 8f4f 	dsb	sy
}
 8002228:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800222a:	f3bf 8f6f 	isb	sy
}
 800222e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <OnError_Handler>:
  * @brief  On Error Handler on condition TRUE.
  * @param  condition : Can be TRUE or FALSE
  * @retval None
  */
void OnError_Handler(uint32_t condition)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(condition)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <OnError_Handler+0x16>
  {
    BSP_LED_On(LED1);
 800224e:	2000      	movs	r0, #0
 8002250:	f002 ff0e 	bl	8005070 <BSP_LED_On>
    while(1) { ; } /* Blocking on error */
 8002254:	e7fe      	b.n	8002254 <OnError_Handler+0x14>
  }
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002266:	f7ff ff81 	bl	800216c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800226a:	f7ff ffa5 	bl	80021b8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226e:	f005 f975 	bl	800755c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002272:	f000 f8d9 	bl	8002428 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002276:	f000 f947 	bl	8002508 <PeriphCommonClock_Config>
  //PeripheralInit(); //THIS IS  AUTOGEN BUT UART IS NOT INCLUDED!!?

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227a:	f7ff fba1 	bl	80019c0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800227e:	f7fe fe53 	bl	8000f28 <MX_DFSDM1_Init>
  MX_SAI1_Init();
 8002282:	f000 fd81 	bl	8002d88 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8002286:	f001 f805 	bl	8003294 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 800228a:	f7ff fe97 	bl	8001fbc <MX_LTDC_Init>
  MX_DMA2D_Init();
 800228e:	f7fe ff0b 	bl	80010a8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8002292:	f7fe ff67 	bl	8001164 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8002296:	f7ff f8c5 	bl	8001424 <MX_FMC_Init>
  MX_QUADSPI_Init();
 800229a:	f000 fc67 	bl	8002b6c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 800229e:	2001      	movs	r0, #1
 80022a0:	f002 feb6 	bl	8005010 <BSP_LED_Init>
  BSP_LED_On(LED_GREEN);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f002 fee3 	bl	8005070 <BSP_LED_On>
  //This could potentially? be used to flip the display buffer to create animations..possibly


  //ITM_SendChar ('x');

  printf("Connected to STM32F769I-Discovery USART 1\r\n");
 80022aa:	4854      	ldr	r0, [pc, #336]	; (80023fc <main+0x19c>)
 80022ac:	f010 fbb2 	bl	8012a14 <puts>
  printf("\r\n");
 80022b0:	4853      	ldr	r0, [pc, #332]	; (8002400 <main+0x1a0>)
 80022b2:	f010 fbaf 	bl	8012a14 <puts>


  // Enable access to the qspi flash chip in memory mapped mode

  uint8_t bsp_status = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	71fb      	strb	r3, [r7, #7]
  bsp_status = BSP_QSPI_Init();
 80022ba:	f004 f915 	bl	80064e8 <BSP_QSPI_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(bsp_status != QSPI_OK);
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ffb6 	bl	8002240 <OnError_Handler>
  bsp_status = BSP_QSPI_EnableMemoryMappedMode();
 80022d4:	f004 f978 	bl	80065c8 <BSP_QSPI_EnableMemoryMappedMode>
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(bsp_status != QSPI_OK);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffa9 	bl	8002240 <OnError_Handler>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80022ee:	205c      	movs	r0, #92	; 0x5c
 80022f0:	f005 fa8c 	bl	800780c <HAL_NVIC_DisableIRQ>

  // Enable the LCD
  uint8_t  lcd_status = LCD_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	71bb      	strb	r3, [r7, #6]
  lcd_status = BSP_LCD_Init();
 80022f8:	f003 fa78 	bl	80057ec <BSP_LCD_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	71bb      	strb	r3, [r7, #6]
  OnError_Handler(lcd_status != LCD_OK);
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff97 	bl	8002240 <OnError_Handler>

  //All these functions send to use draw immediate which is no good for animation
  //Need to use the lower level commands to do this and switch buffer on LCD blanking reload

  //Set Brightness
  BSP_LCD_SetBrightness(100); //0 - 100 Max
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f003 fed2 	bl	80060bc <BSP_LCD_SetBrightness>

  // Get the LCD Width and Height
  LCD_X_Size = BSP_LCD_GetXSize();
 8002318:	f003 fbec 	bl	8005af4 <BSP_LCD_GetXSize>
 800231c:	4603      	mov	r3, r0
 800231e:	4a39      	ldr	r2, [pc, #228]	; (8002404 <main+0x1a4>)
 8002320:	6013      	str	r3, [r2, #0]
  LCD_Y_Size = BSP_LCD_GetYSize();
 8002322:	f003 fbf3 	bl	8005b0c <BSP_LCD_GetYSize>
 8002326:	4603      	mov	r3, r0
 8002328:	4a37      	ldr	r2, [pc, #220]	; (8002408 <main+0x1a8>)
 800232a:	6013      	str	r3, [r2, #0]


  // Configure the LCD layers with their framebuffers in SRAM
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800232c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002330:	2000      	movs	r0, #0
 8002332:	f003 fbf7 	bl	8005b24 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + (800*480*4));
 8002336:	4935      	ldr	r1, [pc, #212]	; (800240c <main+0x1ac>)
 8002338:	2001      	movs	r0, #1
 800233a:	f003 fbf3 	bl	8005b24 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_TRANSPARENT); //This ensures both layers are visible when overlaid?
 800233e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8002342:	2001      	movs	r0, #1
 8002344:	f003 fc5e 	bl	8005c04 <BSP_LCD_SetColorKeying>

  // Draw the image on layer 0
  //This sets the 'internal active layer variable that is used by the drawign routines

  BSP_LCD_SelectLayer(0); //Selects 0 as active  layer index ..all draws will go to zero..
 8002348:	2000      	movs	r0, #0
 800234a:	f003 fc4b 	bl	8005be4 <BSP_LCD_SelectLayer>



  //This bitmap is defined in image_xxx.h and placed during programming in the EEPROM accessed using the QuadSPI
  // Need to ensure its flashed into the QSPI 64M external before running.
  BSP_LCD_DrawBitmap(0, 0, webb_first_f769idisco);
 800234e:	4a30      	ldr	r2, [pc, #192]	; (8002410 <main+0x1b0>)
 8002350:	2100      	movs	r1, #0
 8002352:	2000      	movs	r0, #0
 8002354:	f003 fe00 	bl	8005f58 <BSP_LCD_DrawBitmap>



 // Draw text on layer one and use transparency to make the background image visible

  BSP_LCD_SelectLayer(1); //Makes 1 the active layer
 8002358:	2001      	movs	r0, #1
 800235a:	f003 fc43 	bl	8005be4 <BSP_LCD_SelectLayer>

  //BSP_LCD_DrawBitmap(0, 0, webb_first_f769idisco);

  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT); //So we can see the Layer 0 underneath ..important otherwise layer is overlaid with keying.
 800235e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002362:	f003 fcc5 	bl	8005cf0 <BSP_LCD_Clear>

  BSP_LCD_SetBackColor(LCD_COLOR_TRANSPARENT); //ditto
 8002366:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800236a:	f003 fc77 	bl	8005c5c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800236e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002372:	f003 fc5b 	bl	8005c2c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font24);
 8002376:	4827      	ldr	r0, [pc, #156]	; (8002414 <main+0x1b4>)
 8002378:	f003 fc8a 	bl	8005c90 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0,LINE(2) , (uint8_t *)"Running Test Version 1.0", CENTER_MODE);
 800237c:	f003 fca2 	bl	8005cc4 <BSP_LCD_GetFont>
 8002380:	4603      	mov	r3, r0
 8002382:	88db      	ldrh	r3, [r3, #6]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	b299      	uxth	r1, r3
 8002388:	2301      	movs	r3, #1
 800238a:	4a23      	ldr	r2, [pc, #140]	; (8002418 <main+0x1b8>)
 800238c:	2000      	movs	r0, #0
 800238e:	f003 fd1b 	bl	8005dc8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0,LINE(3) , (uint8_t *)"Audio Through with Chorus Touch Effect", CENTER_MODE);
 8002392:	f003 fc97 	bl	8005cc4 <BSP_LCD_GetFont>
 8002396:	4603      	mov	r3, r0
 8002398:	88db      	ldrh	r3, [r3, #6]
 800239a:	461a      	mov	r2, r3
 800239c:	0052      	lsls	r2, r2, #1
 800239e:	4413      	add	r3, r2
 80023a0:	b299      	uxth	r1, r3
 80023a2:	2301      	movs	r3, #1
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <main+0x1bc>)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f003 fd0e 	bl	8005dc8 <BSP_LCD_DisplayStringAt>

  //BSP_LCD_SelectLayer(1); //Makes 1 the active layer for the box drawing..


  //Will need to move to threads...perhaps?
  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80023ac:	f003 fba2 	bl	8005af4 <BSP_LCD_GetXSize>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b29c      	uxth	r4, r3
 80023b4:	f003 fbaa 	bl	8005b0c <BSP_LCD_GetYSize>
 80023b8:	4603      	mov	r3, r0
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	4620      	mov	r0, r4
 80023c0:	f004 ff58 	bl	8007274 <BSP_TS_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <main+0x1c0>)
 80023ca:	601a      	str	r2, [r3, #0]
  //Could do with calibration..


  if(ts_status == TS_OK)
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <main+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <main+0x17a>
  {
	  /* Display touch screen active debug */
      printf("Touch screen is go!\r\n");
 80023d4:	4813      	ldr	r0, [pc, #76]	; (8002424 <main+0x1c4>)
 80023d6:	f010 fb1d 	bl	8012a14 <puts>
  }
  OnError_Handler(ts_status != TS_OK);
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <main+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff29 	bl	8002240 <OnError_Handler>



  // Setup
  AUDIO_SETUP();
 80023ee:	f000 fb3f 	bl	8002a70 <AUDIO_SETUP>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80023f2:	f7ff f91b 	bl	800162c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80023f6:	f00c ff25 	bl	800f244 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <main+0x19a>
 80023fc:	08013780 	.word	0x08013780
 8002400:	080137ac 	.word	0x080137ac
 8002404:	200026f8 	.word	0x200026f8
 8002408:	200026fc 	.word	0x200026fc
 800240c:	c0177000 	.word	0xc0177000
 8002410:	90000000 	.word	0x90000000
 8002414:	20000098 	.word	0x20000098
 8002418:	080137b0 	.word	0x080137b0
 800241c:	080137cc 	.word	0x080137cc
 8002420:	200026f4 	.word	0x200026f4
 8002424:	080137f4 	.word	0x080137f4

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b094      	sub	sp, #80	; 0x50
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	2234      	movs	r2, #52	; 0x34
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f010 faf4 	bl	8012a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <SystemClock_Config+0xd8>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <SystemClock_Config+0xd8>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	; 0x40
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <SystemClock_Config+0xd8>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <SystemClock_Config+0xdc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a26      	ldr	r2, [pc, #152]	; (8002504 <SystemClock_Config+0xdc>)
 800246a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b24      	ldr	r3, [pc, #144]	; (8002504 <SystemClock_Config+0xdc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247c:	2301      	movs	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002484:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002486:	2302      	movs	r3, #2
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800248a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002490:	2319      	movs	r3, #25
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002494:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002498:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800249a:	2302      	movs	r3, #2
 800249c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800249e:	2304      	movs	r3, #4
 80024a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024a2:	2302      	movs	r3, #2
 80024a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4618      	mov	r0, r3
 80024ac:	f009 fda4 	bl	800bff8 <HAL_RCC_OscConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80024b6:	f000 fb4d 	bl	8002b54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024ba:	f009 f87b 	bl	800b5b4 <HAL_PWREx_EnableOverDrive>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80024c4:	f000 fb46 	bl	8002b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c8:	230f      	movs	r3, #15
 80024ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024cc:	2302      	movs	r3, #2
 80024ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	2107      	movs	r1, #7
 80024e6:	4618      	mov	r0, r3
 80024e8:	f00a f834 	bl	800c554 <HAL_RCC_ClockConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80024f2:	f000 fb2f 	bl	8002b54 <Error_Handler>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3750      	adds	r7, #80	; 0x50
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40007000 	.word	0x40007000

08002508 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0a4      	sub	sp, #144	; 0x90
 800250c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800250e:	463b      	mov	r3, r7
 8002510:	2290      	movs	r2, #144	; 0x90
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f010 fa85 	bl	8012a24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1;
 800251a:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 800251e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002520:	23c0      	movs	r3, #192	; 0xc0
 8002522:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002524:	2302      	movs	r3, #2
 8002526:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8002528:	2303      	movs	r3, #3
 800252a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002530:	2301      	movs	r3, #1
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4618      	mov	r0, r3
 8002540:	f00a fa20 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <PeriphCommonClock_Config+0x46>
  {
    Error_Handler();
 800254a:	f000 fb03 	bl	8002b54 <Error_Handler>
  }
}
 800254e:	bf00      	nop
 8002550:	3790      	adds	r7, #144	; 0x90
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <__io_putchar>:
       * @brief  Retargets the C library printf function to the USART.
       * @param  None
       * @retval None
       */
     PUTCHAR_PROTOTYPE
     {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
       /* Place your implementation of fputc here */
       /* e.g. write a character to the USART2 and Loop until the end of transmission */
       HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002560:	1d39      	adds	r1, r7, #4
 8002562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002566:	2201      	movs	r2, #1
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <__io_putchar+0x20>)
 800256a:	f00c f8a1 	bl	800e6b0 <HAL_UART_Transmit>
       //ITM_SendChar (ch);

       return ch;
 800256e:	687b      	ldr	r3, [r7, #4]
     }
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	2000288c 	.word	0x2000288c

0800257c <HAL_DSI_EndOfRefreshCallback>:
     /* ISR Handlers */

     // USE_HAL_DSI_REGISTER_CALLBACKS ??Where is this  defined..

     void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
     {
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
       (void)hdsi;
       if(pend_buffer >= 0)
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db07      	blt.n	800259c <HAL_DSI_EndOfRefreshCallback+0x20>
         //LTDC_LAYER(&hltdc_discovery, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
         //__HAL_LTDC_RELOAD_CONFIG(&hltdc_discovery);
         /* Enable DSI Wrapper */
         //__HAL_DSI_WRAPPER_ENABLE(&hdsi_discovery);

         front_buffer = pend_buffer;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_DSI_EndOfRefreshCallback+0x30>)
 8002592:	6013      	str	r3, [r2, #0]
         pend_buffer = -1;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <HAL_DSI_EndOfRefreshCallback+0x2c>)
 8002596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800259a:	601a      	str	r2, [r3, #0]
       }
     }
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	20000014 	.word	0x20000014
 80025ac:	200006dc 	.word	0x200006dc

080025b0 <HAL_LTDC_ReloadEventCallback>:



     //override of callback
     void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc){
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    	 bufferNumber++;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_LTDC_ReloadEventCallback+0x28>)
 80025ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <HAL_LTDC_ReloadEventCallback+0x28>)
 80025c8:	801a      	strh	r2, [r3, #0]
    	 //Plot here?
    	 //BSP_LCD_FillRect(350, 200, 100, 100);
     }
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20002700 	.word	0x20002700

080025dc <DMA2_Stream4_IRQHandler>:


     void DMA2_Stream4_IRQHandler(void)
     {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
      HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <DMA2_Stream4_IRQHandler+0x14>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4618      	mov	r0, r3
 80025e6:	f005 fb97 	bl	8007d18 <HAL_DMA_IRQHandler>
     }
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200029fc 	.word	0x200029fc

080025f4 <DMA2_Stream1_IRQHandler>:

     void DMA2_Stream1_IRQHandler(void)
     {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
      HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <DMA2_Stream1_IRQHandler+0x14>)
 80025fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fc:	4618      	mov	r0, r3
 80025fe:	f005 fb8b 	bl	8007d18 <HAL_DMA_IRQHandler>
     }
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20002978 	.word	0x20002978

0800260c <BSP_AUDIO_IN_Error_CallBack>:
       * @brief  Audio IN Error callback function.
       * @param  None
       * @retval None
       */
     void BSP_AUDIO_IN_Error_CallBack(void)
     {
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
         /* This function is called when an Interrupt due to transfer error on or peripheral
            error occurs. */
         /* Display message on the LCD screen */
         //BSP_LCD_SetBackColor(LCD_COLOR_RED);
         //BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
    	  printf("BSP_AUDIO_IN_Error_CallBack\r\n");
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <BSP_AUDIO_IN_Error_CallBack+0x1c>)
 8002612:	f010 f9ff 	bl	8012a14 <puts>

         /* Stop the program with an infinite loop */


         while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8002616:	bf00      	nop
 8002618:	2000      	movs	r0, #0
 800261a:	f002 fd5d 	bl	80050d8 <BSP_PB_GetState>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
         {
             return;
 8002622:	bf00      	nop
         }


         /* could also generate a system reset to recover from the error */
         /* .... */
     }
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	08013814 	.word	0x08013814

0800262c <SAIx_In_Init>:
  * @param  pBuffer: Pointer to the buffer
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
     void SAIx_In_Init(uint32_t AudioFreq)
     {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
         /* Initialize SAI1 block A in MASTER TX */
         /* Initialize the haudio_out_sai Instance parameter */
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002634:	4b62      	ldr	r3, [pc, #392]	; (80027c0 <SAIx_In_Init+0x194>)
 8002636:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <SAIx_In_Init+0x198>)
 8002638:	601a      	str	r2, [r3, #0]

         /* Disable SAI peripheral to allow access to SAI internal registers */
         __HAL_SAI_DISABLE(&haudio_out_sai);
 800263a:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <SAIx_In_Init+0x194>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <SAIx_In_Init+0x194>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002648:	601a      	str	r2, [r3, #0]

         /* Configure SAI_Block_x */
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800264a:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <SAIx_In_Init+0x194>)
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002650:	4a5b      	ldr	r2, [pc, #364]	; (80027c0 <SAIx_In_Init+0x194>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	61d3      	str	r3, [r2, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 8002656:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <SAIx_In_Init+0x194>)
 8002658:	2200      	movs	r2, #0
 800265a:	605a      	str	r2, [r3, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800265c:	4b58      	ldr	r3, [pc, #352]	; (80027c0 <SAIx_In_Init+0x194>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002662:	4b57      	ldr	r3, [pc, #348]	; (80027c0 <SAIx_In_Init+0x194>)
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8002668:	4b55      	ldr	r3, [pc, #340]	; (80027c0 <SAIx_In_Init+0x194>)
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <SAIx_In_Init+0x194>)
 8002670:	2200      	movs	r2, #0
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002674:	4b52      	ldr	r3, [pc, #328]	; (80027c0 <SAIx_In_Init+0x194>)
 8002676:	2200      	movs	r2, #0
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <SAIx_In_Init+0x194>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8002680:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <SAIx_In_Init+0x194>)
 8002682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002686:	611a      	str	r2, [r3, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <SAIx_In_Init+0x194>)
 800268a:	2201      	movs	r2, #1
 800268c:	619a      	str	r2, [r3, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <SAIx_In_Init+0x194>)
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <SAIx_In_Init+0x194>)
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <SAIx_In_Init+0x194>)
 800269c:	2200      	movs	r2, #0
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 80026a0:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <SAIx_In_Init+0x194>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]

         /* Configure SAI_Block_x Frame */
         haudio_out_sai.FrameInit.FrameLength       = 64;
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <SAIx_In_Init+0x194>)
 80026a8:	2240      	movs	r2, #64	; 0x40
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <SAIx_In_Init+0x194>)
 80026ae:	2220      	movs	r2, #32
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <SAIx_In_Init+0x194>)
 80026b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026b8:	649a      	str	r2, [r3, #72]	; 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <SAIx_In_Init+0x194>)
 80026bc:	2200      	movs	r2, #0
 80026be:	64da      	str	r2, [r3, #76]	; 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <SAIx_In_Init+0x194>)
 80026c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026c6:	651a      	str	r2, [r3, #80]	; 0x50

         /* Configure SAI Block_x Slot */
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80026c8:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <SAIx_In_Init+0x194>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80026ce:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <SAIx_In_Init+0x194>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	659a      	str	r2, [r3, #88]	; 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <SAIx_In_Init+0x194>)
 80026d6:	2204      	movs	r2, #4
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <SAIx_In_Init+0x194>)
 80026dc:	220f      	movs	r2, #15
 80026de:	661a      	str	r2, [r3, #96]	; 0x60

         HAL_SAI_Init(&haudio_out_sai);
 80026e0:	4837      	ldr	r0, [pc, #220]	; (80027c0 <SAIx_In_Init+0x194>)
 80026e2:	f00b f809 	bl	800d6f8 <HAL_SAI_Init>



         /* Initialize SAI1 block B in SLAVE RX synchronous from SAI1 block A */
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <SAIx_In_Init+0x19c>)
 80026e8:	4a38      	ldr	r2, [pc, #224]	; (80027cc <SAIx_In_Init+0x1a0>)
 80026ea:	601a      	str	r2, [r3, #0]

         /* Disable SAI peripheral to allow access to SAI internal registers */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <SAIx_In_Init+0x19c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <SAIx_In_Init+0x19c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026fa:	601a      	str	r2, [r3, #0]

         /* Configure SAI_Block_x */
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80026fc:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <SAIx_In_Init+0x19c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002702:	4a31      	ldr	r2, [pc, #196]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	61d3      	str	r3, [r2, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <SAIx_In_Init+0x19c>)
 800270a:	2203      	movs	r2, #3
 800270c:	605a      	str	r2, [r3, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800270e:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <SAIx_In_Init+0x19c>)
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	635a      	str	r2, [r3, #52]	; 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002722:	2200      	movs	r2, #0
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002728:	2200      	movs	r2, #0
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 800272c:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <SAIx_In_Init+0x19c>)
 800272e:	2201      	movs	r2, #1
 8002730:	609a      	str	r2, [r3, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <SAIx_In_Init+0x19c>)
 800273a:	2201      	movs	r2, #1
 800273c:	619a      	str	r2, [r3, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <SAIx_In_Init+0x19c>)
 800274c:	2210      	movs	r2, #16
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]

         /* Configure SAI_Block_x Frame */
         haudio_in_sai.FrameInit.FrameLength       = 64;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <SAIx_In_Init+0x19c>)
 800275e:	2220      	movs	r2, #32
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002764:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002768:	649a      	str	r2, [r3, #72]	; 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <SAIx_In_Init+0x19c>)
 800276c:	2200      	movs	r2, #0
 800276e:	64da      	str	r2, [r3, #76]	; 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002772:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002776:	651a      	str	r2, [r3, #80]	; 0x50

         /* Configure SAI Block_x Slot */
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <SAIx_In_Init+0x19c>)
 800277a:	2200      	movs	r2, #0
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002780:	2200      	movs	r2, #0
 8002782:	659a      	str	r2, [r3, #88]	; 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002786:	2204      	movs	r2, #4
 8002788:	65da      	str	r2, [r3, #92]	; 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <SAIx_In_Init+0x19c>)
 800278c:	220f      	movs	r2, #15
 800278e:	661a      	str	r2, [r3, #96]	; 0x60

         HAL_SAI_Init(&haudio_in_sai);
 8002790:	480d      	ldr	r0, [pc, #52]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002792:	f00a ffb1 	bl	800d6f8 <HAL_SAI_Init>

         /* Enable SAI peripheral */
         __HAL_SAI_ENABLE(&haudio_in_sai);
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <SAIx_In_Init+0x19c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <SAIx_In_Init+0x19c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027a4:	601a      	str	r2, [r3, #0]

         /* Enable SAI peripheral to generate MCLK */
         __HAL_SAI_ENABLE(&haudio_out_sai);
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <SAIx_In_Init+0x194>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <SAIx_In_Init+0x194>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027b4:	601a      	str	r2, [r3, #0]
     }
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20002978 	.word	0x20002978
 80027c4:	40015804 	.word	0x40015804
 80027c8:	200029fc 	.word	0x200029fc
 80027cc:	40015824 	.word	0x40015824

080027d0 <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     void SAIx_In_DeInit(void)
     {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <SAIx_In_DeInit+0x30>)
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <SAIx_In_DeInit+0x34>)
 80027d8:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <SAIx_In_DeInit+0x38>)
 80027dc:	4a0b      	ldr	r2, [pc, #44]	; (800280c <SAIx_In_DeInit+0x3c>)
 80027de:	601a      	str	r2, [r3, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <SAIx_In_DeInit+0x30>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SAIx_In_DeInit+0x30>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027ee:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 80027f0:	4803      	ldr	r0, [pc, #12]	; (8002800 <SAIx_In_DeInit+0x30>)
 80027f2:	f00b f8ff 	bl	800d9f4 <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 80027f6:	4804      	ldr	r0, [pc, #16]	; (8002808 <SAIx_In_DeInit+0x38>)
 80027f8:	f00b f8fc 	bl	800d9f4 <HAL_SAI_DeInit>
     }
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200029fc 	.word	0x200029fc
 8002804:	40015824 	.word	0x40015824
 8002808:	20002978 	.word	0x20002978
 800280c:	40015804 	.word	0x40015804

08002810 <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 800281a:	4b50      	ldr	r3, [pc, #320]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a4f      	ldr	r2, [pc, #316]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 8002832:	4b4a      	ldr	r3, [pc, #296]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a49      	ldr	r2, [pc, #292]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800284a:	2308      	movs	r3, #8
 800284c:	61fb      	str	r3, [r7, #28]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	623b      	str	r3, [r7, #32]
         gpio_init_structure.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002856:	2302      	movs	r3, #2
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800285a:	2306      	movs	r3, #6
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800285e:	f107 031c 	add.w	r3, r7, #28
 8002862:	4619      	mov	r1, r3
 8002864:	483e      	ldr	r0, [pc, #248]	; (8002960 <SAI_AUDIO_IN_MspInit+0x150>)
 8002866:	f007 f9c9 	bl	8009bfc <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 800286a:	4b3c      	ldr	r3, [pc, #240]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a3b      	ldr	r2, [pc, #236]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	61fb      	str	r3, [r7, #28]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
         gpio_init_structure.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002890:	2302      	movs	r3, #2
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	4619      	mov	r1, r3
 800289a:	4832      	ldr	r0, [pc, #200]	; (8002964 <SAI_AUDIO_IN_MspInit+0x154>)
 800289c:	f007 f9ae 	bl	8009bfc <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 80028a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028aa:	6313      	str	r3, [r2, #48]	; 0x30
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <SAI_AUDIO_IN_MspInit+0x14c>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

         if (hsai->Instance == AUDIO_IN_SAIx)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <SAI_AUDIO_IN_MspInit+0x158>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d138      	bne.n	8002934 <SAI_AUDIO_IN_MspInit+0x124>
         {
             /* Configure the hdma_sai_rx handle parameters */
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80028c2:	4b2a      	ldr	r3, [pc, #168]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c8:	605a      	str	r2, [r3, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80028d6:	4b25      	ldr	r3, [pc, #148]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028dc:	611a      	str	r2, [r3, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e4:	615a      	str	r2, [r3, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ec:	619a      	str	r2, [r3, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80028ee:	4b1f      	ldr	r3, [pc, #124]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f4:	61da      	str	r2, [r3, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 80028f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028fc:	621a      	str	r2, [r3, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002900:	2200      	movs	r2, #0
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002906:	2203      	movs	r2, #3
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 800290c:	2200      	movs	r2, #0
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30

             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <SAI_AUDIO_IN_MspInit+0x160>)
 800291a:	601a      	str	r2, [r3, #0]

             /* Associate the DMA handle */
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002920:	671a      	str	r2, [r3, #112]	; 0x70
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6393      	str	r3, [r2, #56]	; 0x38

             /* Deinitialize the Stream for new transfer */
             HAL_DMA_DeInit(&hdma_sai_rx);
 8002928:	4810      	ldr	r0, [pc, #64]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 800292a:	f005 f937 	bl	8007b9c <HAL_DMA_DeInit>

             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
 800292e:	480f      	ldr	r0, [pc, #60]	; (800296c <SAI_AUDIO_IN_MspInit+0x15c>)
 8002930:	f005 f886 	bl	8007a40 <HAL_DMA_Init>
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	210f      	movs	r1, #15
 8002938:	203c      	movs	r0, #60	; 0x3c
 800293a:	f004 ff3d 	bl	80077b8 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800293e:	203c      	movs	r0, #60	; 0x3c
 8002940:	f004 ff56 	bl	80077f0 <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	210f      	movs	r1, #15
 8002948:	2028      	movs	r0, #40	; 0x28
 800294a:	f004 ff35 	bl	80077b8 <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800294e:	2028      	movs	r0, #40	; 0x28
 8002950:	f004 ff4e 	bl	80077f0 <HAL_NVIC_EnableIRQ>
     }
 8002954:	bf00      	nop
 8002956:	3730      	adds	r7, #48	; 0x30
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	40021000 	.word	0x40021000
 8002964:	40022400 	.word	0x40022400
 8002968:	40015824 	.word	0x40015824
 800296c:	20002708 	.word	0x20002708
 8002970:	40026470 	.word	0x40026470

08002974 <BSP_AUDIO_IN_OUT_Init>:



     uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
         uint8_t ret = AUDIO_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]

         /* Disable SAI */
         SAIx_In_DeInit();
 8002980:	f7ff ff26 	bl	80027d0 <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8002984:	2200      	movs	r2, #0
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	481f      	ldr	r0, [pc, #124]	; (8002a08 <BSP_AUDIO_IN_OUT_Init+0x94>)
 800298a:	f002 fed7 	bl	800573c <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <BSP_AUDIO_IN_OUT_Init+0x98>)
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <BSP_AUDIO_IN_OUT_Init+0x9c>)
 8002992:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <BSP_AUDIO_IN_OUT_Init+0x94>)
 8002996:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <BSP_AUDIO_IN_OUT_Init+0xa0>)
 8002998:	601a      	str	r2, [r3, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800299a:	481b      	ldr	r0, [pc, #108]	; (8002a08 <BSP_AUDIO_IN_OUT_Init+0x94>)
 800299c:	f00b f99e 	bl	800dcdc <HAL_SAI_GetState>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <BSP_AUDIO_IN_OUT_Init+0x42>
         {
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80029a6:	2100      	movs	r1, #0
 80029a8:	4818      	ldr	r0, [pc, #96]	; (8002a0c <BSP_AUDIO_IN_OUT_Init+0x98>)
 80029aa:	f002 fe25 	bl	80055f8 <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80029ae:	2100      	movs	r1, #0
 80029b0:	4815      	ldr	r0, [pc, #84]	; (8002a08 <BSP_AUDIO_IN_OUT_Init+0x94>)
 80029b2:	f7ff ff2d 	bl	8002810 <SAI_AUDIO_IN_MspInit>
         }


         SAIx_In_Init(AudioFreq);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fe38 	bl	800262c <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2034      	movs	r0, #52	; 0x34
 80029c2:	4798      	blx	r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	f648 1294 	movw	r2, #35220	; 0x8994
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d109      	bne.n	80029e2 <BSP_AUDIO_IN_OUT_Init+0x6e>
         {
             /* Reset the Codec Registers */
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	2034      	movs	r0, #52	; 0x34
 80029d4:	4798      	blx	r3
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <BSP_AUDIO_IN_OUT_Init+0xa8>)
 80029d8:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 80029da:	601a      	str	r2, [r3, #0]
             ret = AUDIO_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e001      	b.n	80029e6 <BSP_AUDIO_IN_OUT_Init+0x72>
         } else {
             ret = AUDIO_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
         }

         if (ret == AUDIO_OK)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d108      	bne.n	80029fe <BSP_AUDIO_IN_OUT_Init+0x8a>
         {
             /* Initialize the codec internal registers */
        	 //INPUT_DEVICE_ANALOG_MIC is the LINE IN input
        	 //100 is MAX volume on the CODEC
        	 audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 65, AudioFreq);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <BSP_AUDIO_IN_OUT_Init+0xa8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681c      	ldr	r4, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2241      	movs	r2, #65	; 0x41
 80029f6:	f240 3102 	movw	r1, #770	; 0x302
 80029fa:	2034      	movs	r0, #52	; 0x34
 80029fc:	47a0      	blx	r4
             //audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
     }
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	200029fc 	.word	0x200029fc
 8002a0c:	20002978 	.word	0x20002978
 8002a10:	40015804 	.word	0x40015804
 8002a14:	40015824 	.word	0x40015824
 8002a18:	20000054 	.word	0x20000054
 8002a1c:	200026e4 	.word	0x200026e4

08002a20 <_BSP_AUDIO_OUT_Play>:


      uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
         /* Call the audio Codec Play function */
    	 //This using the correct  size SF
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <_BSP_AUDIO_OUT_Play+0x48>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b292      	uxth	r2, r2
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	2034      	movs	r0, #52	; 0x34
 8002a38:	4798      	blx	r3
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <_BSP_AUDIO_OUT_Play+0x24>
         {
             return AUDIO_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e00c      	b.n	8002a5e <_BSP_AUDIO_OUT_Play+0x3e>

        	 //Buffer gets cast to a BYTE pointer, so this only transmits half the buffer
        	 //contents, i.e double buffer.


        	 if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4807      	ldr	r0, [pc, #28]	; (8002a6c <_BSP_AUDIO_OUT_Play+0x4c>)
 8002a4e:	f00b f807 	bl	800da60 <HAL_SAI_Transmit_DMA>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <_BSP_AUDIO_OUT_Play+0x3c>
                 return AUDIO_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <_BSP_AUDIO_OUT_Play+0x3e>
             return AUDIO_OK;
 8002a5c:	2300      	movs	r3, #0
         }
     }
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200026e4 	.word	0x200026e4
 8002a6c:	20002978 	.word	0x20002978

08002a70 <AUDIO_SETUP>:

      void AUDIO_SETUP(void)
           {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
    	       //This will all kick off the SAI and configure the CODEC.
    	       //Call back interrupts, handled in main.c will then communicate with the
    	       //audio listene task

               //Change Sampling rate here...
               if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_48K) == AUDIO_OK)
 8002a76:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8002a7a:	f7ff ff7b 	bl	8002974 <BSP_AUDIO_IN_OUT_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <AUDIO_SETUP+0x1c>
               {
              	 printf("Audio I/O initialization OK\r\n");
 8002a84:	481e      	ldr	r0, [pc, #120]	; (8002b00 <AUDIO_SETUP+0x90>)
 8002a86:	f00f ffc5 	bl	8012a14 <puts>
 8002a8a:	e004      	b.n	8002a96 <AUDIO_SETUP+0x26>
               } else {
              	 printf("Audio I/O initialization failed.\r\n");
 8002a8c:	481d      	ldr	r0, [pc, #116]	; (8002b04 <AUDIO_SETUP+0x94>)
 8002a8e:	f00f ffc1 	bl	8012a14 <puts>
              	 Error_Handler();
 8002a92:	f000 f85f 	bl	8002b54 <Error_Handler>
               // Start Receiving audio into Record Buffer..
               // Audio Buffer is  defined as int16,
               // so this transfer will only begin to receive into half the buffer. Double buff
               //Not  the record buffer size is cast to uint8, so effectively this halfs the
               //bytes that re transferred per block
               HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)RecordBuffer, RECORD_BUFFER_SIZE);
 8002a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9a:	491b      	ldr	r1, [pc, #108]	; (8002b08 <AUDIO_SETUP+0x98>)
 8002a9c:	481b      	ldr	r0, [pc, #108]	; (8002b0c <AUDIO_SETUP+0x9c>)
 8002a9e:	f00b f88f 	bl	800dbc0 <HAL_SAI_Receive_DMA>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
               if (HAL_OK == res)
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <AUDIO_SETUP+0x44>
               {
              	 printf("SAI receive begin OK\r\n");
 8002aac:	4818      	ldr	r0, [pc, #96]	; (8002b10 <AUDIO_SETUP+0xa0>)
 8002aae:	f00f ffb1 	bl	8012a14 <puts>
 8002ab2:	e006      	b.n	8002ac2 <AUDIO_SETUP+0x52>
               } else {
                   printf("SAI receive error: %d\r\n", res);
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4816      	ldr	r0, [pc, #88]	; (8002b14 <AUDIO_SETUP+0xa4>)
 8002aba:	f00f ff45 	bl	8012948 <iprintf>
                   Error_Handler();
 8002abe:	f000 f849 	bl	8002b54 <Error_Handler>
               }

               printf("Begin Playback buffer\r\n");
 8002ac2:	4815      	ldr	r0, [pc, #84]	; (8002b18 <AUDIO_SETUP+0xa8>)
 8002ac4:	f00f ffa6 	bl	8012a14 <puts>

               /* Play the recorded buffer */
               if (_BSP_AUDIO_OUT_Play((uint16_t *) &PlaybackBuffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 8002ac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002acc:	4813      	ldr	r0, [pc, #76]	; (8002b1c <AUDIO_SETUP+0xac>)
 8002ace:	f7ff ffa7 	bl	8002a20 <_BSP_AUDIO_OUT_Play>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d103      	bne.n	8002ae0 <AUDIO_SETUP+0x70>
               {
              	 printf("Audio output OK\r\n");
 8002ad8:	4811      	ldr	r0, [pc, #68]	; (8002b20 <AUDIO_SETUP+0xb0>)
 8002ada:	f00f ff9b 	bl	8012a14 <puts>
 8002ade:	e004      	b.n	8002aea <AUDIO_SETUP+0x7a>
               } else {
              	 printf("Audio output error\r\n");
 8002ae0:	4810      	ldr	r0, [pc, #64]	; (8002b24 <AUDIO_SETUP+0xb4>)
 8002ae2:	f00f ff97 	bl	8012a14 <puts>
              	 Error_Handler();
 8002ae6:	f000 f835 	bl	8002b54 <Error_Handler>
           	 }
               printf("\r\n");
 8002aea:	480f      	ldr	r0, [pc, #60]	; (8002b28 <AUDIO_SETUP+0xb8>)
 8002aec:	f00f ff92 	bl	8012a14 <puts>

               audio_rec_buffer_state = BUFFER_OFFSET_NONE; //trap for kickoff
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <AUDIO_SETUP+0xbc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]


      } // end AUDIO_SETUP function
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	08013834 	.word	0x08013834
 8002b04:	08013854 	.word	0x08013854
 8002b08:	200006e0 	.word	0x200006e0
 8002b0c:	200029fc 	.word	0x200029fc
 8002b10:	08013878 	.word	0x08013878
 8002b14:	08013890 	.word	0x08013890
 8002b18:	080138a8 	.word	0x080138a8
 8002b1c:	200016e0 	.word	0x200016e0
 8002b20:	080138c0 	.word	0x080138c0
 8002b24:	080138d4 	.word	0x080138d4
 8002b28:	080137ac 	.word	0x080137ac
 8002b2c:	200026e0 	.word	0x200026e0

08002b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b42:	f004 fd19 	bl	8007578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40001000 	.word	0x40001000

08002b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b58:	b672      	cpsid	i
}
 8002b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  BSP_LED_Toggle(LED_RED);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f002 faa1 	bl	80050a4 <BSP_LED_Toggle>
	  HAL_Delay(1000);
 8002b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b66:	f004 fd27 	bl	80075b8 <HAL_Delay>
	  BSP_LED_Toggle(LED_RED);
 8002b6a:	e7f7      	b.n	8002b5c <Error_Handler+0x8>

08002b6c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <MX_QUADSPI_Init+0x54>)
 8002b74:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b7e:	2210      	movs	r2, #16
 8002b80:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_QUADSPI_Init+0x50>)
 8002ba8:	f008 fd54 	bl	800b654 <HAL_QSPI_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002bb2:	f7ff ffcf 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20002768 	.word	0x20002768
 8002bc0:	a0001000 	.word	0xa0001000

08002bc4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	; 0x30
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <HAL_QSPI_MspInit+0x148>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	f040 808e 	bne.w	8002d04 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002be8:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	6393      	str	r3, [r2, #56]	; 0x38
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c00:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a42      	ldr	r2, [pc, #264]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c18:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4a3c      	ldr	r2, [pc, #240]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	6313      	str	r3, [r2, #48]	; 0x30
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_QSPI_MspInit+0x14c>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c60:	2304      	movs	r3, #4
 8002c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c70:	2309      	movs	r3, #9
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4826      	ldr	r0, [pc, #152]	; (8002d14 <HAL_QSPI_MspInit+0x150>)
 8002c7c:	f006 ffbe 	bl	8009bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c90:	230a      	movs	r3, #10
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	481f      	ldr	r0, [pc, #124]	; (8002d18 <HAL_QSPI_MspInit+0x154>)
 8002c9c:	f006 ffae 	bl	8009bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8002ca0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cb2:	2309      	movs	r3, #9
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	f107 031c 	add.w	r3, r7, #28
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4817      	ldr	r0, [pc, #92]	; (8002d1c <HAL_QSPI_MspInit+0x158>)
 8002cbe:	f006 ff9d 	bl	8009bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cd2:	2309      	movs	r3, #9
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 031c 	add.w	r3, r7, #28
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480e      	ldr	r0, [pc, #56]	; (8002d18 <HAL_QSPI_MspInit+0x154>)
 8002cde:	f006 ff8d 	bl	8009bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8002ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cf4:	2309      	movs	r3, #9
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002cf8:	f107 031c 	add.w	r3, r7, #28
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4808      	ldr	r0, [pc, #32]	; (8002d20 <HAL_QSPI_MspInit+0x15c>)
 8002d00:	f006 ff7c 	bl	8009bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002d04:	bf00      	nop
 8002d06:	3730      	adds	r7, #48	; 0x30
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	a0001000 	.word	0xa0001000
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	40020c00 	.word	0x40020c00

08002d24 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <HAL_QSPI_MspDeInit+0x4c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d117      	bne.n	8002d66 <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_QSPI_MspDeInit+0x50>)
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_QSPI_MspDeInit+0x50>)
 8002d3c:	f023 0302 	bic.w	r3, r3, #2
 8002d40:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 8002d42:	2104      	movs	r1, #4
 8002d44:	480c      	ldr	r0, [pc, #48]	; (8002d78 <HAL_QSPI_MspDeInit+0x54>)
 8002d46:	f007 f905 	bl	8009f54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 8002d4a:	2144      	movs	r1, #68	; 0x44
 8002d4c:	480b      	ldr	r0, [pc, #44]	; (8002d7c <HAL_QSPI_MspDeInit+0x58>)
 8002d4e:	f007 f901 	bl	8009f54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, QSPI_D1_Pin|QSPI_D0_Pin);
 8002d52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d56:	480a      	ldr	r0, [pc, #40]	; (8002d80 <HAL_QSPI_MspDeInit+0x5c>)
 8002d58:	f007 f8fc 	bl	8009f54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_D3_GPIO_Port, QSPI_D3_Pin);
 8002d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d60:	4808      	ldr	r0, [pc, #32]	; (8002d84 <HAL_QSPI_MspDeInit+0x60>)
 8002d62:	f007 f8f7 	bl	8009f54 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	a0001000 	.word	0xa0001000
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020c00 	.word	0x40020c00

08002d88 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002d8e:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <MX_SAI1_Init+0xac>)
 8002d90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002db0:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dca:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <MX_SAI1_Init+0xb0>)
 8002dcc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002de8:	2208      	movs	r2, #8
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <MX_SAI1_Init+0xa8>)
 8002e1e:	f00a fc6b 	bl	800d6f8 <HAL_SAI_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8002e28:	f7ff fe94 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200027b4 	.word	0x200027b4
 8002e34:	40015804 	.word	0x40015804
 8002e38:	0002ee00 	.word	0x0002ee00

08002e3c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_SAI_MspInit+0x84>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d134      	bne.n	8002eb8 <HAL_SAI_MspInit+0x7c>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_SAI_MspInit+0x88>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_SAI_MspInit+0x8c>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_SAI_MspInit+0x8c>)
 8002e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_SAI_MspInit+0x8c>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_SAI_MspInit+0x88>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <HAL_SAI_MspInit+0x88>)
 8002e76:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8002e78:	2378      	movs	r3, #120	; 0x78
 8002e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002e88:	2306      	movs	r3, #6
 8002e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	4619      	mov	r1, r3
 8002e92:	480e      	ldr	r0, [pc, #56]	; (8002ecc <HAL_SAI_MspInit+0x90>)
 8002e94:	f006 feb2 	bl	8009bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ea8:	2306      	movs	r3, #6
 8002eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <HAL_SAI_MspInit+0x94>)
 8002eb4:	f006 fea2 	bl	8009bfc <HAL_GPIO_Init>

    }
}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40015804 	.word	0x40015804
 8002ec4:	20002838 	.word	0x20002838
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021800 	.word	0x40021800

08002ed4 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <HAL_SAI_MspDeInit+0x48>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d116      	bne.n	8002f14 <HAL_SAI_MspDeInit+0x40>
    {
    SAI1_client --;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_SAI_MspDeInit+0x4c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <HAL_SAI_MspDeInit+0x4c>)
 8002eee:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_SAI_MspDeInit+0x4c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_SAI_MspDeInit+0x50>)
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_SAI_MspDeInit+0x50>)
 8002efe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f02:	6453      	str	r3, [r2, #68]	; 0x44
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    HAL_GPIO_DeInit(GPIOE, SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin);
 8002f04:	2178      	movs	r1, #120	; 0x78
 8002f06:	4808      	ldr	r0, [pc, #32]	; (8002f28 <HAL_SAI_MspDeInit+0x54>)
 8002f08:	f007 f824 	bl	8009f54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SAI1_MCLKA_GPIO_Port, SAI1_MCLKA_Pin);
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	4807      	ldr	r0, [pc, #28]	; (8002f2c <HAL_SAI_MspDeInit+0x58>)
 8002f10:	f007 f820 	bl	8009f54 <HAL_GPIO_DeInit>

    }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40015804 	.word	0x40015804
 8002f20:	20002838 	.word	0x20002838
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40021800 	.word	0x40021800

08002f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_MspInit+0x5c>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <HAL_MspInit+0x5c>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_MspInit+0x5c>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_MspInit+0x5c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <HAL_MspInit+0x5c>)
 8002f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f58:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <HAL_MspInit+0x5c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	210f      	movs	r1, #15
 8002f6a:	f06f 0001 	mvn.w	r0, #1
 8002f6e:	f004 fc23 	bl	80077b8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2105      	movs	r1, #5
 8002f76:	2005      	movs	r0, #5
 8002f78:	f004 fc1e 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002f7c:	2005      	movs	r0, #5
 8002f7e:	f004 fc37 	bl	80077f0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08e      	sub	sp, #56	; 0x38
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <HAL_InitTick+0xe0>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	4a32      	ldr	r2, [pc, #200]	; (8003070 <HAL_InitTick+0xe0>)
 8002fa6:	f043 0310 	orr.w	r3, r3, #16
 8002faa:	6413      	str	r3, [r2, #64]	; 0x40
 8002fac:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_InitTick+0xe0>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fb8:	f107 0210 	add.w	r2, r7, #16
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f009 fcac 	bl	800c920 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fd2:	f009 fc7d 	bl	800c8d0 <HAL_RCC_GetPCLK1Freq>
 8002fd6:	6378      	str	r0, [r7, #52]	; 0x34
 8002fd8:	e004      	b.n	8002fe4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fda:	f009 fc79 	bl	800c8d0 <HAL_RCC_GetPCLK1Freq>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_InitTick+0xe4>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	0c9b      	lsrs	r3, r3, #18
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ff2:	4b21      	ldr	r3, [pc, #132]	; (8003078 <HAL_InitTick+0xe8>)
 8002ff4:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_InitTick+0xec>)
 8002ff6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <HAL_InitTick+0xe8>)
 8002ffa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ffe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003000:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_InitTick+0xe8>)
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003006:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <HAL_InitTick+0xe8>)
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_InitTick+0xe8>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_InitTick+0xe8>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003018:	4817      	ldr	r0, [pc, #92]	; (8003078 <HAL_InitTick+0xe8>)
 800301a:	f00b f81b 	bl	800e054 <HAL_TIM_Base_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11b      	bne.n	8003064 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800302c:	4812      	ldr	r0, [pc, #72]	; (8003078 <HAL_InitTick+0xe8>)
 800302e:	f00b f873 	bl	800e118 <HAL_TIM_Base_Start_IT>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003038:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003040:	2036      	movs	r0, #54	; 0x36
 8003042:	f004 fbd5 	bl	80077f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b0f      	cmp	r3, #15
 800304a:	d808      	bhi.n	800305e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800304c:	2200      	movs	r2, #0
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	2036      	movs	r0, #54	; 0x36
 8003052:	f004 fbb1 	bl	80077b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_InitTick+0xf0>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e002      	b.n	8003064 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003064:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003068:	4618      	mov	r0, r3
 800306a:	3738      	adds	r7, #56	; 0x38
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	431bde83 	.word	0x431bde83
 8003078:	2000283c 	.word	0x2000283c
 800307c:	40001000 	.word	0x40001000
 8003080:	200000ac 	.word	0x200000ac

08003084 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <TIM6_DAC_IRQHandler+0x10>)
 800309a:	f00b f8b5 	bl	800e208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	2000283c 	.word	0x2000283c

080030a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <LTDC_IRQHandler+0x10>)
 80030ae:	f007 ff23 	bl	800aef8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000634 	.word	0x20000634

080030bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <DMA2D_IRQHandler+0x10>)
 80030c2:	f005 fa01 	bl	80084c8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200002d8 	.word	0x200002d8

080030d0 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <DSI_IRQHandler+0x10>)
 80030d6:	f005 fed5 	bl	8008e84 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000330 	.word	0x20000330

080030e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return 1;
 80030e8:	2301      	movs	r3, #1
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_kill>:

int _kill(int pid, int sig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030fe:	f00f fd43 	bl	8012b88 <__errno>
 8003102:	4603      	mov	r3, r0
 8003104:	2216      	movs	r2, #22
 8003106:	601a      	str	r2, [r3, #0]
  return -1;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <_exit>:

void _exit (int status)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800311c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ffe7 	bl	80030f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003126:	e7fe      	b.n	8003126 <_exit+0x12>

08003128 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00a      	b.n	8003150 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800313a:	f3af 8000 	nop.w
 800313e:	4601      	mov	r1, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	60ba      	str	r2, [r7, #8]
 8003146:	b2ca      	uxtb	r2, r1
 8003148:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	dbf0      	blt.n	800313a <_read+0x12>
  }

  return len;
 8003158:	687b      	ldr	r3, [r7, #4]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e009      	b.n	8003188 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	60ba      	str	r2, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f9eb 	bl	8002558 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbf1      	blt.n	8003174 <_write+0x12>
  }
  return len;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_close>:

int _close(int file)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c2:	605a      	str	r2, [r3, #4]
  return 0;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <_isatty>:

int _isatty(int file)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031da:	2301      	movs	r3, #1
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <_sbrk+0x5c>)
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <_sbrk+0x60>)
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <_sbrk+0x64>)
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <_sbrk+0x68>)
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d207      	bcs.n	8003244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003234:	f00f fca8 	bl	8012b88 <__errno>
 8003238:	4603      	mov	r3, r0
 800323a:	220c      	movs	r2, #12
 800323c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003242:	e009      	b.n	8003258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	4a05      	ldr	r2, [pc, #20]	; (8003268 <_sbrk+0x64>)
 8003254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20080000 	.word	0x20080000
 8003264:	00000400 	.word	0x00000400
 8003268:	20002888 	.word	0x20002888
 800326c:	20006d00 	.word	0x20006d00

08003270 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <SystemInit+0x20>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <SystemInit+0x20>)
 800327c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <MX_USART1_UART_Init+0x58>)
 800329a:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <MX_USART1_UART_Init+0x5c>)
 800329c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032ba:	220c      	movs	r2, #12
 80032bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032d6:	4805      	ldr	r0, [pc, #20]	; (80032ec <MX_USART1_UART_Init+0x58>)
 80032d8:	f00b f99c 	bl	800e614 <HAL_UART_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80032e2:	f7ff fc37 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000288c 	.word	0x2000288c
 80032f0:	40011000 	.word	0x40011000

080032f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b0ae      	sub	sp, #184	; 0xb8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2290      	movs	r2, #144	; 0x90
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f00f fb85 	bl	8012a24 <memset>
  if(uartHandle->Instance==USART1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <HAL_UART_MspInit+0xdc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d151      	bne.n	80033c8 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003324:	2340      	movs	r3, #64	; 0x40
 8003326:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003328:	2300      	movs	r3, #0
 800332a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4618      	mov	r0, r3
 8003332:	f009 fb27 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800333c:	f7ff fc0a 	bl	8002b54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_UART_MspInit+0xe0>)
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_UART_MspInit+0xe0>)
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6453      	str	r3, [r2, #68]	; 0x44
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_UART_MspInit+0xe0>)
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_UART_MspInit+0xe0>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_UART_MspInit+0xe0>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_UART_MspInit+0xe0>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800338a:	2307      	movs	r3, #7
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003390:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003394:	4619      	mov	r1, r3
 8003396:	4810      	ldr	r0, [pc, #64]	; (80033d8 <HAL_UART_MspInit+0xe4>)
 8003398:	f006 fc30 	bl	8009bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800339c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033b6:	2307      	movs	r3, #7
 80033b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033c0:	4619      	mov	r1, r3
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <HAL_UART_MspInit+0xe4>)
 80033c4:	f006 fc1a 	bl	8009bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80033c8:	bf00      	nop
 80033ca:	37b8      	adds	r7, #184	; 0xb8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000

080033dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033e2:	490e      	ldr	r1, [pc, #56]	; (800341c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e8:	e002      	b.n	80033f0 <LoopCopyDataInit>

080033ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ee:	3304      	adds	r3, #4

080033f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f4:	d3f9      	bcc.n	80033ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f6:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033f8:	4c0b      	ldr	r4, [pc, #44]	; (8003428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033fc:	e001      	b.n	8003402 <LoopFillZerobss>

080033fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003400:	3204      	adds	r2, #4

08003402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003404:	d3fb      	bcc.n	80033fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003406:	f7ff ff33 	bl	8003270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800340a:	f00f fbc3 	bl	8012b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800340e:	f7fe ff27 	bl	8002260 <main>
  bx  lr    
 8003412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003414:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800341c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8003420:	08015634 	.word	0x08015634
  ldr r2, =_sbss
 8003424:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8003428:	20006cfc 	.word	0x20006cfc

0800342c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800342c:	e7fe      	b.n	800342c <ADC_IRQHandler>
	...

08003430 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f90d 	bl	800365c <ft6x06_GetInstance>
 8003442:	4603      	mov	r3, r0
 8003444:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2bff      	cmp	r3, #255	; 0xff
 800344a:	d10e      	bne.n	800346a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800344c:	2000      	movs	r0, #0
 800344e:	f000 f905 	bl	800365c <ft6x06_GetInstance>
 8003452:	4603      	mov	r3, r0
 8003454:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8003456:	7bbb      	ldrb	r3, [r7, #14]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d806      	bhi.n	800346a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	b2d1      	uxtb	r1, r2
 8003462:	4a04      	ldr	r2, [pc, #16]	; (8003474 <ft6x06_Init+0x44>)
 8003464:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8003466:	f002 f825 	bl	80054b4 <TS_IO_Init>
    }
  }
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20002914 	.word	0x20002914

08003478 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8003498:	f002 f80c 	bl	80054b4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	21a8      	movs	r1, #168	; 0xa8
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 f82a 	bl	80054fc <TS_IO_Read>
 80034a8:	4603      	mov	r3, r0
 80034aa:	b29b      	uxth	r3, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f8bc 	bl	800363e <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f88d 	bl	80035e8 <ft6x06_TS_DisableIT>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f002 f805 	bl	80054fc <TS_IO_Read>
 80034f2:	4603      	mov	r3, r0
 80034f4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <ft6x06_TS_DetectTouch+0x50>)
 8003514:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <ft6x06_TS_DetectTouch+0x50>)
 8003518:	2200      	movs	r2, #0
 800351a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	b2db      	uxtb	r3, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20002918 	.word	0x20002918

0800352c <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800353e:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <ft6x06_TS_GetXY+0x90>)
 8003540:	789a      	ldrb	r2, [r3, #2]
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <ft6x06_TS_GetXY+0x90>)
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	429a      	cmp	r2, r3
 8003548:	d234      	bcs.n	80035b4 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <ft6x06_TS_GetXY+0x90>)
 800354c:	789b      	ldrb	r3, [r3, #2]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <ft6x06_TS_GetXY+0x2c>
 8003552:	2b01      	cmp	r3, #1
 8003554:	d003      	beq.n	800355e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8003556:	e005      	b.n	8003564 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8003558:	2303      	movs	r3, #3
 800355a:	75fb      	strb	r3, [r7, #23]
      break;
 800355c:	e002      	b.n	8003564 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800355e:	2309      	movs	r3, #9
 8003560:	75fb      	strb	r3, [r7, #23]
      break;
 8003562:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8003564:	89fb      	ldrh	r3, [r7, #14]
 8003566:	b2d8      	uxtb	r0, r3
 8003568:	f107 0210 	add.w	r2, r7, #16
 800356c:	7df9      	ldrb	r1, [r7, #23]
 800356e:	2304      	movs	r3, #4
 8003570:	f001 ffe2 	bl	8005538 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8003574:	7c3b      	ldrb	r3, [r7, #16]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	b21b      	sxth	r3, r3
 800357a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800357e:	b21a      	sxth	r2, r3
 8003580:	7c7b      	ldrb	r3, [r7, #17]
 8003582:	b21b      	sxth	r3, r3
 8003584:	4313      	orrs	r3, r2
 8003586:	b21b      	sxth	r3, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800358e:	7cbb      	ldrb	r3, [r7, #18]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	b21b      	sxth	r3, r3
 8003594:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003598:	b21a      	sxth	r2, r3
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	b21b      	sxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <ft6x06_TS_GetXY+0x90>)
 80035aa:	789b      	ldrb	r3, [r3, #2]
 80035ac:	3301      	adds	r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	4b02      	ldr	r3, [pc, #8]	; (80035bc <ft6x06_TS_GetXY+0x90>)
 80035b2:	709a      	strb	r2, [r3, #2]
  }
}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20002918 	.word	0x20002918

080035c0 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	21a4      	movs	r1, #164	; 0xa4
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 ff74 	bl	80054c8 <TS_IO_Write>
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	21a4      	movs	r1, #164	; 0xa4
 8003602:	4618      	mov	r0, r3
 8003604:	f001 ff60 	bl	80054c8 <TS_IO_Write>
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e00b      	b.n	8003688 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <ft6x06_GetInstance+0x40>)
 8003674:	5cd3      	ldrb	r3, [r2, r3]
 8003676:	b29b      	uxth	r3, r3
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	429a      	cmp	r2, r3
 800367c:	d101      	bne.n	8003682 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	e006      	b.n	8003690 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3301      	adds	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d9f0      	bls.n	8003670 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800368e:	23ff      	movs	r3, #255	; 0xff
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	20002914 	.word	0x20002914

080036a0 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b0b2      	sub	sp, #200	; 0xc8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 80036aa:	2078      	movs	r0, #120	; 0x78
 80036ac:	f001 ff62 	bl	8005574 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80036b0:	4ac8      	ldr	r2, [pc, #800]	; (80039d4 <NT35510_Init+0x334>)
 80036b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036ba:	6018      	str	r0, [r3, #0]
 80036bc:	3304      	adds	r3, #4
 80036be:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 80036c0:	4bc5      	ldr	r3, [pc, #788]	; (80039d8 <NT35510_Init+0x338>)
 80036c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 80036c6:	4bc5      	ldr	r3, [pc, #788]	; (80039dc <NT35510_Init+0x33c>)
 80036c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 80036cc:	4bc4      	ldr	r3, [pc, #784]	; (80039e0 <NT35510_Init+0x340>)
 80036ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 80036d2:	4bc4      	ldr	r3, [pc, #784]	; (80039e4 <NT35510_Init+0x344>)
 80036d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 80036d8:	4bc3      	ldr	r3, [pc, #780]	; (80039e8 <NT35510_Init+0x348>)
 80036da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 80036de:	4bc3      	ldr	r3, [pc, #780]	; (80039ec <NT35510_Init+0x34c>)
 80036e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 80036e4:	f240 13bf 	movw	r3, #447	; 0x1bf
 80036e8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 80036ec:	4bc0      	ldr	r3, [pc, #768]	; (80039f0 <NT35510_Init+0x350>)
 80036ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 80036f2:	4bc0      	ldr	r3, [pc, #768]	; (80039f4 <NT35510_Init+0x354>)
 80036f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 80036f8:	4bbf      	ldr	r3, [pc, #764]	; (80039f8 <NT35510_Init+0x358>)
 80036fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 80036fe:	4bbf      	ldr	r3, [pc, #764]	; (80039fc <NT35510_Init+0x35c>)
 8003700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8003704:	4bbe      	ldr	r3, [pc, #760]	; (8003a00 <NT35510_Init+0x360>)
 8003706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800370a:	4bbe      	ldr	r3, [pc, #760]	; (8003a04 <NT35510_Init+0x364>)
 800370c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8003710:	4abd      	ldr	r2, [pc, #756]	; (8003a08 <NT35510_Init+0x368>)
 8003712:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	4611      	mov	r1, r2
 800371a:	8019      	strh	r1, [r3, #0]
 800371c:	3302      	adds	r3, #2
 800371e:	0c12      	lsrs	r2, r2, #16
 8003720:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8003722:	4aba      	ldr	r2, [pc, #744]	; (8003a0c <NT35510_Init+0x36c>)
 8003724:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800372c:	6018      	str	r0, [r3, #0]
 800372e:	3304      	adds	r3, #4
 8003730:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8003732:	4ab7      	ldr	r2, [pc, #732]	; (8003a10 <NT35510_Init+0x370>)
 8003734:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	4611      	mov	r1, r2
 800373c:	8019      	strh	r1, [r3, #0]
 800373e:	3302      	adds	r3, #2
 8003740:	0c12      	lsrs	r2, r2, #16
 8003742:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8003744:	f240 33b6 	movw	r3, #950	; 0x3b6
 8003748:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 800374c:	f245 13b5 	movw	r3, #20917	; 0x51b5
 8003750:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8003754:	4aaf      	ldr	r2, [pc, #700]	; (8003a14 <NT35510_Init+0x374>)
 8003756:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	4611      	mov	r1, r2
 800375e:	8019      	strh	r1, [r3, #0]
 8003760:	3302      	adds	r3, #2
 8003762:	0c12      	lsrs	r2, r2, #16
 8003764:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8003766:	4aac      	ldr	r2, [pc, #688]	; (8003a18 <NT35510_Init+0x378>)
 8003768:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800376c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003770:	6018      	str	r0, [r3, #0]
 8003772:	3304      	adds	r3, #4
 8003774:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8003776:	f04f 433c 	mov.w	r3, #3154116608	; 0xbc000000
 800377a:	667b      	str	r3, [r7, #100]	; 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 800377c:	4ba7      	ldr	r3, [pc, #668]	; (8003a1c <NT35510_Init+0x37c>)
 800377e:	663b      	str	r3, [r7, #96]	; 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8003780:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8003784:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8003788:	2336      	movs	r3, #54	; 0x36
 800378a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 800378e:	4aa4      	ldr	r2, [pc, #656]	; (8003a20 <NT35510_Init+0x380>)
 8003790:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003798:	6018      	str	r0, [r3, #0]
 800379a:	3304      	adds	r3, #4
 800379c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 800379e:	4aa1      	ldr	r2, [pc, #644]	; (8003a24 <NT35510_Init+0x384>)
 80037a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037a8:	6018      	str	r0, [r3, #0]
 80037aa:	3304      	adds	r3, #4
 80037ac:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80037ae:	f246 0336 	movw	r3, #24630	; 0x6036
 80037b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80037b6:	4a9c      	ldr	r2, [pc, #624]	; (8003a28 <NT35510_Init+0x388>)
 80037b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c0:	6018      	str	r0, [r3, #0]
 80037c2:	3304      	adds	r3, #4
 80037c4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80037c6:	4a99      	ldr	r2, [pc, #612]	; (8003a2c <NT35510_Init+0x38c>)
 80037c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037d0:	6018      	str	r0, [r3, #0]
 80037d2:	3304      	adds	r3, #4
 80037d4:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80037d6:	2335      	movs	r3, #53	; 0x35
 80037d8:	863b      	strh	r3, [r7, #48]	; 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80037da:	2311      	movs	r3, #17
 80037dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80037de:	2329      	movs	r3, #41	; 0x29
 80037e0:	853b      	strh	r3, [r7, #40]	; 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80037e2:	f647 7351 	movw	r3, #32593	; 0x7f51
 80037e6:	84bb      	strh	r3, [r7, #36]	; 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 80037e8:	f642 4353 	movw	r3, #11347	; 0x2c53
 80037ec:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 80037ee:	f240 2355 	movw	r3, #597	; 0x255
 80037f2:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 80037f4:	f64f 735e 	movw	r3, #65374	; 0xff5e
 80037f8:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 80037fa:	232c      	movs	r3, #44	; 0x2c
 80037fc:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 80037fe:	f245 533a 	movw	r3, #21818	; 0x553a
 8003802:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8003804:	f247 733a 	movw	r3, #30522	; 0x773a
 8003808:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800380a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800380e:	4619      	mov	r1, r3
 8003810:	2005      	movs	r0, #5
 8003812:	f002 fc73 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8003816:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800381a:	4619      	mov	r1, r3
 800381c:	2003      	movs	r0, #3
 800381e:	f002 fc6d 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8003822:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003826:	4619      	mov	r1, r3
 8003828:	2003      	movs	r0, #3
 800382a:	f002 fc67 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800382e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003832:	4619      	mov	r1, r3
 8003834:	2003      	movs	r0, #3
 8003836:	f002 fc61 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800383a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800383e:	4619      	mov	r1, r3
 8003840:	2003      	movs	r0, #3
 8003842:	f002 fc5b 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8003846:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800384a:	4619      	mov	r1, r3
 800384c:	2003      	movs	r0, #3
 800384e:	f002 fc55 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8003852:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003856:	4619      	mov	r1, r3
 8003858:	2003      	movs	r0, #3
 800385a:	f002 fc4f 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 800385e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003862:	4619      	mov	r1, r3
 8003864:	2001      	movs	r0, #1
 8003866:	f002 fc49 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800386a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800386e:	4619      	mov	r1, r3
 8003870:	2003      	movs	r0, #3
 8003872:	f002 fc43 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8003876:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800387a:	4619      	mov	r1, r3
 800387c:	2003      	movs	r0, #3
 800387e:	f002 fc3d 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8003882:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003886:	4619      	mov	r1, r3
 8003888:	2003      	movs	r0, #3
 800388a:	f002 fc37 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 800388e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003892:	4619      	mov	r1, r3
 8003894:	2003      	movs	r0, #3
 8003896:	f002 fc31 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800389a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800389e:	4619      	mov	r1, r3
 80038a0:	2003      	movs	r0, #3
 80038a2:	f002 fc2b 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 80038a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80038aa:	4619      	mov	r1, r3
 80038ac:	2003      	movs	r0, #3
 80038ae:	f002 fc25 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 80038b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80038b6:	4619      	mov	r1, r3
 80038b8:	2002      	movs	r0, #2
 80038ba:	f002 fc1f 	bl	80060fc <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80038be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80038c2:	4619      	mov	r1, r3
 80038c4:	2005      	movs	r0, #5
 80038c6:	f002 fc19 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80038ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038ce:	4619      	mov	r1, r3
 80038d0:	2002      	movs	r0, #2
 80038d2:	f002 fc13 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80038d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038da:	4619      	mov	r1, r3
 80038dc:	2001      	movs	r0, #1
 80038de:	f002 fc0d 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80038e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038e6:	4619      	mov	r1, r3
 80038e8:	2001      	movs	r0, #1
 80038ea:	f002 fc07 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80038ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038f2:	4619      	mov	r1, r3
 80038f4:	2002      	movs	r0, #2
 80038f6:	f002 fc01 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80038fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80038fe:	4619      	mov	r1, r3
 8003900:	2004      	movs	r0, #4
 8003902:	f002 fbfb 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8003906:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800390a:	4619      	mov	r1, r3
 800390c:	2003      	movs	r0, #3
 800390e:	f002 fbf5 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8003912:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003916:	4619      	mov	r1, r3
 8003918:	2003      	movs	r0, #3
 800391a:	f002 fbef 	bl	80060fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 800391e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003922:	4619      	mov	r1, r3
 8003924:	2001      	movs	r0, #1
 8003926:	f002 fbe9 	bl	80060fc <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 800392a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800392e:	4619      	mov	r1, r3
 8003930:	2000      	movs	r0, #0
 8003932:	f002 fbe3 	bl	80060fc <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8003936:	f107 030c 	add.w	r3, r7, #12
 800393a:	4619      	mov	r1, r3
 800393c:	2000      	movs	r0, #0
 800393e:	f002 fbdd 	bl	80060fc <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8003942:	20c8      	movs	r0, #200	; 0xc8
 8003944:	f001 fe16 	bl	8005574 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d112      	bne.n	8003974 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 800394e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003952:	4619      	mov	r1, r3
 8003954:	2001      	movs	r0, #1
 8003956:	f002 fbd1 	bl	80060fc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 800395a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f002 fbcb 	bl	80060fc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8003966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800396a:	4619      	mov	r1, r3
 800396c:	2004      	movs	r0, #4
 800396e:	f002 fbc5 	bl	80060fc <DSI_IO_WriteCmd>
 8003972:	e011      	b.n	8003998 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8003974:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003978:	4619      	mov	r1, r3
 800397a:	2001      	movs	r0, #1
 800397c:	f002 fbbe 	bl	80060fc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8003980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003984:	4619      	mov	r1, r3
 8003986:	2004      	movs	r0, #4
 8003988:	f002 fbb8 	bl	80060fc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 800398c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003990:	4619      	mov	r1, r3
 8003992:	2004      	movs	r0, #4
 8003994:	f002 fbb2 	bl	80060fc <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8003998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800399c:	4619      	mov	r1, r3
 800399e:	2000      	movs	r0, #0
 80039a0:	f002 fbac 	bl	80060fc <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 80039a4:	2078      	movs	r0, #120	; 0x78
 80039a6:	f001 fde5 	bl	8005574 <NT35510_IO_Delay>

  switch(ColorCoding)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <NT35510_Init+0x324>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d13c      	bne.n	8003a30 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 80039b6:	f107 0310 	add.w	r3, r7, #16
 80039ba:	4619      	mov	r1, r3
 80039bc:	2001      	movs	r0, #1
 80039be:	f002 fb9d 	bl	80060fc <DSI_IO_WriteCmd>
      break;
 80039c2:	e03c      	b.n	8003a3e <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	4619      	mov	r1, r3
 80039ca:	2001      	movs	r0, #1
 80039cc:	f002 fb96 	bl	80060fc <DSI_IO_WriteCmd>
      break;
 80039d0:	e035      	b.n	8003a3e <NT35510_Init+0x39e>
 80039d2:	bf00      	nop
 80039d4:	080138e8 	.word	0x080138e8
 80039d8:	b0030303 	.word	0xb0030303
 80039dc:	b6464646 	.word	0xb6464646
 80039e0:	b1030303 	.word	0xb1030303
 80039e4:	b7363636 	.word	0xb7363636
 80039e8:	b2020000 	.word	0xb2020000
 80039ec:	b8262626 	.word	0xb8262626
 80039f0:	b3090909 	.word	0xb3090909
 80039f4:	b9363636 	.word	0xb9363636
 80039f8:	b5080808 	.word	0xb5080808
 80039fc:	ba262626 	.word	0xba262626
 8003a00:	bc008000 	.word	0xbc008000
 8003a04:	bd008000 	.word	0xbd008000
 8003a08:	080138f0 	.word	0x080138f0
 8003a0c:	080138f4 	.word	0x080138f4
 8003a10:	080138fc 	.word	0x080138fc
 8003a14:	08013900 	.word	0x08013900
 8003a18:	08013904 	.word	0x08013904
 8003a1c:	cc000003 	.word	0xcc000003
 8003a20:	0801390c 	.word	0x0801390c
 8003a24:	08013914 	.word	0x08013914
 8003a28:	0801391c 	.word	0x0801391c
 8003a2c:	08013924 	.word	0x08013924
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8003a30:	f107 030c 	add.w	r3, r7, #12
 8003a34:	4619      	mov	r1, r3
 8003a36:	2001      	movs	r0, #1
 8003a38:	f002 fb60 	bl	80060fc <DSI_IO_WriteCmd>
      break;
 8003a3c:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8003a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a42:	4619      	mov	r1, r3
 8003a44:	2001      	movs	r0, #1
 8003a46:	f002 fb59 	bl	80060fc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8003a4a:	f107 0320 	add.w	r3, r7, #32
 8003a4e:	4619      	mov	r1, r3
 8003a50:	2001      	movs	r0, #1
 8003a52:	f002 fb53 	bl	80060fc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	f002 fb4d 	bl	80060fc <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8003a62:	f107 0318 	add.w	r3, r7, #24
 8003a66:	4619      	mov	r1, r3
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f002 fb47 	bl	80060fc <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8003a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a72:	4619      	mov	r1, r3
 8003a74:	2000      	movs	r0, #0
 8003a76:	f002 fb41 	bl	80060fc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8003a7a:	f107 0314 	add.w	r3, r7, #20
 8003a7e:	4619      	mov	r1, r3
 8003a80:	2000      	movs	r0, #0
 8003a82:	f002 fb3b 	bl	80060fc <DSI_IO_WriteCmd>

  return 0;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	37c8      	adds	r7, #200	; 0xc8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	4603      	mov	r3, r0
 8003a9a:	81fb      	strh	r3, [r7, #14]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	81bb      	strh	r3, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003aa8:	89bb      	ldrh	r3, [r7, #12]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8003aae:	89bb      	ldrh	r3, [r7, #12]
 8003ab0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ab4:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003aba:	f001 fc87 	bl	80053cc <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8003abe:	89fb      	ldrh	r3, [r7, #14]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fa89 	bl	8004fe0 <CODEC_IO_Write>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8003ad8:	89fb      	ldrh	r3, [r7, #14]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	f640 0117 	movw	r1, #2071	; 0x817
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 fa7c 	bl	8004fe0 <CODEC_IO_Write>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461a      	mov	r2, r3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8003af2:	89fb      	ldrh	r3, [r7, #14]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2200      	movs	r2, #0
 8003af8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fa6f 	bl	8004fe0 <CODEC_IO_Write>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	226c      	movs	r2, #108	; 0x6c
 8003b12:	2139      	movs	r1, #57	; 0x39
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fa63 	bl	8004fe0 <CODEC_IO_Write>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8003b24:	8afb      	ldrh	r3, [r7, #22]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8003b2a:	89fb      	ldrh	r3, [r7, #14]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2213      	movs	r2, #19
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 fa54 	bl	8004fe0 <CODEC_IO_Write>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e00b      	b.n	8003b5c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8003b44:	89fb      	ldrh	r3, [r7, #14]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2203      	movs	r2, #3
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 fa47 	bl	8004fe0 <CODEC_IO_Write>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8003b5c:	2032      	movs	r0, #50	; 0x32
 8003b5e:	f001 fc9d 	bl	800549c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8003b62:	8b3b      	ldrh	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 815f 	beq.w	8003e28 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8003b6a:	4bae      	ldr	r3, [pc, #696]	; (8003e24 <wm8994_Init+0x394>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8003b70:	8b3b      	ldrh	r3, [r7, #24]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	f000 808c 	beq.w	8003c90 <wm8994_Init+0x200>
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	f300 8111 	bgt.w	8003da0 <wm8994_Init+0x310>
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d002      	beq.n	8003b88 <wm8994_Init+0xf8>
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d042      	beq.n	8003c0c <wm8994_Init+0x17c>
 8003b86:	e10b      	b.n	8003da0 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003b88:	89fb      	ldrh	r3, [r7, #14]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003b90:	2105      	movs	r1, #5
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fa24 	bl	8004fe0 <CODEC_IO_Write>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003ba2:	89fb      	ldrh	r3, [r7, #14]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f240 6101 	movw	r1, #1537	; 0x601
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fa17 	bl	8004fe0 <CODEC_IO_Write>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003bbc:	89fb      	ldrh	r3, [r7, #14]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f240 6102 	movw	r1, #1538	; 0x602
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fa0a 	bl	8004fe0 <CODEC_IO_Write>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003bd6:	89fb      	ldrh	r3, [r7, #14]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f240 6104 	movw	r1, #1540	; 0x604
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 f9fd 	bl	8004fe0 <CODEC_IO_Write>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003bf0:	89fb      	ldrh	r3, [r7, #14]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f240 6105 	movw	r1, #1541	; 0x605
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 f9f0 	bl	8004fe0 <CODEC_IO_Write>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	61fb      	str	r3, [r7, #28]
      break;
 8003c0a:	e110      	b.n	8003e2e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003c0c:	89fb      	ldrh	r3, [r7, #14]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f240 3203 	movw	r2, #771	; 0x303
 8003c14:	2105      	movs	r1, #5
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 f9e2 	bl	8004fe0 <CODEC_IO_Write>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003c26:	89fb      	ldrh	r3, [r7, #14]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f240 6101 	movw	r1, #1537	; 0x601
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 f9d5 	bl	8004fe0 <CODEC_IO_Write>
 8003c36:	4603      	mov	r3, r0
 8003c38:	461a      	mov	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003c40:	89fb      	ldrh	r3, [r7, #14]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2201      	movs	r2, #1
 8003c46:	f240 6102 	movw	r1, #1538	; 0x602
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 f9c8 	bl	8004fe0 <CODEC_IO_Write>
 8003c50:	4603      	mov	r3, r0
 8003c52:	461a      	mov	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003c5a:	89fb      	ldrh	r3, [r7, #14]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f240 6104 	movw	r1, #1540	; 0x604
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 f9bb 	bl	8004fe0 <CODEC_IO_Write>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003c74:	89fb      	ldrh	r3, [r7, #14]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f240 6105 	movw	r1, #1541	; 0x605
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f9ae 	bl	8004fe0 <CODEC_IO_Write>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	61fb      	str	r3, [r7, #28]
      break;
 8003c8e:	e0ce      	b.n	8003e2e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003c90:	8afb      	ldrh	r3, [r7, #22]
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c96:	d141      	bne.n	8003d1c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003ca0:	2105      	movs	r1, #5
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 f99c 	bl	8004fe0 <CODEC_IO_Write>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	461a      	mov	r2, r3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8003cb2:	89fb      	ldrh	r3, [r7, #14]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	f240 6101 	movw	r1, #1537	; 0x601
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 f98f 	bl	8004fe0 <CODEC_IO_Write>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	f240 6102 	movw	r1, #1538	; 0x602
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 f982 	bl	8004fe0 <CODEC_IO_Write>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2203      	movs	r2, #3
 8003cec:	f240 6104 	movw	r1, #1540	; 0x604
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f975 	bl	8004fe0 <CODEC_IO_Write>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8003d00:	89fb      	ldrh	r3, [r7, #14]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2203      	movs	r2, #3
 8003d06:	f240 6105 	movw	r1, #1541	; 0x605
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f968 	bl	8004fe0 <CODEC_IO_Write>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8003d1a:	e088      	b.n	8003e2e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003d24:	2105      	movs	r1, #5
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f95a 	bl	8004fe0 <CODEC_IO_Write>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f240 6101 	movw	r1, #1537	; 0x601
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 f94d 	bl	8004fe0 <CODEC_IO_Write>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003d50:	89fb      	ldrh	r3, [r7, #14]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2201      	movs	r2, #1
 8003d56:	f240 6102 	movw	r1, #1538	; 0x602
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 f940 	bl	8004fe0 <CODEC_IO_Write>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003d6a:	89fb      	ldrh	r3, [r7, #14]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f240 6104 	movw	r1, #1540	; 0x604
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 f933 	bl	8004fe0 <CODEC_IO_Write>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8003d84:	89fb      	ldrh	r3, [r7, #14]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f240 6105 	movw	r1, #1541	; 0x605
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 f926 	bl	8004fe0 <CODEC_IO_Write>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	61fb      	str	r3, [r7, #28]
      break;
 8003d9e:	e046      	b.n	8003e2e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003da0:	89fb      	ldrh	r3, [r7, #14]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f240 3203 	movw	r2, #771	; 0x303
 8003da8:	2105      	movs	r1, #5
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f918 	bl	8004fe0 <CODEC_IO_Write>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003dba:	89fb      	ldrh	r3, [r7, #14]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f240 6101 	movw	r1, #1537	; 0x601
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f90b 	bl	8004fe0 <CODEC_IO_Write>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f240 6102 	movw	r1, #1538	; 0x602
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f8fe 	bl	8004fe0 <CODEC_IO_Write>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2200      	movs	r2, #0
 8003df4:	f240 6104 	movw	r1, #1540	; 0x604
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f8f1 	bl	8004fe0 <CODEC_IO_Write>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003e08:	89fb      	ldrh	r3, [r7, #14]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f240 6105 	movw	r1, #1541	; 0x605
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f8e4 	bl	8004fe0 <CODEC_IO_Write>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	61fb      	str	r3, [r7, #28]
      break;
 8003e22:	e004      	b.n	8003e2e <wm8994_Init+0x39e>
 8003e24:	2000291c 	.word	0x2000291c
    }
  }
  else
  {
    outputEnabled = 0;
 8003e28:	4b99      	ldr	r3, [pc, #612]	; (8004090 <wm8994_Init+0x600>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8003e2e:	8afb      	ldrh	r3, [r7, #22]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 81ab 	beq.w	800418c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8003e36:	4b97      	ldr	r3, [pc, #604]	; (8004094 <wm8994_Init+0x604>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8003e3c:	8afb      	ldrh	r3, [r7, #22]
 8003e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e42:	f000 8129 	beq.w	8004098 <wm8994_Init+0x608>
 8003e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e4a:	f300 819b 	bgt.w	8004184 <wm8994_Init+0x6f4>
 8003e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e52:	d05a      	beq.n	8003f0a <wm8994_Init+0x47a>
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e58:	f300 8194 	bgt.w	8004184 <wm8994_Init+0x6f4>
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e60:	f000 80c6 	beq.w	8003ff0 <wm8994_Init+0x560>
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	f040 818c 	bne.w	8004184 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8003e6c:	89fb      	ldrh	r3, [r7, #14]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8003e74:	2104      	movs	r1, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 f8b2 	bl	8004fe0 <CODEC_IO_Write>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	461a      	mov	r2, r3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	22db      	movs	r2, #219	; 0xdb
 8003e8c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f8a5 	bl	8004fe0 <CODEC_IO_Write>
 8003e96:	4603      	mov	r3, r0
 8003e98:	461a      	mov	r2, r3
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003ea0:	89fb      	ldrh	r3, [r7, #14]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 f898 	bl	8004fe0 <CODEC_IO_Write>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003eba:	89fb      	ldrh	r3, [r7, #14]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f88b 	bl	8004fe0 <CODEC_IO_Write>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461a      	mov	r2, r3
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003ed4:	89fb      	ldrh	r3, [r7, #14]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f240 6109 	movw	r1, #1545	; 0x609
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f87e 	bl	8004fe0 <CODEC_IO_Write>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8003eee:	89fb      	ldrh	r3, [r7, #14]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	220e      	movs	r2, #14
 8003ef4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f871 	bl	8004fe0 <CODEC_IO_Write>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
      break;
 8003f08:	e143      	b.n	8004192 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8003f0a:	89fb      	ldrh	r3, [r7, #14]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2211      	movs	r2, #17
 8003f10:	2128      	movs	r1, #40	; 0x28
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f864 	bl	8004fe0 <CODEC_IO_Write>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      //counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);

      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2220      	movs	r2, #32
 8003f28:	2129      	movs	r1, #41	; 0x29
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 f858 	bl	8004fe0 <CODEC_IO_Write>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	61fb      	str	r3, [r7, #28]
      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);

      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
       * +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2220      	movs	r2, #32
 8003f40:	212a      	movs	r1, #42	; 0x2a
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f84c 	bl	8004fe0 <CODEC_IO_Write>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f240 3203 	movw	r2, #771	; 0x303
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 f83f 	bl	8004fe0 <CODEC_IO_Write>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	22db      	movs	r2, #219	; 0xdb
 8003f72:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 f832 	bl	8004fe0 <CODEC_IO_Write>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f246 3250 	movw	r2, #25424	; 0x6350
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f825 	bl	8004fe0 <CODEC_IO_Write>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003fa0:	89fb      	ldrh	r3, [r7, #14]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f240 6106 	movw	r1, #1542	; 0x606
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 f818 	bl	8004fe0 <CODEC_IO_Write>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f240 6107 	movw	r1, #1543	; 0x607
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f80b 	bl	8004fe0 <CODEC_IO_Write>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	461a      	mov	r2, r3
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003fd4:	89fb      	ldrh	r3, [r7, #14]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	220d      	movs	r2, #13
 8003fda:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fffe 	bl	8004fe0 <CODEC_IO_Write>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	61fb      	str	r3, [r7, #28]
      break;
 8003fee:	e0d0      	b.n	8004192 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8003ff0:	89fb      	ldrh	r3, [r7, #14]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fff0 	bl	8004fe0 <CODEC_IO_Write>
 8004000:	4603      	mov	r3, r0
 8004002:	461a      	mov	r2, r3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	22db      	movs	r2, #219	; 0xdb
 8004010:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004014:	4618      	mov	r0, r3
 8004016:	f000 ffe3 	bl	8004fe0 <CODEC_IO_Write>
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004024:	89fb      	ldrh	r3, [r7, #14]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f246 3250 	movw	r2, #25424	; 0x6350
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 ffd6 	bl	8004fe0 <CODEC_IO_Write>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800403e:	89fb      	ldrh	r3, [r7, #14]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2202      	movs	r2, #2
 8004044:	f240 6106 	movw	r1, #1542	; 0x606
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ffc9 	bl	8004fe0 <CODEC_IO_Write>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004058:	89fb      	ldrh	r3, [r7, #14]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2202      	movs	r2, #2
 800405e:	f240 6107 	movw	r1, #1543	; 0x607
 8004062:	4618      	mov	r0, r3
 8004064:	f000 ffbc 	bl	8004fe0 <CODEC_IO_Write>
 8004068:	4603      	mov	r3, r0
 800406a:	461a      	mov	r2, r3
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	4413      	add	r3, r2
 8004070:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004072:	89fb      	ldrh	r3, [r7, #14]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	220d      	movs	r2, #13
 8004078:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800407c:	4618      	mov	r0, r3
 800407e:	f000 ffaf 	bl	8004fe0 <CODEC_IO_Write>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
      break; 
 800408c:	e081      	b.n	8004192 <wm8994_Init+0x702>
 800408e:	bf00      	nop
 8004090:	2000291c 	.word	0x2000291c
 8004094:	20002920 	.word	0x20002920
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004098:	89fb      	ldrh	r3, [r7, #14]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f640 723c 	movw	r2, #3900	; 0xf3c
 80040a0:	2104      	movs	r1, #4
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 ff9c 	bl	8004fe0 <CODEC_IO_Write>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	22db      	movs	r2, #219	; 0xdb
 80040b8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 ff8f 	bl	8004fe0 <CODEC_IO_Write>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80040cc:	89fb      	ldrh	r3, [r7, #14]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	22db      	movs	r2, #219	; 0xdb
 80040d2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 ff82 	bl	8004fe0 <CODEC_IO_Write>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 ff75 	bl	8004fe0 <CODEC_IO_Write>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004100:	89fb      	ldrh	r3, [r7, #14]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2202      	movs	r2, #2
 8004106:	f240 6106 	movw	r1, #1542	; 0x606
 800410a:	4618      	mov	r0, r3
 800410c:	f000 ff68 	bl	8004fe0 <CODEC_IO_Write>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2202      	movs	r2, #2
 8004120:	f240 6107 	movw	r1, #1543	; 0x607
 8004124:	4618      	mov	r0, r3
 8004126:	f000 ff5b 	bl	8004fe0 <CODEC_IO_Write>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004134:	89fb      	ldrh	r3, [r7, #14]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2202      	movs	r2, #2
 800413a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800413e:	4618      	mov	r0, r3
 8004140:	f000 ff4e 	bl	8004fe0 <CODEC_IO_Write>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2202      	movs	r2, #2
 8004154:	f240 6109 	movw	r1, #1545	; 0x609
 8004158:	4618      	mov	r0, r3
 800415a:	f000 ff41 	bl	8004fe0 <CODEC_IO_Write>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004168:	89fb      	ldrh	r3, [r7, #14]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	220d      	movs	r2, #13
 800416e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004172:	4618      	mov	r0, r3
 8004174:	f000 ff34 	bl	8004fe0 <CODEC_IO_Write>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	61fb      	str	r3, [r7, #28]
      break;    
 8004182:	e006      	b.n	8004192 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	3301      	adds	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
      break;
 800418a:	e002      	b.n	8004192 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 800418c:	4bb1      	ldr	r3, [pc, #708]	; (8004454 <wm8994_Init+0x9c4>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4ab0      	ldr	r2, [pc, #704]	; (8004458 <wm8994_Init+0x9c8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d079      	beq.n	800428e <wm8994_Init+0x7fe>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4aae      	ldr	r2, [pc, #696]	; (8004458 <wm8994_Init+0x9c8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	f200 80ad 	bhi.w	80042fe <wm8994_Init+0x86e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d061      	beq.n	8004272 <wm8994_Init+0x7e2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80041b4:	4293      	cmp	r3, r2
 80041b6:	f200 80a2 	bhi.w	80042fe <wm8994_Init+0x86e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80041c0:	4293      	cmp	r3, r2
 80041c2:	f000 808e 	beq.w	80042e2 <wm8994_Init+0x852>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80041cc:	4293      	cmp	r3, r2
 80041ce:	f200 8096 	bhi.w	80042fe <wm8994_Init+0x86e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80041d8:	d03d      	beq.n	8004256 <wm8994_Init+0x7c6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80041e0:	f200 808d 	bhi.w	80042fe <wm8994_Init+0x86e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f245 6222 	movw	r2, #22050	; 0x5622
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d06b      	beq.n	80042c6 <wm8994_Init+0x836>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f245 6222 	movw	r2, #22050	; 0x5622
 80041f4:	4293      	cmp	r3, r2
 80041f6:	f200 8082 	bhi.w	80042fe <wm8994_Init+0x86e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004200:	d01b      	beq.n	800423a <wm8994_Init+0x7aa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004208:	d879      	bhi.n	80042fe <wm8994_Init+0x86e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004210:	d005      	beq.n	800421e <wm8994_Init+0x78e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004218:	4293      	cmp	r3, r2
 800421a:	d046      	beq.n	80042aa <wm8994_Init+0x81a>
 800421c:	e06f      	b.n	80042fe <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2203      	movs	r2, #3
 8004224:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fed9 	bl	8004fe0 <CODEC_IO_Write>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]
    break;
 8004238:	e06f      	b.n	800431a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800423a:	89fb      	ldrh	r3, [r7, #14]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2233      	movs	r2, #51	; 0x33
 8004240:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fecb 	bl	8004fe0 <CODEC_IO_Write>
 800424a:	4603      	mov	r3, r0
 800424c:	461a      	mov	r2, r3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	61fb      	str	r3, [r7, #28]
    break;
 8004254:	e061      	b.n	800431a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004256:	89fb      	ldrh	r3, [r7, #14]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2263      	movs	r2, #99	; 0x63
 800425c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004260:	4618      	mov	r0, r3
 8004262:	f000 febd 	bl	8004fe0 <CODEC_IO_Write>
 8004266:	4603      	mov	r3, r0
 8004268:	461a      	mov	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	61fb      	str	r3, [r7, #28]
    break;
 8004270:	e053      	b.n	800431a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004272:	89fb      	ldrh	r3, [r7, #14]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2283      	movs	r2, #131	; 0x83
 8004278:	f44f 7104 	mov.w	r1, #528	; 0x210
 800427c:	4618      	mov	r0, r3
 800427e:	f000 feaf 	bl	8004fe0 <CODEC_IO_Write>
 8004282:	4603      	mov	r3, r0
 8004284:	461a      	mov	r2, r3
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	61fb      	str	r3, [r7, #28]
    break;
 800428c:	e045      	b.n	800431a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800428e:	89fb      	ldrh	r3, [r7, #14]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	22a3      	movs	r2, #163	; 0xa3
 8004294:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fea1 	bl	8004fe0 <CODEC_IO_Write>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
    break;
 80042a8:	e037      	b.n	800431a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80042aa:	89fb      	ldrh	r3, [r7, #14]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2213      	movs	r2, #19
 80042b0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fe93 	bl	8004fe0 <CODEC_IO_Write>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	61fb      	str	r3, [r7, #28]
    break;
 80042c4:	e029      	b.n	800431a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80042c6:	89fb      	ldrh	r3, [r7, #14]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2243      	movs	r2, #67	; 0x43
 80042cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fe85 	bl	8004fe0 <CODEC_IO_Write>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]
    break;
 80042e0:	e01b      	b.n	800431a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80042e2:	89fb      	ldrh	r3, [r7, #14]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2273      	movs	r2, #115	; 0x73
 80042e8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fe77 	bl	8004fe0 <CODEC_IO_Write>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]
    break; 
 80042fc:	e00d      	b.n	800431a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2283      	movs	r2, #131	; 0x83
 8004304:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe69 	bl	8004fe0 <CODEC_IO_Write>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	61fb      	str	r3, [r7, #28]
    break; 
 8004318:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800431a:	8afb      	ldrh	r3, [r7, #22]
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	d10e      	bne.n	8004340 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f244 0218 	movw	r2, #16408	; 0x4018
 800432a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fe56 	bl	8004fe0 <CODEC_IO_Write>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e00d      	b.n	800435c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f244 0210 	movw	r2, #16400	; 0x4010
 8004348:	f44f 7140 	mov.w	r1, #768	; 0x300
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fe47 	bl	8004fe0 <CODEC_IO_Write>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2200      	movs	r2, #0
 8004362:	f240 3102 	movw	r1, #770	; 0x302
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fe3a 	bl	8004fe0 <CODEC_IO_Write>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8004376:	89fb      	ldrh	r3, [r7, #14]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	220a      	movs	r2, #10
 800437c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fe2d 	bl	8004fe0 <CODEC_IO_Write>
 8004386:	4603      	mov	r3, r0
 8004388:	461a      	mov	r2, r3
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004390:	89fb      	ldrh	r3, [r7, #14]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2201      	movs	r2, #1
 8004396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fe20 	bl	8004fe0 <CODEC_IO_Write>
 80043a0:	4603      	mov	r3, r0
 80043a2:	461a      	mov	r2, r3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80043aa:	8b3b      	ldrh	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8123 	beq.w	80045f8 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80043ba:	2103      	movs	r1, #3
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fe0f 	bl	8004fe0 <CODEC_IO_Write>
 80043c2:	4603      	mov	r3, r0
 80043c4:	461a      	mov	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2200      	movs	r2, #0
 80043d2:	2122      	movs	r1, #34	; 0x22
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fe03 	bl	8004fe0 <CODEC_IO_Write>
 80043da:	4603      	mov	r3, r0
 80043dc:	461a      	mov	r2, r3
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2200      	movs	r2, #0
 80043ea:	2123      	movs	r1, #35	; 0x23
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fdf7 	bl	8004fe0 <CODEC_IO_Write>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80043fc:	89fb      	ldrh	r3, [r7, #14]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004404:	2136      	movs	r1, #54	; 0x36
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fdea 	bl	8004fe0 <CODEC_IO_Write>
 800440c:	4603      	mov	r3, r0
 800440e:	461a      	mov	r2, r3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f243 0203 	movw	r2, #12291	; 0x3003
 800441e:	2101      	movs	r1, #1
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fddd 	bl	8004fe0 <CODEC_IO_Write>
 8004426:	4603      	mov	r3, r0
 8004428:	461a      	mov	r2, r3
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004430:	8afb      	ldrh	r3, [r7, #22]
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004436:	d111      	bne.n	800445c <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004438:	89fb      	ldrh	r3, [r7, #14]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f240 2205 	movw	r2, #517	; 0x205
 8004440:	2151      	movs	r1, #81	; 0x51
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fdcc 	bl	8004fe0 <CODEC_IO_Write>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e00f      	b.n	8004474 <wm8994_Init+0x9e4>
 8004454:	20002920 	.word	0x20002920
 8004458:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2205      	movs	r2, #5
 8004462:	2151      	movs	r1, #81	; 0x51
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fdbb 	bl	8004fe0 <CODEC_IO_Write>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8004474:	8b7b      	ldrh	r3, [r7, #26]
 8004476:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 800447a:	f043 0303 	orr.w	r3, r3, #3
 800447e:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004480:	89fb      	ldrh	r3, [r7, #14]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	8b7a      	ldrh	r2, [r7, #26]
 8004486:	2101      	movs	r1, #1
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fda9 	bl	8004fe0 <CODEC_IO_Write>
 800448e:	4603      	mov	r3, r0
 8004490:	461a      	mov	r2, r3
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004498:	89fb      	ldrh	r3, [r7, #14]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2222      	movs	r2, #34	; 0x22
 800449e:	2160      	movs	r1, #96	; 0x60
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fd9d 	bl	8004fe0 <CODEC_IO_Write>
 80044a6:	4603      	mov	r3, r0
 80044a8:	461a      	mov	r2, r3
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80044b0:	89fb      	ldrh	r3, [r7, #14]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f649 7225 	movw	r2, #40741	; 0x9f25
 80044b8:	214c      	movs	r1, #76	; 0x4c
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fd90 	bl	8004fe0 <CODEC_IO_Write>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80044ca:	200f      	movs	r0, #15
 80044cc:	f000 ffe6 	bl	800549c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80044d0:	89fb      	ldrh	r3, [r7, #14]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2201      	movs	r2, #1
 80044d6:	212d      	movs	r1, #45	; 0x2d
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd81 	bl	8004fe0 <CODEC_IO_Write>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80044e8:	89fb      	ldrh	r3, [r7, #14]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2201      	movs	r2, #1
 80044ee:	212e      	movs	r1, #46	; 0x2e
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fd75 	bl	8004fe0 <CODEC_IO_Write>
 80044f6:	4603      	mov	r3, r0
 80044f8:	461a      	mov	r2, r3
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004508:	2103      	movs	r1, #3
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fd68 	bl	8004fe0 <CODEC_IO_Write>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2233      	movs	r2, #51	; 0x33
 8004520:	2154      	movs	r1, #84	; 0x54
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fd5c 	bl	8004fe0 <CODEC_IO_Write>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8004532:	20fa      	movs	r0, #250	; 0xfa
 8004534:	f000 ffb2 	bl	800549c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004538:	89fb      	ldrh	r3, [r7, #14]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	22ee      	movs	r2, #238	; 0xee
 800453e:	2160      	movs	r1, #96	; 0x60
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fd4d 	bl	8004fe0 <CODEC_IO_Write>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004550:	89fb      	ldrh	r3, [r7, #14]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	22c0      	movs	r2, #192	; 0xc0
 8004556:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fd40 	bl	8004fe0 <CODEC_IO_Write>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800456a:	89fb      	ldrh	r3, [r7, #14]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	22c0      	movs	r2, #192	; 0xc0
 8004570:	f240 6111 	movw	r1, #1553	; 0x611
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fd33 	bl	8004fe0 <CODEC_IO_Write>
 800457a:	4603      	mov	r3, r0
 800457c:	461a      	mov	r2, r3
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004584:	89fb      	ldrh	r3, [r7, #14]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fd26 	bl	8004fe0 <CODEC_IO_Write>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800459e:	89fb      	ldrh	r3, [r7, #14]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	22c0      	movs	r2, #192	; 0xc0
 80045a4:	f240 6112 	movw	r1, #1554	; 0x612
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fd19 	bl	8004fe0 <CODEC_IO_Write>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80045b8:	89fb      	ldrh	r3, [r7, #14]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	22c0      	movs	r2, #192	; 0xc0
 80045be:	f240 6113 	movw	r1, #1555	; 0x613
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fd0c 	bl	8004fe0 <CODEC_IO_Write>
 80045c8:	4603      	mov	r3, r0
 80045ca:	461a      	mov	r2, r3
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80045d2:	89fb      	ldrh	r3, [r7, #14]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2200      	movs	r2, #0
 80045d8:	f240 4122 	movw	r1, #1058	; 0x422
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fcff 	bl	8004fe0 <CODEC_IO_Write>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80045ec:	7afa      	ldrb	r2, [r7, #11]
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f984 	bl	8004900 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80045f8:	8afb      	ldrh	r3, [r7, #22]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80a6 	beq.w	800474c <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004600:	8afb      	ldrh	r3, [r7, #22]
 8004602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004606:	d003      	beq.n	8004610 <wm8994_Init+0xb80>
 8004608:	8afb      	ldrh	r3, [r7, #22]
 800460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460e:	d12b      	bne.n	8004668 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004610:	8b7b      	ldrh	r3, [r7, #26]
 8004612:	f043 0313 	orr.w	r3, r3, #19
 8004616:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004618:	89fb      	ldrh	r3, [r7, #14]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	8b7a      	ldrh	r2, [r7, #26]
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fcdd 	bl	8004fe0 <CODEC_IO_Write>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2202      	movs	r2, #2
 8004636:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fcd0 	bl	8004fe0 <CODEC_IO_Write>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004652:	f240 4111 	movw	r1, #1041	; 0x411
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fcc2 	bl	8004fe0 <CODEC_IO_Write>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	e06b      	b.n	8004740 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004668:	8afb      	ldrh	r3, [r7, #22]
 800466a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466e:	d139      	bne.n	80046e4 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004670:	8b7b      	ldrh	r3, [r7, #26]
 8004672:	f043 0313 	orr.w	r3, r3, #19
 8004676:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004678:	89fb      	ldrh	r3, [r7, #14]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	8b7a      	ldrh	r2, [r7, #26]
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fcad 	bl	8004fe0 <CODEC_IO_Write>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004690:	89fb      	ldrh	r3, [r7, #14]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2202      	movs	r2, #2
 8004696:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fca0 	bl	8004fe0 <CODEC_IO_Write>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80046aa:	89fb      	ldrh	r3, [r7, #14]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80046b2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fc92 	bl	8004fe0 <CODEC_IO_Write>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80046c6:	89fb      	ldrh	r3, [r7, #14]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80046ce:	f240 4111 	movw	r1, #1041	; 0x411
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fc84 	bl	8004fe0 <CODEC_IO_Write>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e02d      	b.n	8004740 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80046e4:	8afb      	ldrh	r3, [r7, #22]
 80046e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ea:	d003      	beq.n	80046f4 <wm8994_Init+0xc64>
 80046ec:	8afb      	ldrh	r3, [r7, #22]
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d125      	bne.n	8004740 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	220b      	movs	r2, #11
 80046fa:	2118      	movs	r1, #24
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fc6f 	bl	8004fe0 <CODEC_IO_Write>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	220b      	movs	r2, #11
 8004712:	211a      	movs	r1, #26
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fc63 	bl	8004fe0 <CODEC_IO_Write>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004724:	89fb      	ldrh	r3, [r7, #14]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800472c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fc55 	bl	8004fe0 <CODEC_IO_Write>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004740:	7afa      	ldrb	r2, [r7, #11]
 8004742:	89fb      	ldrh	r3, [r7, #14]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f8da 	bl	8004900 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800474c:	69fb      	ldr	r3, [r7, #28]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop

08004758 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800475c:	f000 fe40 	bl	80053e0 <AUDIO_IO_DeInit>
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}

08004764 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800476e:	f000 fe2d 	bl	80053cc <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fe63 	bl	8005444 <AUDIO_IO_Read>
 800477e:	4603      	mov	r3, r0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	80fb      	strh	r3, [r7, #6]
 8004794:	4613      	mov	r3, r2
 8004796:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f9d1 	bl	8004b48 <wm8994_SetMute>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2101      	movs	r1, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f9bc 	bl	8004b48 <wm8994_SetMute>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2201      	movs	r2, #1
 80047de:	2102      	movs	r1, #2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fbfd 	bl	8004fe0 <CODEC_IO_Write>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f99b 	bl	8004b48 <wm8994_SetMute>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800481a:	68fb      	ldr	r3, [r7, #12]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004834:	4b31      	ldr	r3, [pc, #196]	; (80048fc <wm8994_Stop+0xd8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d05a      	beq.n	80048f2 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f981 	bl	8004b48 <wm8994_SetMute>
 8004846:	4602      	mov	r2, r0
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d04e      	beq.n	80048f2 <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fbbd 	bl	8004fe0 <CODEC_IO_Write>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004878:	f240 4122 	movw	r1, #1058	; 0x422
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fbaf 	bl	8004fe0 <CODEC_IO_Write>
 8004882:	4603      	mov	r3, r0
 8004884:	461a      	mov	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2200      	movs	r2, #0
 8004892:	212d      	movs	r1, #45	; 0x2d
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fba3 	bl	8004fe0 <CODEC_IO_Write>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2200      	movs	r2, #0
 80048aa:	212e      	movs	r1, #46	; 0x2e
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fb97 	bl	8004fe0 <CODEC_IO_Write>
 80048b2:	4603      	mov	r3, r0
 80048b4:	461a      	mov	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2200      	movs	r2, #0
 80048c2:	2105      	movs	r1, #5
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fb8b 	bl	8004fe0 <CODEC_IO_Write>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2200      	movs	r2, #0
 80048da:	2100      	movs	r1, #0
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fb7f 	bl	8004fe0 <CODEC_IO_Write>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <wm8994_Stop+0xd8>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	2000291c 	.word	0x2000291c

08004900 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	460a      	mov	r2, r1
 800490a:	80fb      	strh	r3, [r7, #6]
 800490c:	4613      	mov	r3, r2
 800490e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004914:	797b      	ldrb	r3, [r7, #5]
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d80b      	bhi.n	8004932 <wm8994_SetVolume+0x32>
 800491a:	797a      	ldrb	r2, [r7, #5]
 800491c:	4613      	mov	r3, r2
 800491e:	019b      	lsls	r3, r3, #6
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	4a86      	ldr	r2, [pc, #536]	; (8004b3c <wm8994_SetVolume+0x23c>)
 8004924:	fb82 1203 	smull	r1, r2, r2, r3
 8004928:	1152      	asrs	r2, r2, #5
 800492a:	17db      	asrs	r3, r3, #31
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	e000      	b.n	8004934 <wm8994_SetVolume+0x34>
 8004932:	2364      	movs	r3, #100	; 0x64
 8004934:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004936:	4b82      	ldr	r3, [pc, #520]	; (8004b40 <wm8994_SetVolume+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 809b 	beq.w	8004a76 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004940:	7afb      	ldrb	r3, [r7, #11]
 8004942:	2b3e      	cmp	r3, #62	; 0x3e
 8004944:	d93d      	bls.n	80049c2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f8fc 	bl	8004b48 <wm8994_SetMute>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f240 127f 	movw	r2, #383	; 0x17f
 8004960:	211c      	movs	r1, #28
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fb3c 	bl	8004fe0 <CODEC_IO_Write>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f240 127f 	movw	r2, #383	; 0x17f
 800497a:	211d      	movs	r1, #29
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fb2f 	bl	8004fe0 <CODEC_IO_Write>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f240 127f 	movw	r2, #383	; 0x17f
 8004994:	2126      	movs	r1, #38	; 0x26
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fb22 	bl	8004fe0 <CODEC_IO_Write>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f240 127f 	movw	r2, #383	; 0x17f
 80049ae:	2127      	movs	r1, #39	; 0x27
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fb15 	bl	8004fe0 <CODEC_IO_Write>
 80049b6:	4603      	mov	r3, r0
 80049b8:	461a      	mov	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e059      	b.n	8004a76 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80049c2:	797b      	ldrb	r3, [r7, #5]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f8bb 	bl	8004b48 <wm8994_SetMute>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e04c      	b.n	8004a76 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f8b1 	bl	8004b48 <wm8994_SetMute>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	b2d8      	uxtb	r0, r3
 80049f2:	7afb      	ldrb	r3, [r7, #11]
 80049f4:	b21b      	sxth	r3, r3
 80049f6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80049fa:	b21b      	sxth	r3, r3
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	211c      	movs	r1, #28
 8004a02:	f000 faed 	bl	8004fe0 <CODEC_IO_Write>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	b2d8      	uxtb	r0, r3
 8004a14:	7afb      	ldrb	r3, [r7, #11]
 8004a16:	b21b      	sxth	r3, r3
 8004a18:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	211d      	movs	r1, #29
 8004a24:	f000 fadc 	bl	8004fe0 <CODEC_IO_Write>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	b2d8      	uxtb	r0, r3
 8004a36:	7afb      	ldrb	r3, [r7, #11]
 8004a38:	b21b      	sxth	r3, r3
 8004a3a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	2126      	movs	r1, #38	; 0x26
 8004a46:	f000 facb 	bl	8004fe0 <CODEC_IO_Write>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	b2d8      	uxtb	r0, r3
 8004a58:	7afb      	ldrb	r3, [r7, #11]
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004a60:	b21b      	sxth	r3, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	2127      	movs	r1, #39	; 0x27
 8004a68:	f000 faba 	bl	8004fe0 <CODEC_IO_Write>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8004a76:	4b33      	ldr	r3, [pc, #204]	; (8004b44 <wm8994_SetVolume+0x244>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d059      	beq.n	8004b32 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8004a7e:	797b      	ldrb	r3, [r7, #5]
 8004a80:	2b63      	cmp	r3, #99	; 0x63
 8004a82:	d80c      	bhi.n	8004a9e <wm8994_SetVolume+0x19e>
 8004a84:	797a      	ldrb	r2, [r7, #5]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <wm8994_SetVolume+0x23c>)
 8004a90:	fb82 1203 	smull	r1, r2, r2, r3
 8004a94:	1152      	asrs	r2, r2, #5
 8004a96:	17db      	asrs	r3, r3, #31
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e000      	b.n	8004aa0 <wm8994_SetVolume+0x1a0>
 8004a9e:	23ef      	movs	r3, #239	; 0xef
 8004aa0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	b2d8      	uxtb	r0, r3
 8004aa6:	7afb      	ldrb	r3, [r7, #11]
 8004aa8:	b21b      	sxth	r3, r3
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	b21b      	sxth	r3, r3
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ab8:	f000 fa92 	bl	8004fe0 <CODEC_IO_Write>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	b2d8      	uxtb	r0, r3
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	b21b      	sxth	r3, r3
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	b21b      	sxth	r3, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f240 4101 	movw	r1, #1025	; 0x401
 8004adc:	f000 fa80 	bl	8004fe0 <CODEC_IO_Write>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	b2d8      	uxtb	r0, r3
 8004aee:	7afb      	ldrb	r3, [r7, #11]
 8004af0:	b21b      	sxth	r3, r3
 8004af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af6:	b21b      	sxth	r3, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	f240 4104 	movw	r1, #1028	; 0x404
 8004b00:	f000 fa6e 	bl	8004fe0 <CODEC_IO_Write>
 8004b04:	4603      	mov	r3, r0
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	b2d8      	uxtb	r0, r3
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	b21b      	sxth	r3, r3
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	b21b      	sxth	r3, r3
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f240 4105 	movw	r1, #1029	; 0x405
 8004b24:	f000 fa5c 	bl	8004fe0 <CODEC_IO_Write>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	51eb851f 	.word	0x51eb851f
 8004b40:	2000291c 	.word	0x2000291c
 8004b44:	20002920 	.word	0x20002920

08004b48 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <wm8994_SetMute+0x98>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d039      	beq.n	8004bd4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d11c      	bne.n	8004ba0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa34 	bl	8004fe0 <CODEC_IO_Write>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b8a:	f240 4122 	movw	r1, #1058	; 0x422
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa26 	bl	8004fe0 <CODEC_IO_Write>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e019      	b.n	8004bd4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fa18 	bl	8004fe0 <CODEC_IO_Write>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f240 4122 	movw	r1, #1058	; 0x422
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fa0b 	bl	8004fe0 <CODEC_IO_Write>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	2000291c 	.word	0x2000291c

08004be4 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	460a      	mov	r2, r1
 8004bee:	80fb      	strh	r3, [r7, #6]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8004bf8:	797b      	ldrb	r3, [r7, #5]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	f000 808c 	beq.w	8004d18 <wm8994_SetOutputMode+0x134>
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	f300 80cb 	bgt.w	8004d9c <wm8994_SetOutputMode+0x1b8>
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d002      	beq.n	8004c10 <wm8994_SetOutputMode+0x2c>
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d042      	beq.n	8004c94 <wm8994_SetOutputMode+0xb0>
 8004c0e:	e0c5      	b.n	8004d9c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004c18:	2105      	movs	r1, #5
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f9e0 	bl	8004fe0 <CODEC_IO_Write>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f240 6101 	movw	r1, #1537	; 0x601
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f9d3 	bl	8004fe0 <CODEC_IO_Write>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f240 6102 	movw	r1, #1538	; 0x602
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f9c6 	bl	8004fe0 <CODEC_IO_Write>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2202      	movs	r2, #2
 8004c64:	f240 6104 	movw	r1, #1540	; 0x604
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f9b9 	bl	8004fe0 <CODEC_IO_Write>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f240 6105 	movw	r1, #1541	; 0x605
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f9ac 	bl	8004fe0 <CODEC_IO_Write>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
    break;
 8004c92:	e0c5      	b.n	8004e20 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f240 3203 	movw	r2, #771	; 0x303
 8004c9c:	2105      	movs	r1, #5
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f99e 	bl	8004fe0 <CODEC_IO_Write>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f240 6101 	movw	r1, #1537	; 0x601
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f991 	bl	8004fe0 <CODEC_IO_Write>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f240 6102 	movw	r1, #1538	; 0x602
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f984 	bl	8004fe0 <CODEC_IO_Write>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f240 6104 	movw	r1, #1540	; 0x604
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 f977 	bl	8004fe0 <CODEC_IO_Write>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2200      	movs	r2, #0
 8004d02:	f240 6105 	movw	r1, #1541	; 0x605
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f96a 	bl	8004fe0 <CODEC_IO_Write>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
    break;
 8004d16:	e083      	b.n	8004e20 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004d20:	2105      	movs	r1, #5
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f95c 	bl	8004fe0 <CODEC_IO_Write>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2201      	movs	r2, #1
 8004d38:	f240 6101 	movw	r1, #1537	; 0x601
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f94f 	bl	8004fe0 <CODEC_IO_Write>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461a      	mov	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2201      	movs	r2, #1
 8004d52:	f240 6102 	movw	r1, #1538	; 0x602
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f942 	bl	8004fe0 <CODEC_IO_Write>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f240 6104 	movw	r1, #1540	; 0x604
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 f935 	bl	8004fe0 <CODEC_IO_Write>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2202      	movs	r2, #2
 8004d86:	f240 6105 	movw	r1, #1541	; 0x605
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f928 	bl	8004fe0 <CODEC_IO_Write>
 8004d90:	4603      	mov	r3, r0
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
    break;
 8004d9a:	e041      	b.n	8004e20 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f240 3203 	movw	r2, #771	; 0x303
 8004da4:	2105      	movs	r1, #5
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f91a 	bl	8004fe0 <CODEC_IO_Write>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f240 6101 	movw	r1, #1537	; 0x601
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f90d 	bl	8004fe0 <CODEC_IO_Write>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f240 6102 	movw	r1, #1538	; 0x602
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f900 	bl	8004fe0 <CODEC_IO_Write>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2200      	movs	r2, #0
 8004df0:	f240 6104 	movw	r1, #1540	; 0x604
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f8f3 	bl	8004fe0 <CODEC_IO_Write>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f240 6105 	movw	r1, #1541	; 0x605
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f8e6 	bl	8004fe0 <CODEC_IO_Write>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    break;    
 8004e1e:	bf00      	nop
  }  
  return counter;
 8004e20:	68fb      	ldr	r3, [r7, #12]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	4a57      	ldr	r2, [pc, #348]	; (8004f9c <wm8994_SetFrequency+0x170>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d05f      	beq.n	8004f04 <wm8994_SetFrequency+0xd8>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4a55      	ldr	r2, [pc, #340]	; (8004f9c <wm8994_SetFrequency+0x170>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	f200 8093 	bhi.w	8004f74 <wm8994_SetFrequency+0x148>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d047      	beq.n	8004ee8 <wm8994_SetFrequency+0xbc>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	f200 8088 	bhi.w	8004f74 <wm8994_SetFrequency+0x148>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d074      	beq.n	8004f58 <wm8994_SetFrequency+0x12c>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d87d      	bhi.n	8004f74 <wm8994_SetFrequency+0x148>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f245 6222 	movw	r2, #22050	; 0x5622
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d05c      	beq.n	8004f3c <wm8994_SetFrequency+0x110>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f245 6222 	movw	r2, #22050	; 0x5622
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d873      	bhi.n	8004f74 <wm8994_SetFrequency+0x148>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004e92:	d01b      	beq.n	8004ecc <wm8994_SetFrequency+0xa0>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004e9a:	d86b      	bhi.n	8004f74 <wm8994_SetFrequency+0x148>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004ea2:	d005      	beq.n	8004eb0 <wm8994_SetFrequency+0x84>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d038      	beq.n	8004f20 <wm8994_SetFrequency+0xf4>
 8004eae:	e061      	b.n	8004f74 <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f890 	bl	8004fe0 <CODEC_IO_Write>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
    break;
 8004eca:	e061      	b.n	8004f90 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2233      	movs	r2, #51	; 0x33
 8004ed2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f882 	bl	8004fe0 <CODEC_IO_Write>
 8004edc:	4603      	mov	r3, r0
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
    break;
 8004ee6:	e053      	b.n	8004f90 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2283      	movs	r2, #131	; 0x83
 8004eee:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f874 	bl	8004fe0 <CODEC_IO_Write>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
    break;
 8004f02:	e045      	b.n	8004f90 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	22a3      	movs	r2, #163	; 0xa3
 8004f0a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f866 	bl	8004fe0 <CODEC_IO_Write>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
    break;
 8004f1e:	e037      	b.n	8004f90 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2213      	movs	r2, #19
 8004f26:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f858 	bl	8004fe0 <CODEC_IO_Write>
 8004f30:	4603      	mov	r3, r0
 8004f32:	461a      	mov	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
    break;
 8004f3a:	e029      	b.n	8004f90 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2243      	movs	r2, #67	; 0x43
 8004f42:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f84a 	bl	8004fe0 <CODEC_IO_Write>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
    break;
 8004f56:	e01b      	b.n	8004f90 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2273      	movs	r2, #115	; 0x73
 8004f5e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f83c 	bl	8004fe0 <CODEC_IO_Write>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    break; 
 8004f72:	e00d      	b.n	8004f90 <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2283      	movs	r2, #131	; 0x83
 8004f7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f82e 	bl	8004fe0 <CODEC_IO_Write>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
    break; 
 8004f8e:	bf00      	nop
  }
  return counter;
 8004f90:	68fb      	ldr	r3, [r7, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	00017700 	.word	0x00017700

08004fa0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f812 	bl	8004fe0 <CODEC_IO_Write>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <wm8994_Reset+0x38>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <wm8994_Reset+0x3c>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

  return counter;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2000291c 	.word	0x2000291c
 8004fdc:	20002920 	.word	0x20002920

08004fe0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	71fb      	strb	r3, [r7, #7]
 8004fea:	460b      	mov	r3, r1
 8004fec:	80bb      	strh	r3, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	88b9      	ldrh	r1, [r7, #4]
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f9f7 	bl	80053f0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	b2db      	uxtb	r3, r3
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <BSP_LED_Init+0x54>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	4a11      	ldr	r2, [pc, #68]	; (8005064 <BSP_LED_Init+0x54>)
 8005020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005024:	6313      	str	r3, [r2, #48]	; 0x30
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <BSP_LED_Init+0x54>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <BSP_LED_Init+0x58>)
 8005036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800503c:	2301      	movs	r3, #1
 800503e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005044:	2303      	movs	r3, #3
 8005046:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <BSP_LED_Init+0x5c>)
 800504c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005050:	f107 020c 	add.w	r2, r7, #12
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f004 fdd0 	bl	8009bfc <HAL_GPIO_Init>

}
 800505c:	bf00      	nop
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40023800 	.word	0x40023800
 8005068:	20000084 	.word	0x20000084
 800506c:	2000008c 	.word	0x2000008c

08005070 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	4a07      	ldr	r2, [pc, #28]	; (800509c <BSP_LED_On+0x2c>)
 800507e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <BSP_LED_On+0x30>)
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	b29b      	uxth	r3, r3
 800508c:	2201      	movs	r2, #1
 800508e:	4619      	mov	r1, r3
 8005090:	f005 f884 	bl	800a19c <HAL_GPIO_WritePin>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	2000008c 	.word	0x2000008c
 80050a0:	20000084 	.word	0x20000084

080050a4 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <BSP_LED_Toggle+0x2c>)
 80050b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	4906      	ldr	r1, [pc, #24]	; (80050d4 <BSP_LED_Toggle+0x30>)
 80050ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f005 f883 	bl	800a1ce <HAL_GPIO_TogglePin>
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	2000008c 	.word	0x2000008c
 80050d4:	20000084 	.word	0x20000084

080050d8 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	4a06      	ldr	r2, [pc, #24]	; (8005100 <BSP_PB_GetState+0x28>)
 80050e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ea:	2201      	movs	r2, #1
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 f83c 	bl	800a16c <HAL_GPIO_ReadPin>
 80050f4:	4603      	mov	r3, r0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000094 	.word	0x20000094

08005104 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	; 0x30
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a58      	ldr	r2, [pc, #352]	; (8005270 <I2Cx_MspInit+0x16c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d15b      	bne.n	80051cc <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8005114:	4b57      	ldr	r3, [pc, #348]	; (8005274 <I2Cx_MspInit+0x170>)
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	4a56      	ldr	r2, [pc, #344]	; (8005274 <I2Cx_MspInit+0x170>)
 800511a:	f043 0308 	orr.w	r3, r3, #8
 800511e:	6313      	str	r3, [r2, #48]	; 0x30
 8005120:	4b54      	ldr	r3, [pc, #336]	; (8005274 <I2Cx_MspInit+0x170>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 800512c:	4b51      	ldr	r3, [pc, #324]	; (8005274 <I2Cx_MspInit+0x170>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	4a50      	ldr	r2, [pc, #320]	; (8005274 <I2Cx_MspInit+0x170>)
 8005132:	f043 0302 	orr.w	r3, r3, #2
 8005136:	6313      	str	r3, [r2, #48]	; 0x30
 8005138:	4b4e      	ldr	r3, [pc, #312]	; (8005274 <I2Cx_MspInit+0x170>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8005144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005148:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800514a:	2312      	movs	r3, #18
 800514c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005152:	2302      	movs	r3, #2
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8005156:	2304      	movs	r3, #4
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 800515a:	f107 031c 	add.w	r3, r7, #28
 800515e:	4619      	mov	r1, r3
 8005160:	4845      	ldr	r0, [pc, #276]	; (8005278 <I2Cx_MspInit+0x174>)
 8005162:	f004 fd4b 	bl	8009bfc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 800516a:	230b      	movs	r3, #11
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 800516e:	f107 031c 	add.w	r3, r7, #28
 8005172:	4619      	mov	r1, r3
 8005174:	4841      	ldr	r0, [pc, #260]	; (800527c <I2Cx_MspInit+0x178>)
 8005176:	f004 fd41 	bl	8009bfc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800517a:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <I2Cx_MspInit+0x170>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	4a3d      	ldr	r2, [pc, #244]	; (8005274 <I2Cx_MspInit+0x170>)
 8005180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005184:	6413      	str	r3, [r2, #64]	; 0x40
 8005186:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <I2Cx_MspInit+0x170>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <I2Cx_MspInit+0x170>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4a37      	ldr	r2, [pc, #220]	; (8005274 <I2Cx_MspInit+0x170>)
 8005198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800519e:	4b35      	ldr	r3, [pc, #212]	; (8005274 <I2Cx_MspInit+0x170>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4a34      	ldr	r2, [pc, #208]	; (8005274 <I2Cx_MspInit+0x170>)
 80051a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80051aa:	2200      	movs	r2, #0
 80051ac:	210f      	movs	r1, #15
 80051ae:	205f      	movs	r0, #95	; 0x5f
 80051b0:	f002 fb02 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80051b4:	205f      	movs	r0, #95	; 0x5f
 80051b6:	f002 fb1b 	bl	80077f0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80051ba:	2200      	movs	r2, #0
 80051bc:	210f      	movs	r1, #15
 80051be:	2060      	movs	r0, #96	; 0x60
 80051c0:	f002 fafa 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80051c4:	2060      	movs	r0, #96	; 0x60
 80051c6:	f002 fb13 	bl	80077f0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80051ca:	e04d      	b.n	8005268 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80051cc:	4b29      	ldr	r3, [pc, #164]	; (8005274 <I2Cx_MspInit+0x170>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	4a28      	ldr	r2, [pc, #160]	; (8005274 <I2Cx_MspInit+0x170>)
 80051d2:	f043 0302 	orr.w	r3, r3, #2
 80051d6:	6313      	str	r3, [r2, #48]	; 0x30
 80051d8:	4b26      	ldr	r3, [pc, #152]	; (8005274 <I2Cx_MspInit+0x170>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80051e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80051ea:	2312      	movs	r3, #18
 80051ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80051f2:	2302      	movs	r3, #2
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80051f6:	2304      	movs	r3, #4
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80051fa:	f107 031c 	add.w	r3, r7, #28
 80051fe:	4619      	mov	r1, r3
 8005200:	481e      	ldr	r0, [pc, #120]	; (800527c <I2Cx_MspInit+0x178>)
 8005202:	f004 fcfb 	bl	8009bfc <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800520a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800520c:	f107 031c 	add.w	r3, r7, #28
 8005210:	4619      	mov	r1, r3
 8005212:	481a      	ldr	r0, [pc, #104]	; (800527c <I2Cx_MspInit+0x178>)
 8005214:	f004 fcf2 	bl	8009bfc <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005218:	4b16      	ldr	r3, [pc, #88]	; (8005274 <I2Cx_MspInit+0x170>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4a15      	ldr	r2, [pc, #84]	; (8005274 <I2Cx_MspInit+0x170>)
 800521e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005222:	6413      	str	r3, [r2, #64]	; 0x40
 8005224:	4b13      	ldr	r3, [pc, #76]	; (8005274 <I2Cx_MspInit+0x170>)
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8005230:	4b10      	ldr	r3, [pc, #64]	; (8005274 <I2Cx_MspInit+0x170>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <I2Cx_MspInit+0x170>)
 8005236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800523a:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <I2Cx_MspInit+0x170>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <I2Cx_MspInit+0x170>)
 8005242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005246:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005248:	2200      	movs	r2, #0
 800524a:	210f      	movs	r1, #15
 800524c:	201f      	movs	r0, #31
 800524e:	f002 fab3 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8005252:	201f      	movs	r0, #31
 8005254:	f002 facc 	bl	80077f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005258:	2200      	movs	r2, #0
 800525a:	210f      	movs	r1, #15
 800525c:	2020      	movs	r0, #32
 800525e:	f002 faab 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005262:	2020      	movs	r0, #32
 8005264:	f002 fac4 	bl	80077f0 <HAL_NVIC_EnableIRQ>
}
 8005268:	bf00      	nop
 800526a:	3730      	adds	r7, #48	; 0x30
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20002924 	.word	0x20002924
 8005274:	40023800 	.word	0x40023800
 8005278:	40020c00 	.word	0x40020c00
 800527c:	40020400 	.word	0x40020400

08005280 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f005 fabd 	bl	800a808 <HAL_I2C_GetState>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d125      	bne.n	80052e0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <I2Cx_Init+0x68>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a13      	ldr	r2, [pc, #76]	; (80052ec <I2Cx_Init+0x6c>)
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e002      	b.n	80052aa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <I2Cx_Init+0x70>)
 80052a8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <I2Cx_Init+0x74>)
 80052ae:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ff15 	bl	8005104 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f004 ff92 	bl	800a204 <HAL_I2C_Init>
  }
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20002924 	.word	0x20002924
 80052ec:	40006000 	.word	0x40006000
 80052f0:	40005400 	.word	0x40005400
 80052f4:	40912732 	.word	0x40912732

080052f8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af04      	add	r7, sp, #16
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	72fb      	strb	r3, [r7, #11]
 800530a:	460b      	mov	r3, r1
 800530c:	813b      	strh	r3, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005316:	7afb      	ldrb	r3, [r7, #11]
 8005318:	b299      	uxth	r1, r3
 800531a:	88f8      	ldrh	r0, [r7, #6]
 800531c:	893a      	ldrh	r2, [r7, #8]
 800531e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005322:	9302      	str	r3, [sp, #8]
 8005324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	4603      	mov	r3, r0
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f005 f950 	bl	800a5d4 <HAL_I2C_Mem_Read>
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	4619      	mov	r1, r3
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f832 	bl	80053ac <I2Cx_Error>
  }
  return status;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b08a      	sub	sp, #40	; 0x28
 8005356:	af04      	add	r7, sp, #16
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	4608      	mov	r0, r1
 800535c:	4611      	mov	r1, r2
 800535e:	461a      	mov	r2, r3
 8005360:	4603      	mov	r3, r0
 8005362:	72fb      	strb	r3, [r7, #11]
 8005364:	460b      	mov	r3, r1
 8005366:	813b      	strh	r3, [r7, #8]
 8005368:	4613      	mov	r3, r2
 800536a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	b299      	uxth	r1, r3
 8005374:	88f8      	ldrh	r0, [r7, #6]
 8005376:	893a      	ldrh	r2, [r7, #8]
 8005378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800537c:	9302      	str	r3, [sp, #8]
 800537e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4603      	mov	r3, r0
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f005 f80f 	bl	800a3ac <HAL_I2C_Mem_Write>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f805 	bl	80053ac <I2Cx_Error>
  }
  return status;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f004 ffb3 	bl	800a324 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff5e 	bl	8005280 <I2Cx_Init>
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80053d0:	4802      	ldr	r0, [pc, #8]	; (80053dc <AUDIO_IO_Init+0x10>)
 80053d2:	f7ff ff55 	bl	8005280 <I2Cx_Init>
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20002924 	.word	0x20002924

080053e0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0

}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
 80053fa:	460b      	mov	r3, r1
 80053fc:	80bb      	strh	r3, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8005402:	887b      	ldrh	r3, [r7, #2]
 8005404:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8005406:	89fb      	ldrh	r3, [r7, #14]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	b29b      	uxth	r3, r3
 800540c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	b29b      	uxth	r3, r3
 8005414:	b21a      	sxth	r2, r3
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	b21b      	sxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b21b      	sxth	r3, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8005422:	88ba      	ldrh	r2, [r7, #4]
 8005424:	79f9      	ldrb	r1, [r7, #7]
 8005426:	2302      	movs	r3, #2
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	1cbb      	adds	r3, r7, #2
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2302      	movs	r3, #2
 8005430:	4803      	ldr	r0, [pc, #12]	; (8005440 <AUDIO_IO_Write+0x50>)
 8005432:	f7ff ff8e 	bl	8005352 <I2Cx_WriteMultiple>
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20002924 	.word	0x20002924

08005444 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af02      	add	r7, sp, #8
 800544a:	4603      	mov	r3, r0
 800544c:	460a      	mov	r2, r1
 800544e:	71fb      	strb	r3, [r7, #7]
 8005450:	4613      	mov	r3, r2
 8005452:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	81bb      	strh	r3, [r7, #12]
 8005458:	2300      	movs	r3, #0
 800545a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800545c:	88ba      	ldrh	r2, [r7, #4]
 800545e:	79f9      	ldrb	r1, [r7, #7]
 8005460:	2302      	movs	r3, #2
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	f107 030c 	add.w	r3, r7, #12
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2302      	movs	r3, #2
 800546c:	480a      	ldr	r0, [pc, #40]	; (8005498 <AUDIO_IO_Read+0x54>)
 800546e:	f7ff ff43 	bl	80052f8 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8005472:	89bb      	ldrh	r3, [r7, #12]
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8005478:	89bb      	ldrh	r3, [r7, #12]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	b29b      	uxth	r3, r3
 800547e:	b21a      	sxth	r2, r3
 8005480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005484:	4313      	orrs	r3, r2
 8005486:	b21b      	sxth	r3, r3
 8005488:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800548a:	89fb      	ldrh	r3, [r7, #14]
 800548c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800548e:	89bb      	ldrh	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20002924 	.word	0x20002924

0800549c <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f002 f887 	bl	80075b8 <HAL_Delay>
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80054b8:	4802      	ldr	r0, [pc, #8]	; (80054c4 <TS_IO_Init+0x10>)
 80054ba:	f7ff fee1 	bl	8005280 <I2Cx_Init>
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20002924 	.word	0x20002924

080054c8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
 80054d2:	460b      	mov	r3, r1
 80054d4:	71bb      	strb	r3, [r7, #6]
 80054d6:	4613      	mov	r3, r2
 80054d8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80054da:	79bb      	ldrb	r3, [r7, #6]
 80054dc:	b29a      	uxth	r2, r3
 80054de:	79f9      	ldrb	r1, [r7, #7]
 80054e0:	2301      	movs	r3, #1
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	1d7b      	adds	r3, r7, #5
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2301      	movs	r3, #1
 80054ea:	4803      	ldr	r0, [pc, #12]	; (80054f8 <TS_IO_Write+0x30>)
 80054ec:	f7ff ff31 	bl	8005352 <I2Cx_WriteMultiple>
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20002924 	.word	0x20002924

080054fc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af02      	add	r7, sp, #8
 8005502:	4603      	mov	r3, r0
 8005504:	460a      	mov	r2, r1
 8005506:	71fb      	strb	r3, [r7, #7]
 8005508:	4613      	mov	r3, r2
 800550a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005510:	79bb      	ldrb	r3, [r7, #6]
 8005512:	b29a      	uxth	r2, r3
 8005514:	79f9      	ldrb	r1, [r7, #7]
 8005516:	2301      	movs	r3, #1
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	f107 030f 	add.w	r3, r7, #15
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2301      	movs	r3, #1
 8005522:	4804      	ldr	r0, [pc, #16]	; (8005534 <TS_IO_Read+0x38>)
 8005524:	f7ff fee8 	bl	80052f8 <I2Cx_ReadMultiple>

  return read_value;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20002924 	.word	0x20002924

08005538 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af02      	add	r7, sp, #8
 800553e:	603a      	str	r2, [r7, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	4603      	mov	r3, r0
 8005544:	71fb      	strb	r3, [r7, #7]
 8005546:	460b      	mov	r3, r1
 8005548:	71bb      	strb	r3, [r7, #6]
 800554a:	4613      	mov	r3, r2
 800554c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800554e:	79bb      	ldrb	r3, [r7, #6]
 8005550:	b29a      	uxth	r2, r3
 8005552:	79f9      	ldrb	r1, [r7, #7]
 8005554:	88bb      	ldrh	r3, [r7, #4]
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2301      	movs	r3, #1
 800555e:	4804      	ldr	r0, [pc, #16]	; (8005570 <TS_IO_ReadMultiple+0x38>)
 8005560:	f7ff feca 	bl	80052f8 <I2Cx_ReadMultiple>
 8005564:	4603      	mov	r3, r0
 8005566:	b29b      	uxth	r3, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20002924 	.word	0x20002924

08005574 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 f81b 	bl	80075b8 <HAL_Delay>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8005592:	f000 f823 	bl	80055dc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80055a6:	f7fc f9db 	bl	8001960 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <HAL_SAI_ErrorCallback+0x24>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d102      	bne.n	80055cc <HAL_SAI_ErrorCallback+0x18>
  {
  BSP_AUDIO_OUT_Error_CallBack();
 80055c6:	f000 f810 	bl	80055ea <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack();
  }
}
 80055ca:	e001      	b.n	80055d0 <HAL_SAI_ErrorCallback+0x1c>
    BSP_AUDIO_IN_Error_CallBack();
 80055cc:	f7fd f81e 	bl	800260c <BSP_AUDIO_IN_Error_CallBack>
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40015804 	.word	0x40015804

080055dc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
}
 80055e0:	bf00      	nop
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80055ea:	b480      	push	{r7}
 80055ec:	af00      	add	r7, sp, #0
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	; 0x30
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8005602:	4b48      	ldr	r3, [pc, #288]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	4a47      	ldr	r2, [pc, #284]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800560c:	6453      	str	r3, [r2, #68]	; 0x44
 800560e:	4b45      	ldr	r3, [pc, #276]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	69bb      	ldr	r3, [r7, #24]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800561a:	4b42      	ldr	r3, [pc, #264]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	4a41      	ldr	r2, [pc, #260]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005624:	6313      	str	r3, [r2, #48]	; 0x30
 8005626:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8005632:	4b3c      	ldr	r3, [pc, #240]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	4a3b      	ldr	r2, [pc, #236]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005638:	f043 0310 	orr.w	r3, r3, #16
 800563c:	6313      	str	r3, [r2, #48]	; 0x30
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 800564a:	2370      	movs	r3, #112	; 0x70
 800564c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800564e:	2302      	movs	r3, #2
 8005650:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005656:	2303      	movs	r3, #3
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 800565a:	2306      	movs	r3, #6
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800565e:	f107 031c 	add.w	r3, r7, #28
 8005662:	4619      	mov	r1, r3
 8005664:	4830      	ldr	r0, [pc, #192]	; (8005728 <BSP_AUDIO_OUT_MspInit+0x130>)
 8005666:	f004 fac9 	bl	8009bfc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800566e:	f107 031c 	add.w	r3, r7, #28
 8005672:	4619      	mov	r1, r3
 8005674:	482d      	ldr	r0, [pc, #180]	; (800572c <BSP_AUDIO_OUT_MspInit+0x134>)
 8005676:	f004 fac1 	bl	8009bfc <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800567a:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	4a29      	ldr	r2, [pc, #164]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005684:	6313      	str	r3, [r2, #48]	; 0x30
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <BSP_AUDIO_OUT_MspInit+0x12c>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a26      	ldr	r2, [pc, #152]	; (8005730 <BSP_AUDIO_OUT_MspInit+0x138>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d137      	bne.n	800570c <BSP_AUDIO_OUT_MspInit+0x114>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 800569e:	2200      	movs	r2, #0
 80056a0:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056a4:	2240      	movs	r2, #64	; 0x40
 80056a6:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80056a8:	4b22      	ldr	r3, [pc, #136]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80056ae:	4b21      	ldr	r3, [pc, #132]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056b4:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80056b6:	4b1f      	ldr	r3, [pc, #124]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056bc:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80056be:	4b1d      	ldr	r3, [pc, #116]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056c4:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80056c6:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056cc:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80056ce:	4b19      	ldr	r3, [pc, #100]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056d4:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056d8:	2204      	movs	r2, #4
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80056dc:	4b15      	ldr	r3, [pc, #84]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056de:	2203      	movs	r2, #3
 80056e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80056e8:	4b12      	ldr	r3, [pc, #72]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056f0:	4a11      	ldr	r2, [pc, #68]	; (8005738 <BSP_AUDIO_OUT_MspInit+0x140>)
 80056f2:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a0f      	ldr	r2, [pc, #60]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80056fa:	4a0e      	ldr	r2, [pc, #56]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8005700:	480c      	ldr	r0, [pc, #48]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005702:	f002 fa4b 	bl	8007b9c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 8005706:	480b      	ldr	r0, [pc, #44]	; (8005734 <BSP_AUDIO_OUT_MspInit+0x13c>)
 8005708:	f002 f99a 	bl	8007a40 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800570c:	2200      	movs	r2, #0
 800570e:	210e      	movs	r1, #14
 8005710:	2039      	movs	r0, #57	; 0x39
 8005712:	f002 f851 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8005716:	2039      	movs	r0, #57	; 0x39
 8005718:	f002 f86a 	bl	80077f0 <HAL_NVIC_EnableIRQ>
}
 800571c:	bf00      	nop
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40023800 	.word	0x40023800
 8005728:	40021000 	.word	0x40021000
 800572c:	40021800 	.word	0x40021800
 8005730:	40015804 	.word	0x40015804
 8005734:	20002a80 	.word	0x20002a80
 8005738:	40026428 	.word	0x40026428

0800573c <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 800573c:	b580      	push	{r7, lr}
 800573e:	b0a8      	sub	sp, #160	; 0xa0
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005748:	f107 0310 	add.w	r3, r7, #16
 800574c:	4618      	mov	r0, r3
 800574e:	f007 fd41 	bl	800d1d4 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005758:	4293      	cmp	r3, r2
 800575a:	d009      	beq.n	8005770 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f245 6222 	movw	r2, #22050	; 0x5622
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f64a 4244 	movw	r2, #44100	; 0xac44
 800576c:	4293      	cmp	r3, r2
 800576e:	d112      	bne.n	8005796 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005770:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005774:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8005776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800577a:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800577c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005780:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8005782:	2302      	movs	r3, #2
 8005784:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8005786:	2313      	movs	r3, #19
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800578a:	f107 0310 	add.w	r3, r7, #16
 800578e:	4618      	mov	r0, r3
 8005790:	f007 f8f8 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
 8005794:	e012      	b.n	80057bc <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* SAI clock config 
    PLLSAI_VCO: VCO_344M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005796:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800579a:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800579c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80057a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 80057a2:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80057a6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 80057a8:	2307      	movs	r3, #7
 80057aa:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 80057ac:	2301      	movs	r3, #1
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	4618      	mov	r0, r3
 80057b6:	f007 f8e5 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	37a0      	adds	r7, #160	; 0xa0
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80057cc:	f7fc f8e4 	bl	8001998 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80057e0:	f7fc f8c6 	bl	8001970 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80057f0:	2001      	movs	r0, #1
 80057f2:	f000 f803 	bl	80057fc <BSP_LCD_InitEx>
 80057f6:	4603      	mov	r3, r0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}

080057fc <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b090      	sub	sp, #64	; 0x40
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8005806:	f646 3325 	movw	r3, #27429	; 0x6b25
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8005814:	f000 f936 	bl	8005a84 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8005818:	f000 fc9a 	bl	8006150 <LCD_IO_GetID>
 800581c:	4603      	mov	r3, r0
 800581e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8005820:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005822:	2b11      	cmp	r3, #17
 8005824:	d001      	beq.n	800582a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8005826:	2301      	movs	r3, #1
 8005828:	e113      	b.n	8005a52 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800582a:	f000 fc99 	bl	8006160 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800582e:	4b8b      	ldr	r3, [pc, #556]	; (8005a5c <BSP_LCD_InitEx+0x260>)
 8005830:	4a8b      	ldr	r2, [pc, #556]	; (8005a60 <BSP_LCD_InitEx+0x264>)
 8005832:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8005834:	4889      	ldr	r0, [pc, #548]	; (8005a5c <BSP_LCD_InitEx+0x260>)
 8005836:	f003 f9f5 	bl	8008c24 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800583a:	2364      	movs	r3, #100	; 0x64
 800583c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800583e:	2305      	movs	r3, #5
 8005840:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8005846:	f24f 4324 	movw	r3, #62500	; 0xf424
 800584a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800584c:	4b83      	ldr	r3, [pc, #524]	; (8005a5c <BSP_LCD_InitEx+0x260>)
 800584e:	2201      	movs	r2, #1
 8005850:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	089b      	lsrs	r3, r3, #2
 8005856:	4a83      	ldr	r2, [pc, #524]	; (8005a64 <BSP_LCD_InitEx+0x268>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	0a9b      	lsrs	r3, r3, #10
 800585e:	4a7f      	ldr	r2, [pc, #508]	; (8005a5c <BSP_LCD_InitEx+0x260>)
 8005860:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8005862:	f107 0308 	add.w	r3, r7, #8
 8005866:	4619      	mov	r1, r3
 8005868:	487c      	ldr	r0, [pc, #496]	; (8005a5c <BSP_LCD_InitEx+0x260>)
 800586a:	f003 f8bf 	bl	80089ec <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d108      	bne.n	8005886 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8005874:	4b7c      	ldr	r3, [pc, #496]	; (8005a68 <BSP_LCD_InitEx+0x26c>)
 8005876:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800587a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800587c:	4b7b      	ldr	r3, [pc, #492]	; (8005a6c <BSP_LCD_InitEx+0x270>)
 800587e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e007      	b.n	8005896 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8005886:	4b78      	ldr	r3, [pc, #480]	; (8005a68 <BSP_LCD_InitEx+0x26c>)
 8005888:	f44f 7248 	mov.w	r2, #800	; 0x320
 800588c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800588e:	4b77      	ldr	r3, [pc, #476]	; (8005a6c <BSP_LCD_InitEx+0x270>)
 8005890:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005894:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8005896:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <BSP_LCD_InitEx+0x26c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800589c:	4b73      	ldr	r3, [pc, #460]	; (8005a6c <BSP_LCD_InitEx+0x270>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
#if defined (USE_STM32F769I_DISCO_REVB03)
  VSA  = NT35510_480X800_VSYNC;
 80058a2:	2378      	movs	r3, #120	; 0x78
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = NT35510_480X800_VBP;
 80058a6:	2396      	movs	r3, #150	; 0x96
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = NT35510_480X800_VFP;
 80058aa:	2396      	movs	r3, #150	; 0x96
 80058ac:	623b      	str	r3, [r7, #32]
  HSA  = NT35510_480X800_HSYNC;
 80058ae:	2302      	movs	r3, #2
 80058b0:	61fb      	str	r3, [r7, #28]
  HBP  = NT35510_480X800_HBP;
 80058b2:	2322      	movs	r3, #34	; 0x22
 80058b4:	61bb      	str	r3, [r7, #24]
  HFP  = NT35510_480X800_HFP;  
 80058b6:	2322      	movs	r3, #34	; 0x22
 80058b8:	617b      	str	r3, [r7, #20]
  HSA  = OTM8009A_480X800_HSYNC;
  HBP  = OTM8009A_480X800_HBP;
  HFP  = OTM8009A_480X800_HFP;
#endif /* USE_STM32F769I_DISCO_REVB03 */

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80058ba:	4b6d      	ldr	r3, [pc, #436]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80058c0:	4b6b      	ldr	r3, [pc, #428]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058c2:	2205      	movs	r2, #5
 80058c4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80058c6:	4b6a      	ldr	r3, [pc, #424]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80058cc:	4b68      	ldr	r3, [pc, #416]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80058d2:	4b67      	ldr	r3, [pc, #412]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80058d8:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058da:	2202      	movs	r2, #2
 80058dc:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80058de:	4b64      	ldr	r3, [pc, #400]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058e0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80058e4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80058e6:	4b62      	ldr	r3, [pc, #392]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80058ec:	4a60      	ldr	r2, [pc, #384]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f6:	fb03 f202 	mul.w	r2, r3, r2
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	4a5b      	ldr	r2, [pc, #364]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005902:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005908:	fb03 f202 	mul.w	r2, r3, r2
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	4a57      	ldr	r2, [pc, #348]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005914:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8005916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	441a      	add	r2, r3
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	441a      	add	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005926:	fb03 f202 	mul.w	r2, r3, r2
 800592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	4a4f      	ldr	r2, [pc, #316]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005932:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8005934:	4a4e      	ldr	r2, [pc, #312]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800593a:	4a4d      	ldr	r2, [pc, #308]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8005940:	4a4b      	ldr	r2, [pc, #300]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8005946:	4a4a      	ldr	r2, [pc, #296]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800594c:	4b48      	ldr	r3, [pc, #288]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 800594e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005952:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8005954:	4b46      	ldr	r3, [pc, #280]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005956:	2210      	movs	r2, #16
 8005958:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800595a:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 800595c:	2200      	movs	r2, #0
 800595e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005966:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8005968:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 800596a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8005970:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005976:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8005978:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 800597a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800597e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8005980:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005986:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8005988:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 800598a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800598e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8005990:	4937      	ldr	r1, [pc, #220]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005992:	4832      	ldr	r0, [pc, #200]	; (8005a5c <BSP_LCD_InitEx+0x260>)
 8005994:	f003 fb7c 	bl	8009090 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	3b01      	subs	r3, #1
 800599c:	4a35      	ldr	r2, [pc, #212]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 800599e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	4413      	add	r3, r2
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4a32      	ldr	r2, [pc, #200]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 80059aa:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80059ac:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <BSP_LCD_InitEx+0x26c>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	441a      	add	r2, r3
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	4413      	add	r3, r2
 80059b8:	3b01      	subs	r3, #1
 80059ba:	4a2e      	ldr	r2, [pc, #184]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 80059bc:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80059be:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <BSP_LCD_InitEx+0x26c>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	441a      	add	r2, r3
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	441a      	add	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4413      	add	r3, r2
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4a28      	ldr	r2, [pc, #160]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <BSP_LCD_InitEx+0x26c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 80059da:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80059dc:	4b23      	ldr	r3, [pc, #140]	; (8005a6c <BSP_LCD_InitEx+0x270>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 80059e2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80059e4:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <BSP_LCD_InitEx+0x27c>)
 80059e6:	2208      	movs	r2, #8
 80059e8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80059ea:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <BSP_LCD_InitEx+0x27c>)
 80059ec:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80059f0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80059f2:	4b21      	ldr	r3, [pc, #132]	; (8005a78 <BSP_LCD_InitEx+0x27c>)
 80059f4:	2207      	movs	r2, #7
 80059f6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80059f8:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <BSP_LCD_InitEx+0x27c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80059fe:	481e      	ldr	r0, [pc, #120]	; (8005a78 <BSP_LCD_InitEx+0x27c>)
 8005a00:	f006 ffc0 	bl	800c984 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8005a14:	4b17      	ldr	r3, [pc, #92]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005a1c:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 8005a24:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <BSP_LCD_InitEx+0x280>)
 8005a26:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8005a28:	4911      	ldr	r1, [pc, #68]	; (8005a70 <BSP_LCD_InitEx+0x274>)
 8005a2a:	4812      	ldr	r0, [pc, #72]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 8005a2c:	f005 fd72 	bl	800b514 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8005a30:	4810      	ldr	r0, [pc, #64]	; (8005a74 <BSP_LCD_InitEx+0x278>)
 8005a32:	f005 f991 	bl	800ad58 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8005a36:	4809      	ldr	r0, [pc, #36]	; (8005a5c <BSP_LCD_InitEx+0x260>)
 8005a38:	f003 ffbc 	bl	80099b4 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8005a3c:	f001 fa62 	bl	8006f04 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005a40:	480f      	ldr	r0, [pc, #60]	; (8005a80 <BSP_LCD_InitEx+0x284>)
 8005a42:	f000 f925 	bl	8005c90 <BSP_LCD_SetFont>
/***********************NT35510 Initialization********************************/  
  
  /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
   * depending on configuration set in 'hdsivideo_handle'.
   */
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f7fd fe28 	bl	80036a0 <NT35510_Init>

/***********************End OTM8009A Initialization****************************/ 
#endif /* USE_STM32F769I_DISCO_REVB03 */


  return LCD_OK; 
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3740      	adds	r7, #64	; 0x40
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20002c4c 	.word	0x20002c4c
 8005a60:	40016c00 	.word	0x40016c00
 8005a64:	43215e57 	.word	0x43215e57
 8005a68:	200000a0 	.word	0x200000a0
 8005a6c:	200000a4 	.word	0x200000a4
 8005a70:	20002ae0 	.word	0x20002ae0
 8005a74:	20002ba4 	.word	0x20002ba4
 8005a78:	20002c84 	.word	0x20002c84
 8005a7c:	40016800 	.word	0x40016800
 8005a80:	20000098 	.word	0x20000098

08005a84 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <BSP_LCD_Reset+0x68>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <BSP_LCD_Reset+0x68>)
 8005a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a94:	6313      	str	r3, [r2, #48]	; 0x30
 8005a96:	4b15      	ldr	r3, [pc, #84]	; (8005aec <BSP_LCD_Reset+0x68>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8005aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aa6:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8005aac:	2301      	movs	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	480d      	ldr	r0, [pc, #52]	; (8005af0 <BSP_LCD_Reset+0x6c>)
 8005aba:	f004 f89f 	bl	8009bfc <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ac4:	480a      	ldr	r0, [pc, #40]	; (8005af0 <BSP_LCD_Reset+0x6c>)
 8005ac6:	f004 fb69 	bl	800a19c <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8005aca:	2014      	movs	r0, #20
 8005acc:	f001 fd74 	bl	80075b8 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ad6:	4806      	ldr	r0, [pc, #24]	; (8005af0 <BSP_LCD_Reset+0x6c>)
 8005ad8:	f004 fb60 	bl	800a19c <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8005adc:	200a      	movs	r0, #10
 8005ade:	f001 fd6b 	bl	80075b8 <HAL_Delay>
}
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40022400 	.word	0x40022400

08005af4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8005af8:	4b03      	ldr	r3, [pc, #12]	; (8005b08 <BSP_LCD_GetXSize+0x14>)
 8005afa:	681b      	ldr	r3, [r3, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	200000a0 	.word	0x200000a0

08005b0c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <BSP_LCD_GetYSize+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	200000a4 	.word	0x200000a4

08005b24 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b090      	sub	sp, #64	; 0x40
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	6039      	str	r1, [r7, #0]
 8005b2e:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8005b34:	f7ff ffde 	bl	8005af4 <BSP_LCD_GetXSize>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005b40:	f7ff ffe4 	bl	8005b0c <BSP_LCD_GetYSize>
 8005b44:	4603      	mov	r3, r0
 8005b46:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8005b50:	23ff      	movs	r3, #255	; 0xff
 8005b52:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005b70:	2307      	movs	r3, #7
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8005b74:	f7ff ffbe 	bl	8005af4 <BSP_LCD_GetXSize>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8005b7c:	f7ff ffc6 	bl	8005b0c <BSP_LCD_GetYSize>
 8005b80:	4603      	mov	r3, r0
 8005b82:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4812      	ldr	r0, [pc, #72]	; (8005bd8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8005b8e:	f005 fa6b 	bl	800b068 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	4911      	ldr	r1, [pc, #68]	; (8005bdc <BSP_LCD_LayerDefaultInit+0xb8>)
 8005b96:	4613      	mov	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	490c      	ldr	r1, [pc, #48]	; (8005bdc <BSP_LCD_LayerDefaultInit+0xb8>)
 8005bac:	4613      	mov	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8005bba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	4907      	ldr	r1, [pc, #28]	; (8005bdc <BSP_LCD_LayerDefaultInit+0xb8>)
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8005bce:	601a      	str	r2, [r3, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	3740      	adds	r7, #64	; 0x40
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20002ba4 	.word	0x20002ba4
 8005bdc:	20002c6c 	.word	0x20002c6c
 8005be0:	20000098 	.word	0x20000098

08005be4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <BSP_LCD_SelectLayer+0x1c>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6013      	str	r3, [r2, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20002c68 	.word	0x20002c68

08005c04 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color keying.
  * @param  LayerIndex: Layer foreground or background
  * @param  RGBValue: Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&(hltdc_discovery), RGBValue, LayerIndex);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	4805      	ldr	r0, [pc, #20]	; (8005c28 <BSP_LCD_SetColorKeying+0x24>)
 8005c14:	f005 fa66 	bl	800b0e4 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&(hltdc_discovery), LayerIndex);
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4803      	ldr	r0, [pc, #12]	; (8005c28 <BSP_LCD_SetColorKeying+0x24>)
 8005c1c:	f005 faa6 	bl	800b16c <HAL_LTDC_EnableColorKeying>
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20002ba4 	.word	0x20002ba4

08005c2c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005c34:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <BSP_LCD_SetTextColor+0x28>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4907      	ldr	r1, [pc, #28]	; (8005c58 <BSP_LCD_SetTextColor+0x2c>)
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20002c68 	.word	0x20002c68
 8005c58:	20002c6c 	.word	0x20002c6c

08005c5c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <BSP_LCD_SetBackColor+0x2c>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4908      	ldr	r1, [pc, #32]	; (8005c8c <BSP_LCD_SetBackColor+0x30>)
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3304      	adds	r3, #4
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	20002c68 	.word	0x20002c68
 8005c8c:	20002c6c 	.word	0x20002c6c

08005c90 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <BSP_LCD_SetFont+0x2c>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4908      	ldr	r1, [pc, #32]	; (8005cc0 <BSP_LCD_SetFont+0x30>)
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3308      	adds	r3, #8
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20002c68 	.word	0x20002c68
 8005cc0:	20002c6c 	.word	0x20002c6c

08005cc4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8005cc8:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <BSP_LCD_GetFont+0x24>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4907      	ldr	r1, [pc, #28]	; (8005cec <BSP_LCD_GetFont+0x28>)
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3308      	adds	r3, #8
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20002c68 	.word	0x20002c68
 8005cec:	20002c6c 	.word	0x20002c6c

08005cf0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8005cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <BSP_LCD_Clear+0x48>)
 8005cfa:	681c      	ldr	r4, [r3, #0]
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <BSP_LCD_Clear+0x48>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a0e      	ldr	r2, [pc, #56]	; (8005d3c <BSP_LCD_Clear+0x4c>)
 8005d02:	2134      	movs	r1, #52	; 0x34
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	335c      	adds	r3, #92	; 0x5c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461e      	mov	r6, r3
 8005d10:	f7ff fef0 	bl	8005af4 <BSP_LCD_GetXSize>
 8005d14:	4605      	mov	r5, r0
 8005d16:	f7ff fef9 	bl	8005b0c <BSP_LCD_GetYSize>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	2300      	movs	r3, #0
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	462a      	mov	r2, r5
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 fb60 	bl	80063f0 <LL_FillBuffer>
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d38:	20002c68 	.word	0x20002c68
 8005d3c:	20002ba4 	.word	0x20002ba4

08005d40 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	80bb      	strh	r3, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <BSP_LCD_DisplayChar+0x80>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	491b      	ldr	r1, [pc, #108]	; (8005dc4 <BSP_LCD_DisplayChar+0x84>)
 8005d58:	4613      	mov	r3, r2
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	3308      	adds	r3, #8
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6819      	ldr	r1, [r3, #0]
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <BSP_LCD_DisplayChar+0x80>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4c14      	ldr	r4, [pc, #80]	; (8005dc4 <BSP_LCD_DisplayChar+0x84>)
 8005d74:	4613      	mov	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4423      	add	r3, r4
 8005d7e:	3308      	adds	r3, #8
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005d84:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <BSP_LCD_DisplayChar+0x80>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	; (8005dc4 <BSP_LCD_DisplayChar+0x84>)
 8005d8e:	4613      	mov	r3, r2
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4423      	add	r3, r4
 8005d98:	3308      	adds	r3, #8
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	889b      	ldrh	r3, [r3, #4]
 8005d9e:	3307      	adds	r3, #7
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da00      	bge.n	8005da6 <BSP_LCD_DisplayChar+0x66>
 8005da4:	3307      	adds	r3, #7
 8005da6:	10db      	asrs	r3, r3, #3
 8005da8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005dac:	18ca      	adds	r2, r1, r3
 8005dae:	88b9      	ldrh	r1, [r7, #4]
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fa64 	bl	8006280 <DrawChar>
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd90      	pop	{r4, r7, pc}
 8005dc0:	20002c68 	.word	0x20002c68
 8005dc4:	20002c6c 	.word	0x20002c6c

08005dc8 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60ba      	str	r2, [r7, #8]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	81fb      	strh	r3, [r7, #14]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	81bb      	strh	r3, [r7, #12]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8005dde:	2301      	movs	r3, #1
 8005de0:	83fb      	strh	r3, [r7, #30]
 8005de2:	2300      	movs	r3, #0
 8005de4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8005df2:	e002      	b.n	8005dfa <BSP_LCD_DisplayStringAt+0x32>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	3301      	adds	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	617a      	str	r2, [r7, #20]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f6      	bne.n	8005df4 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005e06:	f7ff fe75 	bl	8005af4 <BSP_LCD_GetXSize>
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <BSP_LCD_DisplayStringAt+0x188>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4850      	ldr	r0, [pc, #320]	; (8005f54 <BSP_LCD_DisplayStringAt+0x18c>)
 8005e12:	4613      	mov	r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4403      	add	r3, r0
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	889b      	ldrh	r3, [r3, #4]
 8005e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e26:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d01c      	beq.n	8005e68 <BSP_LCD_DisplayStringAt+0xa0>
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	dc33      	bgt.n	8005e9a <BSP_LCD_DisplayStringAt+0xd2>
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d002      	beq.n	8005e3c <BSP_LCD_DisplayStringAt+0x74>
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d019      	beq.n	8005e6e <BSP_LCD_DisplayStringAt+0xa6>
 8005e3a:	e02e      	b.n	8005e9a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	1ad1      	subs	r1, r2, r3
 8005e42:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <BSP_LCD_DisplayStringAt+0x188>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4843      	ldr	r0, [pc, #268]	; (8005f54 <BSP_LCD_DisplayStringAt+0x18c>)
 8005e48:	4613      	mov	r3, r2
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4403      	add	r3, r0
 8005e52:	3308      	adds	r3, #8
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	889b      	ldrh	r3, [r3, #4]
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	89fb      	ldrh	r3, [r7, #14]
 8005e62:	4413      	add	r3, r2
 8005e64:	83fb      	strh	r3, [r7, #30]
      break;
 8005e66:	e01b      	b.n	8005ea0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8005e68:	89fb      	ldrh	r3, [r7, #14]
 8005e6a:	83fb      	strh	r3, [r7, #30]
      break;
 8005e6c:	e018      	b.n	8005ea0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	b299      	uxth	r1, r3
 8005e76:	4b36      	ldr	r3, [pc, #216]	; (8005f50 <BSP_LCD_DisplayStringAt+0x188>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4836      	ldr	r0, [pc, #216]	; (8005f54 <BSP_LCD_DisplayStringAt+0x18c>)
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4403      	add	r3, r0
 8005e86:	3308      	adds	r3, #8
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	889b      	ldrh	r3, [r3, #4]
 8005e8c:	fb11 f303 	smulbb	r3, r1, r3
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	89fb      	ldrh	r3, [r7, #14]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	83fb      	strh	r3, [r7, #30]
      break;
 8005e98:	e002      	b.n	8005ea0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
 8005e9c:	83fb      	strh	r3, [r7, #30]
      break;
 8005e9e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8005ea0:	8bfb      	ldrh	r3, [r7, #30]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <BSP_LCD_DisplayStringAt+0xe6>
 8005ea6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da1d      	bge.n	8005eea <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005eb2:	e01a      	b.n	8005eea <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	89b9      	ldrh	r1, [r7, #12]
 8005eba:	8bfb      	ldrh	r3, [r7, #30]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff ff3f 	bl	8005d40 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8005ec2:	4b23      	ldr	r3, [pc, #140]	; (8005f50 <BSP_LCD_DisplayStringAt+0x188>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4923      	ldr	r1, [pc, #140]	; (8005f54 <BSP_LCD_DisplayStringAt+0x18c>)
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	889a      	ldrh	r2, [r3, #4]
 8005ed8:	8bfb      	ldrh	r3, [r7, #30]
 8005eda:	4413      	add	r3, r2
 8005edc:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60bb      	str	r3, [r7, #8]
    i++;
 8005ee4:	8bbb      	ldrh	r3, [r7, #28]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bf14      	ite	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	2300      	moveq	r3, #0
 8005ef6:	b2dc      	uxtb	r4, r3
 8005ef8:	f7ff fdfc 	bl	8005af4 <BSP_LCD_GetXSize>
 8005efc:	8bb9      	ldrh	r1, [r7, #28]
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <BSP_LCD_DisplayStringAt+0x188>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4d14      	ldr	r5, [pc, #80]	; (8005f54 <BSP_LCD_DisplayStringAt+0x18c>)
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	442b      	add	r3, r5
 8005f0e:	3308      	adds	r3, #8
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	889b      	ldrh	r3, [r3, #4]
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	1ac3      	subs	r3, r0, r3
 8005f1a:	b299      	uxth	r1, r3
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <BSP_LCD_DisplayStringAt+0x188>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	480c      	ldr	r0, [pc, #48]	; (8005f54 <BSP_LCD_DisplayStringAt+0x18c>)
 8005f22:	4613      	mov	r3, r2
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4403      	add	r3, r0
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	889b      	ldrh	r3, [r3, #4]
 8005f32:	4299      	cmp	r1, r3
 8005f34:	bf2c      	ite	cs
 8005f36:	2301      	movcs	r3, #1
 8005f38:	2300      	movcc	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4023      	ands	r3, r4
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1b7      	bne.n	8005eb4 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20002c68 	.word	0x20002c68
 8005f54:	20002c6c 	.word	0x20002c6c

08005f58 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8005f58:	b590      	push	{r4, r7, lr}
 8005f5a:	b08b      	sub	sp, #44	; 0x2c
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	330a      	adds	r3, #10
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	330b      	adds	r3, #11
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	041b      	lsls	r3, r3, #16
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	330d      	adds	r3, #13
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	061b      	lsls	r3, r3, #24
 8005f9c:	4413      	add	r3, r2
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3312      	adds	r3, #18
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3313      	adds	r3, #19
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	441a      	add	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3315      	adds	r3, #21
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	061b      	lsls	r3, r3, #24
 8005fc4:	4413      	add	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3316      	adds	r3, #22
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3317      	adds	r3, #23
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	441a      	add	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3318      	adds	r3, #24
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	441a      	add	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3319      	adds	r3, #25
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	4413      	add	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	331c      	adds	r3, #28
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	331d      	adds	r3, #29
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	4413      	add	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8006004:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <BSP_LCD_DrawBitmap+0x15c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <BSP_LCD_DrawBitmap+0x160>)
 800600a:	2134      	movs	r1, #52	; 0x34
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	335c      	adds	r3, #92	; 0x5c
 8006014:	681c      	ldr	r4, [r3, #0]
 8006016:	f7ff fd6d 	bl	8005af4 <BSP_LCD_GetXSize>
 800601a:	4602      	mov	r2, r0
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	fb03 f202 	mul.w	r2, r3, r2
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4423      	add	r3, r4
 800602a:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3b20      	subs	r3, #32
 8006030:	2b07      	cmp	r3, #7
 8006032:	d802      	bhi.n	800603a <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	e008      	b.n	800604c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3b10      	subs	r3, #16
 800603e:	2b07      	cmp	r3, #7
 8006040:	d802      	bhi.n	8006048 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8006042:	2302      	movs	r3, #2
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	e001      	b.n	800604c <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8006048:	2301      	movs	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3b01      	subs	r3, #1
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	08d2      	lsrs	r2, r2, #3
 800605a:	fb03 f202 	mul.w	r2, r3, r2
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	4413      	add	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8006068:	2300      	movs	r3, #0
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
 800606c:	e018      	b.n	80060a0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 800606e:	6a39      	ldr	r1, [r7, #32]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f9f3 	bl	8006460 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 800607a:	f7ff fd3b 	bl	8005af4 <BSP_LCD_GetXSize>
 800607e:	4603      	mov	r3, r0
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	4413      	add	r3, r2
 8006086:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	08db      	lsrs	r3, r3, #3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	425b      	negs	r3, r3
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	3301      	adds	r3, #1
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
 80060a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3e2      	bcc.n	800606e <BSP_LCD_DrawBitmap+0x116>
  }
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	372c      	adds	r7, #44	; 0x2c
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20002c68 	.word	0x20002c68
 80060b8:	20002ba4 	.word	0x20002ba4

080060bc <BSP_LCD_SetBrightness>:
/**
  * @brief  Set the brightness value 
  * @param  BrightnessValue: [00: Min (black), 100 Max]
  */
void BSP_LCD_SetBrightness(uint8_t BrightnessValue)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	4603      	mov	r3, r0
 80060c4:	71fb      	strb	r3, [r7, #7]
  {
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&hdsi_discovery, 
                       LCD_OTM8009A_ID, 
                       DSI_DCS_SHORT_PKT_WRITE_P1, 
                       OTM8009A_CMD_WRDISBV, (uint16_t)(BrightnessValue * 255)/100);
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	0212      	lsls	r2, r2, #8
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	b29b      	uxth	r3, r3
    HAL_DSI_ShortWrite(&hdsi_discovery, 
 80060d2:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <BSP_LCD_SetBrightness+0x38>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	b29b      	uxth	r3, r3
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	2351      	movs	r3, #81	; 0x51
 80060e0:	2215      	movs	r2, #21
 80060e2:	2100      	movs	r1, #0
 80060e4:	4804      	ldr	r0, [pc, #16]	; (80060f8 <BSP_LCD_SetBrightness+0x3c>)
 80060e6:	f003 fca1 	bl	8009a2c <HAL_DSI_ShortWrite>
  }  
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	51eb851f 	.word	0x51eb851f
 80060f8:	20002c4c 	.word	0x20002c4c

080060fc <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af02      	add	r7, sp, #8
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d80d      	bhi.n	8006128 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	2215      	movs	r2, #21
 800611e:	2100      	movs	r1, #0
 8006120:	480a      	ldr	r0, [pc, #40]	; (800614c <DSI_IO_WriteCmd+0x50>)
 8006122:	f003 fc83 	bl	8009a2c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8006126:	e00d      	b.n	8006144 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	9200      	str	r2, [sp, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2239      	movs	r2, #57	; 0x39
 800613c:	2100      	movs	r1, #0
 800613e:	4803      	ldr	r0, [pc, #12]	; (800614c <DSI_IO_WriteCmd+0x50>)
 8006140:	f003 fc96 	bl	8009a70 <HAL_DSI_LongWrite>
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20002c4c 	.word	0x20002c4c

08006150 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8006154:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8006156:	4618      	mov	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006166:	4b32      	ldr	r3, [pc, #200]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	4a31      	ldr	r2, [pc, #196]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 800616c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006170:	6453      	str	r3, [r2, #68]	; 0x44
 8006172:	4b2f      	ldr	r3, [pc, #188]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 8006174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800617e:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	4a2b      	ldr	r2, [pc, #172]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 8006184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006188:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800618a:	4b29      	ldr	r3, [pc, #164]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	4a28      	ldr	r2, [pc, #160]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 8006190:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006194:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006196:	4b26      	ldr	r3, [pc, #152]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	4a25      	ldr	r2, [pc, #148]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 800619c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061a0:	6313      	str	r3, [r2, #48]	; 0x30
 80061a2:	4b23      	ldr	r3, [pc, #140]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061aa:	60bb      	str	r3, [r7, #8]
 80061ac:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80061ae:	4b20      	ldr	r3, [pc, #128]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	4a1f      	ldr	r2, [pc, #124]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061b8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80061ba:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	4a1c      	ldr	r2, [pc, #112]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061c4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80061c6:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	4a19      	ldr	r2, [pc, #100]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061d0:	6453      	str	r3, [r2, #68]	; 0x44
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80061de:	4b14      	ldr	r3, [pc, #80]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061e8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 80061ea:	4b11      	ldr	r3, [pc, #68]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	4a10      	ldr	r2, [pc, #64]	; (8006230 <BSP_LCD_MspInit+0xd0>)
 80061f0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80061f4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80061f6:	2200      	movs	r2, #0
 80061f8:	2103      	movs	r1, #3
 80061fa:	2058      	movs	r0, #88	; 0x58
 80061fc:	f001 fadc 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006200:	2058      	movs	r0, #88	; 0x58
 8006202:	f001 faf5 	bl	80077f0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8006206:	2200      	movs	r2, #0
 8006208:	2103      	movs	r1, #3
 800620a:	205a      	movs	r0, #90	; 0x5a
 800620c:	f001 fad4 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006210:	205a      	movs	r0, #90	; 0x5a
 8006212:	f001 faed 	bl	80077f0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8006216:	2200      	movs	r2, #0
 8006218:	2103      	movs	r1, #3
 800621a:	2062      	movs	r0, #98	; 0x62
 800621c:	f001 facc 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8006220:	2062      	movs	r0, #98	; 0x62
 8006222:	f001 fae5 	bl	80077f0 <HAL_NVIC_EnableIRQ>
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40023800 	.word	0x40023800

08006234 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006234:	b5b0      	push	{r4, r5, r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	603a      	str	r2, [r7, #0]
 800623e:	80fb      	strh	r3, [r7, #6]
 8006240:	460b      	mov	r3, r1
 8006242:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <BSP_LCD_DrawPixel+0x44>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a0c      	ldr	r2, [pc, #48]	; (800627c <BSP_LCD_DrawPixel+0x48>)
 800624a:	2134      	movs	r1, #52	; 0x34
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	4413      	add	r3, r2
 8006252:	335c      	adds	r3, #92	; 0x5c
 8006254:	681c      	ldr	r4, [r3, #0]
 8006256:	88bd      	ldrh	r5, [r7, #4]
 8006258:	f7ff fc4c 	bl	8005af4 <BSP_LCD_GetXSize>
 800625c:	4603      	mov	r3, r0
 800625e:	fb03 f205 	mul.w	r2, r3, r5
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4423      	add	r3, r4
 800626a:	461a      	mov	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bdb0      	pop	{r4, r5, r7, pc}
 8006278:	20002c68 	.word	0x20002c68
 800627c:	20002ba4 	.word	0x20002ba4

08006280 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	603a      	str	r2, [r7, #0]
 800628a:	80fb      	strh	r3, [r7, #6]
 800628c:	460b      	mov	r3, r1
 800628e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	2300      	movs	r3, #0
 8006296:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8006298:	4b53      	ldr	r3, [pc, #332]	; (80063e8 <DrawChar+0x168>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4953      	ldr	r1, [pc, #332]	; (80063ec <DrawChar+0x16c>)
 800629e:	4613      	mov	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	3308      	adds	r3, #8
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	88db      	ldrh	r3, [r3, #6]
 80062ae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80062b0:	4b4d      	ldr	r3, [pc, #308]	; (80063e8 <DrawChar+0x168>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	494d      	ldr	r1, [pc, #308]	; (80063ec <DrawChar+0x16c>)
 80062b6:	4613      	mov	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	3308      	adds	r3, #8
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	889b      	ldrh	r3, [r3, #4]
 80062c6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80062c8:	8a3b      	ldrh	r3, [r7, #16]
 80062ca:	3307      	adds	r3, #7
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	da00      	bge.n	80062d2 <DrawChar+0x52>
 80062d0:	3307      	adds	r3, #7
 80062d2:	10db      	asrs	r3, r3, #3
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	8a3b      	ldrh	r3, [r7, #16]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	e076      	b.n	80063d6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80062e8:	8a3b      	ldrh	r3, [r7, #16]
 80062ea:	3307      	adds	r3, #7
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da00      	bge.n	80062f2 <DrawChar+0x72>
 80062f0:	3307      	adds	r3, #7
 80062f2:	10db      	asrs	r3, r3, #3
 80062f4:	461a      	mov	r2, r3
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	fb02 f303 	mul.w	r3, r2, r3
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	4413      	add	r3, r2
 8006300:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8006302:	8a3b      	ldrh	r3, [r7, #16]
 8006304:	3307      	adds	r3, #7
 8006306:	2b00      	cmp	r3, #0
 8006308:	da00      	bge.n	800630c <DrawChar+0x8c>
 800630a:	3307      	adds	r3, #7
 800630c:	10db      	asrs	r3, r3, #3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d002      	beq.n	8006318 <DrawChar+0x98>
 8006312:	2b02      	cmp	r3, #2
 8006314:	d004      	beq.n	8006320 <DrawChar+0xa0>
 8006316:	e00c      	b.n	8006332 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	617b      	str	r3, [r7, #20]
      break;
 800631e:	e016      	b.n	800634e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	3201      	adds	r2, #1
 800632a:	7812      	ldrb	r2, [r2, #0]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
      break;
 8006330:	e00d      	b.n	800634e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	041a      	lsls	r2, r3, #16
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	3301      	adds	r3, #1
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	4313      	orrs	r3, r2
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	3202      	adds	r2, #2
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
      break;
 800634c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e036      	b.n	80063c2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8006354:	8a3a      	ldrh	r2, [r7, #16]
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	1ad2      	subs	r2, r2, r3
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	4413      	add	r3, r2
 800635e:	3b01      	subs	r3, #1
 8006360:	2201      	movs	r2, #1
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	461a      	mov	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d012      	beq.n	8006396 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	b29a      	uxth	r2, r3
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	4413      	add	r3, r2
 8006378:	b298      	uxth	r0, r3
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <DrawChar+0x168>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	491b      	ldr	r1, [pc, #108]	; (80063ec <DrawChar+0x16c>)
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	88bb      	ldrh	r3, [r7, #4]
 800638e:	4619      	mov	r1, r3
 8006390:	f7ff ff50 	bl	8006234 <BSP_LCD_DrawPixel>
 8006394:	e012      	b.n	80063bc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	b29a      	uxth	r2, r3
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	4413      	add	r3, r2
 800639e:	b298      	uxth	r0, r3
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <DrawChar+0x168>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4911      	ldr	r1, [pc, #68]	; (80063ec <DrawChar+0x16c>)
 80063a6:	4613      	mov	r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	3304      	adds	r3, #4
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	88bb      	ldrh	r3, [r7, #4]
 80063b6:	4619      	mov	r1, r3
 80063b8:	f7ff ff3c 	bl	8006234 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	3301      	adds	r3, #1
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	8a3b      	ldrh	r3, [r7, #16]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d3c4      	bcc.n	8006354 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80063ca:	88bb      	ldrh	r3, [r7, #4]
 80063cc:	3301      	adds	r3, #1
 80063ce:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	3301      	adds	r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	8a7b      	ldrh	r3, [r7, #18]
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d384      	bcc.n	80062e8 <DrawChar+0x68>
  }
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20002c68 	.word	0x20002c68
 80063ec:	20002c6c 	.word	0x20002c6c

080063f0 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80063fe:	4b16      	ldr	r3, [pc, #88]	; (8006458 <LL_FillBuffer+0x68>)
 8006400:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006404:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8006406:	4b14      	ldr	r3, [pc, #80]	; (8006458 <LL_FillBuffer+0x68>)
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 800640c:	4a12      	ldr	r2, [pc, #72]	; (8006458 <LL_FillBuffer+0x68>)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <LL_FillBuffer+0x68>)
 8006414:	4a11      	ldr	r2, [pc, #68]	; (800645c <LL_FillBuffer+0x6c>)
 8006416:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8006418:	480f      	ldr	r0, [pc, #60]	; (8006458 <LL_FillBuffer+0x68>)
 800641a:	f001 fee7 	bl	80081ec <HAL_DMA2D_Init>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d115      	bne.n	8006450 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8006424:	68f9      	ldr	r1, [r7, #12]
 8006426:	480c      	ldr	r0, [pc, #48]	; (8006458 <LL_FillBuffer+0x68>)
 8006428:	f002 f95e 	bl	80086e8 <HAL_DMA2D_ConfigLayer>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10e      	bne.n	8006450 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69f9      	ldr	r1, [r7, #28]
 800643c:	4806      	ldr	r0, [pc, #24]	; (8006458 <LL_FillBuffer+0x68>)
 800643e:	f001 ff2f 	bl	80082a0 <HAL_DMA2D_Start>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d103      	bne.n	8006450 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8006448:	210a      	movs	r1, #10
 800644a:	4803      	ldr	r0, [pc, #12]	; (8006458 <LL_FillBuffer+0x68>)
 800644c:	f001 ff53 	bl	80082f6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20002b4c 	.word	0x20002b4c
 800645c:	4002b000 	.word	0x4002b000

08006460 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 800646e:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 8006470:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006474:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 8006478:	2200      	movs	r2, #0
 800647a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 800647c:	4b18      	ldr	r3, [pc, #96]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 800647e:	2200      	movs	r2, #0
 8006480:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006482:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 8006484:	2200      	movs	r2, #0
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8006488:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 800648a:	22ff      	movs	r2, #255	; 0xff
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 800648e:	4a14      	ldr	r2, [pc, #80]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8006494:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 8006496:	2200      	movs	r2, #0
 8006498:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 800649a:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 800649c:	4a11      	ldr	r2, [pc, #68]	; (80064e4 <LL_ConvertLineToARGB8888+0x84>)
 800649e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80064a0:	480f      	ldr	r0, [pc, #60]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 80064a2:	f001 fea3 	bl	80081ec <HAL_DMA2D_Init>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d115      	bne.n	80064d8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 80064ac:	2101      	movs	r1, #1
 80064ae:	480c      	ldr	r0, [pc, #48]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 80064b0:	f002 f91a 	bl	80086e8 <HAL_DMA2D_ConfigLayer>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10e      	bne.n	80064d8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	2301      	movs	r3, #1
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4806      	ldr	r0, [pc, #24]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 80064c6:	f001 feeb 	bl	80082a0 <HAL_DMA2D_Start>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80064d0:	210a      	movs	r1, #10
 80064d2:	4803      	ldr	r0, [pc, #12]	; (80064e0 <LL_ConvertLineToARGB8888+0x80>)
 80064d4:	f001 ff0f 	bl	80082f6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80064d8:	bf00      	nop
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20002b4c 	.word	0x20002b4c
 80064e4:	4002b000 	.word	0x4002b000

080064e8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80064ee:	4b34      	ldr	r3, [pc, #208]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 80064f0:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <BSP_QSPI_Init+0xdc>)
 80064f2:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80064f4:	4832      	ldr	r0, [pc, #200]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 80064f6:	f005 f929 	bl	800b74c <HAL_QSPI_DeInit>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e059      	b.n	80065b8 <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8006504:	2100      	movs	r1, #0
 8006506:	482e      	ldr	r0, [pc, #184]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006508:	f000 f890 	bl	800662c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 800650c:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 800650e:	2201      	movs	r2, #1
 8006510:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 8006512:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006514:	2210      	movs	r2, #16
 8006516:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 8006518:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 800651a:	2210      	movs	r2, #16
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006522:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	fa93 f3a3 	rbit	r3, r3
 800652a:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800652c:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 800652e:	fab3 f383 	clz	r3, r3
 8006532:	b2db      	uxtb	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	461a      	mov	r2, r3
 8006538:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 800653a:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 800653e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006542:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006544:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006546:	2200      	movs	r2, #0
 8006548:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 800654c:	2200      	movs	r2, #0
 800654e:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8006550:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006552:	2200      	movs	r2, #0
 8006554:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8006556:	481a      	ldr	r0, [pc, #104]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006558:	f005 f87c 	bl	800b654 <HAL_QSPI_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e028      	b.n	80065b8 <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8006566:	4816      	ldr	r0, [pc, #88]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006568:	f000 f922 	bl	80067b0 <QSPI_ResetMemory>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8006572:	2304      	movs	r3, #4
 8006574:	e020      	b.n	80065b8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8006576:	4812      	ldr	r0, [pc, #72]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006578:	f000 fb39 	bl	8006bee <QSPI_EnterMemory_QPI>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8006582:	2304      	movs	r3, #4
 8006584:	e018      	b.n	80065b8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8006586:	480e      	ldr	r0, [pc, #56]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006588:	f000 fa3a 	bl	8006a00 <QSPI_EnterFourBytesAddress>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 8006592:	2304      	movs	r3, #4
 8006594:	e010      	b.n	80065b8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8006596:	480a      	ldr	r0, [pc, #40]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 8006598:	f000 fa6d 	bl	8006a76 <QSPI_DummyCyclesCfg>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 80065a2:	2304      	movs	r3, #4
 80065a4:	e008      	b.n	80065b8 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 80065a6:	4806      	ldr	r0, [pc, #24]	; (80065c0 <BSP_QSPI_Init+0xd8>)
 80065a8:	f000 fb6e 	bl	8006c88 <QSPI_OutDrvStrengthCfg>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 80065b2:	2304      	movs	r3, #4
 80065b4:	e000      	b.n	80065b8 <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20002d14 	.word	0x20002d14
 80065c4:	a0001000 	.word	0xa0001000

080065c8 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b090      	sub	sp, #64	; 0x40
 80065cc:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80065ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80065d2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 80065d4:	23ec      	movs	r3, #236	; 0xec
 80065d6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80065d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80065de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80065e2:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80065e8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80065ee:	230a      	movs	r3, #10
 80065f0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80065f6:	2300      	movs	r3, #0
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80065fa:	2300      	movs	r3, #0
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80065fe:	2300      	movs	r3, #0
 8006600:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006606:	463a      	mov	r2, r7
 8006608:	f107 0308 	add.w	r3, r7, #8
 800660c:	4619      	mov	r1, r3
 800660e:	4806      	ldr	r0, [pc, #24]	; (8006628 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8006610:	f005 fac4 	bl	800bb9c <HAL_QSPI_MemoryMapped>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3740      	adds	r7, #64	; 0x40
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20002d14 	.word	0x20002d14

0800662c <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006636:	4b59      	ldr	r3, [pc, #356]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	4a58      	ldr	r2, [pc, #352]	; (800679c <BSP_QSPI_MspInit+0x170>)
 800663c:	f043 0302 	orr.w	r3, r3, #2
 8006640:	6393      	str	r3, [r2, #56]	; 0x38
 8006642:	4b56      	ldr	r3, [pc, #344]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800664e:	4b53      	ldr	r3, [pc, #332]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	4a52      	ldr	r2, [pc, #328]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006654:	f043 0302 	orr.w	r3, r3, #2
 8006658:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 800665a:	4b50      	ldr	r3, [pc, #320]	; (800679c <BSP_QSPI_MspInit+0x170>)
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	4a4f      	ldr	r2, [pc, #316]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006660:	f023 0302 	bic.w	r3, r3, #2
 8006664:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8006666:	4b4d      	ldr	r3, [pc, #308]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	4a4c      	ldr	r2, [pc, #304]	; (800679c <BSP_QSPI_MspInit+0x170>)
 800666c:	f043 0302 	orr.w	r3, r3, #2
 8006670:	6313      	str	r3, [r2, #48]	; 0x30
 8006672:	4b4a      	ldr	r3, [pc, #296]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800667e:	4b47      	ldr	r3, [pc, #284]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	4a46      	ldr	r2, [pc, #280]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	6313      	str	r3, [r2, #48]	; 0x30
 800668a:	4b44      	ldr	r3, [pc, #272]	; (800679c <BSP_QSPI_MspInit+0x170>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8006696:	4b41      	ldr	r3, [pc, #260]	; (800679c <BSP_QSPI_MspInit+0x170>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a40      	ldr	r2, [pc, #256]	; (800679c <BSP_QSPI_MspInit+0x170>)
 800669c:	f043 0304 	orr.w	r3, r3, #4
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b3e      	ldr	r3, [pc, #248]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 80066ae:	4b3b      	ldr	r3, [pc, #236]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	4a3a      	ldr	r2, [pc, #232]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066b4:	f043 0304 	orr.w	r3, r3, #4
 80066b8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ba:	4b38      	ldr	r3, [pc, #224]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80066c6:	4b35      	ldr	r3, [pc, #212]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	4a34      	ldr	r2, [pc, #208]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066cc:	f043 0310 	orr.w	r3, r3, #16
 80066d0:	6313      	str	r3, [r2, #48]	; 0x30
 80066d2:	4b32      	ldr	r3, [pc, #200]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 80066de:	4b2f      	ldr	r3, [pc, #188]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	4a2e      	ldr	r2, [pc, #184]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066e4:	f043 0308 	orr.w	r3, r3, #8
 80066e8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ea:	4b2c      	ldr	r3, [pc, #176]	; (800679c <BSP_QSPI_MspInit+0x170>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	60bb      	str	r3, [r7, #8]
 80066f4:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 80066fa:	230a      	movs	r3, #10
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80066fe:	2302      	movs	r3, #2
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006702:	2301      	movs	r3, #1
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006706:	2302      	movs	r3, #2
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800670a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800670e:	4619      	mov	r1, r3
 8006710:	4823      	ldr	r0, [pc, #140]	; (80067a0 <BSP_QSPI_MspInit+0x174>)
 8006712:	f003 fa73 	bl	8009bfc <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8006716:	2304      	movs	r3, #4
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 800671a:	2309      	movs	r3, #9
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800671e:	2300      	movs	r3, #0
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006726:	4619      	mov	r1, r3
 8006728:	481d      	ldr	r0, [pc, #116]	; (80067a0 <BSP_QSPI_MspInit+0x174>)
 800672a:	f003 fa67 	bl	8009bfc <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800672e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8006734:	2309      	movs	r3, #9
 8006736:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8006738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673c:	4619      	mov	r1, r3
 800673e:	4819      	ldr	r0, [pc, #100]	; (80067a4 <BSP_QSPI_MspInit+0x178>)
 8006740:	f003 fa5c 	bl	8009bfc <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8006744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 800674a:	2309      	movs	r3, #9
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800674e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006752:	4619      	mov	r1, r3
 8006754:	4813      	ldr	r0, [pc, #76]	; (80067a4 <BSP_QSPI_MspInit+0x178>)
 8006756:	f003 fa51 	bl	8009bfc <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800675a:	2304      	movs	r3, #4
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 800675e:	2309      	movs	r3, #9
 8006760:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8006762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006766:	4619      	mov	r1, r3
 8006768:	480f      	ldr	r0, [pc, #60]	; (80067a8 <BSP_QSPI_MspInit+0x17c>)
 800676a:	f003 fa47 	bl	8009bfc <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800676e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8006774:	2309      	movs	r3, #9
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8006778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800677c:	4619      	mov	r1, r3
 800677e:	480b      	ldr	r0, [pc, #44]	; (80067ac <BSP_QSPI_MspInit+0x180>)
 8006780:	f003 fa3c 	bl	8009bfc <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8006784:	2200      	movs	r2, #0
 8006786:	210f      	movs	r1, #15
 8006788:	205c      	movs	r0, #92	; 0x5c
 800678a:	f001 f815 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800678e:	205c      	movs	r0, #92	; 0x5c
 8006790:	f001 f82e 	bl	80077f0 <HAL_NVIC_EnableIRQ>
}
 8006794:	bf00      	nop
 8006796:	3738      	adds	r7, #56	; 0x38
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40023800 	.word	0x40023800
 80067a0:	40020400 	.word	0x40020400
 80067a4:	40020800 	.word	0x40020800
 80067a8:	40021000 	.word	0x40021000
 80067ac:	40020c00 	.word	0x40020c00

080067b0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b098      	sub	sp, #96	; 0x60
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80067b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067bc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 80067be:	2366      	movs	r3, #102	; 0x66
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80067d6:	2300      	movs	r3, #0
 80067d8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80067da:	2300      	movs	r3, #0
 80067dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f004 ffd3 	bl	800b794 <HAL_QSPI_Command>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0ff      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80067f8:	2399      	movs	r3, #153	; 0x99
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006800:	f241 3288 	movw	r2, #5000	; 0x1388
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f004 ffc4 	bl	800b794 <HAL_QSPI_Command>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e0f0      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800681a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 800681c:	2366      	movs	r3, #102	; 0x66
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006824:	f241 3288 	movw	r2, #5000	; 0x1388
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f004 ffb2 	bl	800b794 <HAL_QSPI_Command>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0de      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 800683a:	2399      	movs	r3, #153	; 0x99
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800683e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006842:	f241 3288 	movw	r2, #5000	; 0x1388
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f004 ffa3 	bl	800b794 <HAL_QSPI_Command>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0cf      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8006858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800685c:	f000 feac 	bl	80075b8 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006868:	2300      	movs	r3, #0
 800686a:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 800686c:	2301      	movs	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8006870:	2310      	movs	r3, #16
 8006872:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006878:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800687a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800687e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8006880:	2305      	movs	r3, #5
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8006884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006888:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800688a:	f107 0210 	add.w	r2, r7, #16
 800688e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006892:	f241 3388 	movw	r3, #5000	; 0x1388
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f005 f909 	bl	800baae <HAL_QSPI_AutoPolling>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e0a8      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80068a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068aa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80068ac:	2305      	movs	r3, #5
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80068b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 80068c2:	2301      	movs	r3, #1
 80068c4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80068c6:	2300      	movs	r3, #0
 80068c8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80068ca:	2300      	movs	r3, #0
 80068cc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80068ce:	2300      	movs	r3, #0
 80068d0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80068d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f004 ff59 	bl	800b794 <HAL_QSPI_Command>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e085      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80068ec:	f107 030f 	add.w	r3, r7, #15
 80068f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f005 f83c 	bl	800b974 <HAL_QSPI_Receive>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e078      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800690a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800690c:	2306      	movs	r3, #6
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006910:	2300      	movs	r3, #0
 8006912:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006914:	2300      	movs	r3, #0
 8006916:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8006918:	2300      	movs	r3, #0
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006920:	2300      	movs	r3, #0
 8006922:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006924:	2300      	movs	r3, #0
 8006926:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006928:	2300      	movs	r3, #0
 800692a:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800692c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006930:	f241 3288 	movw	r2, #5000	; 0x1388
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f004 ff2c 	bl	800b794 <HAL_QSPI_Command>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e058      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8006946:	2302      	movs	r3, #2
 8006948:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 800694a:	2302      	movs	r3, #2
 800694c:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800694e:	2300      	movs	r3, #0
 8006950:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8006952:	2301      	movs	r3, #1
 8006954:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8006956:	2310      	movs	r3, #16
 8006958:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800695a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800695e:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8006960:	2305      	movs	r3, #5
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8006964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006968:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800696a:	f107 0210 	add.w	r2, r7, #16
 800696e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006972:	f241 3388 	movw	r3, #5000	; 0x1388
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f005 f899 	bl	800baae <HAL_QSPI_AutoPolling>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e038      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800698a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800698c:	2301      	movs	r3, #1
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006990:	2300      	movs	r3, #0
 8006992:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006994:	2300      	movs	r3, #0
 8006996:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8006998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 80069a2:	2301      	movs	r3, #1
 80069a4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80069aa:	2300      	movs	r3, #0
 80069ac:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80069ae:	2300      	movs	r3, #0
 80069b0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80069bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f004 fee4 	bl	800b794 <HAL_QSPI_Command>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e010      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80069d6:	f107 030f 	add.w	r3, r7, #15
 80069da:	f241 3288 	movw	r2, #5000	; 0x1388
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f004 ff35 	bl	800b850 <HAL_QSPI_Transmit>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e003      	b.n	80069f8 <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 80069f0:	2028      	movs	r0, #40	; 0x28
 80069f2:	f000 fde1 	bl	80075b8 <HAL_Delay>

  return QSPI_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3760      	adds	r7, #96	; 0x60
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b090      	sub	sp, #64	; 0x40
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006a08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a0c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8006a0e:	23b7      	movs	r3, #183	; 0xb7
 8006a10:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9e6 	bl	8006e00 <QSPI_WriteEnable>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e017      	b.n	8006a6e <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006a3e:	f107 0308 	add.w	r3, r7, #8
 8006a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f004 fea3 	bl	800b794 <HAL_QSPI_Command>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e00a      	b.n	8006a6e <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8006a58:	f241 3188 	movw	r1, #5000	; 0x1388
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa18 	bl	8006e92 <QSPI_AutoPollingMemReady>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3740      	adds	r7, #64	; 0x40
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b094      	sub	sp, #80	; 0x50
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006a84:	2305      	movs	r3, #5
 8006a86:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006a90:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006aaa:	f107 0310 	add.w	r3, r7, #16
 8006aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f004 fe6d 	bl	800b794 <HAL_QSPI_Command>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e090      	b.n	8006be6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ac4:	f107 030c 	add.w	r3, r7, #12
 8006ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f004 ff50 	bl	800b974 <HAL_QSPI_Receive>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e083      	b.n	8006be6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8006ae4:	2315      	movs	r3, #21
 8006ae6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006af0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006b02:	2300      	movs	r3, #0
 8006b04:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006b06:	2300      	movs	r3, #0
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b0a:	f107 0310 	add.w	r3, r7, #16
 8006b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f004 fe3d 	bl	800b794 <HAL_QSPI_Command>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e060      	b.n	8006be6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f004 ff1f 	bl	800b974 <HAL_QSPI_Receive>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e052      	b.n	8006be6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f95d 	bl	8006e00 <QSPI_WriteEnable>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e04a      	b.n	8006be6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006b50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8006b56:	2301      	movs	r3, #1
 8006b58:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006b62:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006b74:	2300      	movs	r3, #0
 8006b76:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8006b7c:	7b7b      	ldrb	r3, [r7, #13]
 8006b7e:	b25b      	sxtb	r3, r3
 8006b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b84:	b25a      	sxtb	r2, r3
 8006b86:	23c0      	movs	r3, #192	; 0xc0
 8006b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	fa93 f3a3 	rbit	r3, r3
 8006b90:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b94:	fab3 f383 	clz	r3, r3
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	408b      	lsls	r3, r1
 8006ba0:	b25b      	sxtb	r3, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006baa:	f107 0310 	add.w	r3, r7, #16
 8006bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f004 fded 	bl	800b794 <HAL_QSPI_Command>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e010      	b.n	8006be6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f004 fe3e 	bl	800b850 <HAL_QSPI_Transmit>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e003      	b.n	8006be6 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8006bde:	2028      	movs	r0, #40	; 0x28
 8006be0:	f000 fcea 	bl	80075b8 <HAL_Delay>
  
  return QSPI_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3750      	adds	r7, #80	; 0x50
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b096      	sub	sp, #88	; 0x58
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 8006bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8006bfc:	2335      	movs	r3, #53	; 0x35
 8006bfe:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006c14:	2300      	movs	r3, #0
 8006c16:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c1c:	f107 0320 	add.w	r3, r7, #32
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f004 fdb4 	bl	800b794 <HAL_QSPI_Command>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e023      	b.n	8006c7e <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 8006c36:	2340      	movs	r3, #64	; 0x40
 8006c38:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8006c3a:	2341      	movs	r3, #65	; 0x41
 8006c3c:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8006c42:	2301      	movs	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8006c46:	2310      	movs	r3, #16
 8006c48:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006c4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c4e:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006c50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006c56:	2305      	movs	r3, #5
 8006c58:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006c5a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006c5e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c60:	f107 0208 	add.w	r2, r7, #8
 8006c64:	f107 0120 	add.w	r1, r7, #32
 8006c68:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f004 ff1e 	bl	800baae <HAL_QSPI_AutoPolling>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3758      	adds	r7, #88	; 0x58
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b094      	sub	sp, #80	; 0x50
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006c90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006c96:	2305      	movs	r3, #5
 8006c98:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006ca2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8006cac:	2301      	movs	r3, #1
 8006cae:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cbc:	f107 0310 	add.w	r3, r7, #16
 8006cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f004 fd64 	bl	800b794 <HAL_QSPI_Command>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e08d      	b.n	8006df2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cd6:	f107 030c 	add.w	r3, r7, #12
 8006cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f004 fe47 	bl	800b974 <HAL_QSPI_Receive>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e080      	b.n	8006df2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8006cf6:	2315      	movs	r3, #21
 8006cf8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006d02:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006d14:	2300      	movs	r3, #0
 8006d16:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d1c:	f107 0310 	add.w	r3, r7, #16
 8006d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f004 fd34 	bl	800b794 <HAL_QSPI_Command>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e05d      	b.n	8006df2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f004 fe16 	bl	800b974 <HAL_QSPI_Receive>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e04f      	b.n	8006df2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8006d52:	482a      	ldr	r0, [pc, #168]	; (8006dfc <QSPI_OutDrvStrengthCfg+0x174>)
 8006d54:	f000 f854 	bl	8006e00 <QSPI_WriteEnable>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e047      	b.n	8006df2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006d74:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006d86:	2300      	movs	r3, #0
 8006d88:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8006d8e:	7b7b      	ldrb	r3, [r7, #13]
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	b25a      	sxtb	r2, r3
 8006d98:	2307      	movs	r3, #7
 8006d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9e:	fa93 f3a3 	rbit	r3, r3
 8006da2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da6:	fab3 f383 	clz	r3, r3
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	4619      	mov	r1, r3
 8006dae:	2306      	movs	r3, #6
 8006db0:	408b      	lsls	r3, r1
 8006db2:	b25b      	sxtb	r3, r3
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b25b      	sxtb	r3, r3
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dbc:	f107 0310 	add.w	r3, r7, #16
 8006dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f004 fce4 	bl	800b794 <HAL_QSPI_Command>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e00d      	b.n	8006df2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dd6:	f107 030c 	add.w	r3, r7, #12
 8006dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f004 fd35 	bl	800b850 <HAL_QSPI_Transmit>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3750      	adds	r7, #80	; 0x50
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20002d14 	.word	0x20002d14

08006e00 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b096      	sub	sp, #88	; 0x58
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006e08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8006e0e:	2306      	movs	r3, #6
 8006e10:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006e12:	2300      	movs	r3, #0
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006e26:	2300      	movs	r3, #0
 8006e28:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e2e:	f107 0320 	add.w	r3, r7, #32
 8006e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f004 fcab 	bl	800b794 <HAL_QSPI_Command>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e020      	b.n	8006e8a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8006e54:	2301      	movs	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8006e58:	2310      	movs	r3, #16
 8006e5a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e60:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8006e62:	2305      	movs	r3, #5
 8006e64:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8006e66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006e6a:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e6c:	f107 0208 	add.w	r2, r7, #8
 8006e70:	f107 0120 	add.w	r1, r7, #32
 8006e74:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f004 fe18 	bl	800baae <HAL_QSPI_AutoPolling>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3758      	adds	r7, #88	; 0x58
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b096      	sub	sp, #88	; 0x58
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006e9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8006ea2:	2305      	movs	r3, #5
 8006ea4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006eae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006eb2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006ed8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006edc:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8006ede:	f107 0208 	add.w	r2, r7, #8
 8006ee2:	f107 0120 	add.w	r1, r7, #32
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f004 fde0 	bl	800baae <HAL_QSPI_AutoPolling>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3758      	adds	r7, #88	; 0x58
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006f08:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f0a:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <BSP_SDRAM_Init+0xb0>)
 8006f0c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006f0e:	4b2a      	ldr	r3, [pc, #168]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f10:	2202      	movs	r2, #2
 8006f12:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f16:	2207      	movs	r2, #7
 8006f18:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006f1a:	4b27      	ldr	r3, [pc, #156]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f1c:	2204      	movs	r2, #4
 8006f1e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f22:	2207      	movs	r2, #7
 8006f24:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006f26:	4b24      	ldr	r3, [pc, #144]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f28:	2202      	movs	r2, #2
 8006f2a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006f2c:	4b22      	ldr	r3, [pc, #136]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f2e:	2202      	movs	r2, #2
 8006f30:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006f32:	4b21      	ldr	r3, [pc, #132]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f34:	2202      	movs	r2, #2
 8006f36:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006f38:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006f3e:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006f44:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f46:	2204      	movs	r2, #4
 8006f48:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006f4a:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006f50:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f52:	2240      	movs	r2, #64	; 0x40
 8006f54:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006f56:	4b16      	ldr	r3, [pc, #88]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f58:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006f5c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006f5e:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006f64:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f6a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006f6c:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	480c      	ldr	r0, [pc, #48]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f7e:	f000 f87f 	bl	8007080 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006f82:	490d      	ldr	r1, [pc, #52]	; (8006fb8 <BSP_SDRAM_Init+0xb4>)
 8006f84:	480a      	ldr	r0, [pc, #40]	; (8006fb0 <BSP_SDRAM_Init+0xac>)
 8006f86:	f006 ffd4 	bl	800df32 <HAL_SDRAM_Init>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <BSP_SDRAM_Init+0xb8>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	e002      	b.n	8006f9e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006f98:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <BSP_SDRAM_Init+0xb8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006f9e:	f240 6003 	movw	r0, #1539	; 0x603
 8006fa2:	f000 f80d 	bl	8006fc0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <BSP_SDRAM_Init+0xb8>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20002d60 	.word	0x20002d60
 8006fb4:	a0000140 	.word	0xa0000140
 8006fb8:	20002d94 	.word	0x20002d94
 8006fbc:	200000a8 	.word	0x200000a8

08006fc0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006fd8:	4b27      	ldr	r3, [pc, #156]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006fde:	4b26      	ldr	r3, [pc, #152]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fe8:	4923      	ldr	r1, [pc, #140]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fea:	4824      	ldr	r0, [pc, #144]	; (800707c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fec:	f006 ffd5 	bl	800df9a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f000 fae1 	bl	80075b8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ffc:	4b1e      	ldr	r3, [pc, #120]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ffe:	2210      	movs	r2, #16
 8007000:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007002:	4b1d      	ldr	r3, [pc, #116]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007004:	2201      	movs	r2, #1
 8007006:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007008:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800700a:	2200      	movs	r2, #0
 800700c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800700e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007012:	4919      	ldr	r1, [pc, #100]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007014:	4819      	ldr	r0, [pc, #100]	; (800707c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007016:	f006 ffc0 	bl	800df9a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800701a:	4b17      	ldr	r3, [pc, #92]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800701c:	2203      	movs	r2, #3
 800701e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007020:	4b15      	ldr	r3, [pc, #84]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007022:	2210      	movs	r2, #16
 8007024:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007028:	2208      	movs	r2, #8
 800702a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800702c:	4b12      	ldr	r3, [pc, #72]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800702e:	2200      	movs	r2, #0
 8007030:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007036:	4910      	ldr	r1, [pc, #64]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007038:	4810      	ldr	r0, [pc, #64]	; (800707c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800703a:	f006 ffae 	bl	800df9a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800703e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8007042:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007046:	2204      	movs	r2, #4
 8007048:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800704a:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800704c:	2210      	movs	r2, #16
 800704e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007050:	4b09      	ldr	r3, [pc, #36]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007052:	2201      	movs	r2, #1
 8007054:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a07      	ldr	r2, [pc, #28]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800705a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800705c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007060:	4905      	ldr	r1, [pc, #20]	; (8007078 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007062:	4806      	ldr	r0, [pc, #24]	; (800707c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007064:	f006 ff99 	bl	800df9a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4804      	ldr	r0, [pc, #16]	; (800707c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800706c:	f006 ffca 	bl	800e004 <HAL_SDRAM_ProgramRefreshRate>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20002db0 	.word	0x20002db0
 800707c:	20002d60 	.word	0x20002d60

08007080 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007080:	b580      	push	{r7, lr}
 8007082:	b090      	sub	sp, #64	; 0x40
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800708a:	4b71      	ldr	r3, [pc, #452]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	4a70      	ldr	r2, [pc, #448]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	6393      	str	r3, [r2, #56]	; 0x38
 8007096:	4b6e      	ldr	r3, [pc, #440]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80070a2:	4b6b      	ldr	r3, [pc, #428]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	4a6a      	ldr	r2, [pc, #424]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070ac:	6313      	str	r3, [r2, #48]	; 0x30
 80070ae:	4b68      	ldr	r3, [pc, #416]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070ba:	4b65      	ldr	r3, [pc, #404]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	4a64      	ldr	r2, [pc, #400]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070c0:	f043 0308 	orr.w	r3, r3, #8
 80070c4:	6313      	str	r3, [r2, #48]	; 0x30
 80070c6:	4b62      	ldr	r3, [pc, #392]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	623b      	str	r3, [r7, #32]
 80070d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80070d2:	4b5f      	ldr	r3, [pc, #380]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	4a5e      	ldr	r2, [pc, #376]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070d8:	f043 0310 	orr.w	r3, r3, #16
 80070dc:	6313      	str	r3, [r2, #48]	; 0x30
 80070de:	4b5c      	ldr	r3, [pc, #368]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80070ea:	4b59      	ldr	r3, [pc, #356]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	4a58      	ldr	r2, [pc, #352]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070f0:	f043 0320 	orr.w	r3, r3, #32
 80070f4:	6313      	str	r3, [r2, #48]	; 0x30
 80070f6:	4b56      	ldr	r3, [pc, #344]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007102:	4b53      	ldr	r3, [pc, #332]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	4a52      	ldr	r2, [pc, #328]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710c:	6313      	str	r3, [r2, #48]	; 0x30
 800710e:	4b50      	ldr	r3, [pc, #320]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800711a:	4b4d      	ldr	r3, [pc, #308]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	4a4c      	ldr	r2, [pc, #304]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007124:	6313      	str	r3, [r2, #48]	; 0x30
 8007126:	4b4a      	ldr	r3, [pc, #296]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007132:	4b47      	ldr	r3, [pc, #284]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	4a46      	ldr	r2, [pc, #280]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713c:	6313      	str	r3, [r2, #48]	; 0x30
 800713e:	4b44      	ldr	r3, [pc, #272]	; (8007250 <BSP_SDRAM_MspInit+0x1d0>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800714a:	2302      	movs	r3, #2
 800714c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800714e:	2301      	movs	r3, #1
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8007152:	2303      	movs	r3, #3
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007156:	230c      	movs	r3, #12
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800715a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007164:	4619      	mov	r1, r3
 8007166:	483b      	ldr	r0, [pc, #236]	; (8007254 <BSP_SDRAM_MspInit+0x1d4>)
 8007168:	f002 fd48 	bl	8009bfc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800716c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007176:	4619      	mov	r1, r3
 8007178:	4837      	ldr	r0, [pc, #220]	; (8007258 <BSP_SDRAM_MspInit+0x1d8>)
 800717a:	f002 fd3f 	bl	8009bfc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800717e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007188:	4619      	mov	r1, r3
 800718a:	4834      	ldr	r0, [pc, #208]	; (800725c <BSP_SDRAM_MspInit+0x1dc>)
 800718c:	f002 fd36 	bl	8009bfc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8007190:	f248 1337 	movw	r3, #33079	; 0x8137
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800719a:	4619      	mov	r1, r3
 800719c:	4830      	ldr	r0, [pc, #192]	; (8007260 <BSP_SDRAM_MspInit+0x1e0>)
 800719e:	f002 fd2d 	bl	8009bfc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80071a2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80071a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071ac:	4619      	mov	r1, r3
 80071ae:	482d      	ldr	r0, [pc, #180]	; (8007264 <BSP_SDRAM_MspInit+0x1e4>)
 80071b0:	f002 fd24 	bl	8009bfc <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80071b4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80071ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071be:	4619      	mov	r1, r3
 80071c0:	4829      	ldr	r0, [pc, #164]	; (8007268 <BSP_SDRAM_MspInit+0x1e8>)
 80071c2:	f002 fd1b 	bl	8009bfc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80071c6:	4b29      	ldr	r3, [pc, #164]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80071cc:	4b27      	ldr	r3, [pc, #156]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071ce:	2280      	movs	r2, #128	; 0x80
 80071d0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80071d2:	4b26      	ldr	r3, [pc, #152]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80071da:	4b24      	ldr	r3, [pc, #144]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071e0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80071e2:	4b22      	ldr	r3, [pc, #136]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071e8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80071ea:	4b20      	ldr	r3, [pc, #128]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071f0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80071f2:	4b1e      	ldr	r3, [pc, #120]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 80071fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071fe:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007200:	4b1a      	ldr	r3, [pc, #104]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 8007202:	2200      	movs	r2, #0
 8007204:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007206:	4b19      	ldr	r3, [pc, #100]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 8007208:	2203      	movs	r2, #3
 800720a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800720c:	4b17      	ldr	r3, [pc, #92]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 800720e:	2200      	movs	r2, #0
 8007210:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007218:	4b14      	ldr	r3, [pc, #80]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 800721a:	4a15      	ldr	r2, [pc, #84]	; (8007270 <BSP_SDRAM_MspInit+0x1f0>)
 800721c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a12      	ldr	r2, [pc, #72]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
 8007224:	4a11      	ldr	r2, [pc, #68]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800722a:	4810      	ldr	r0, [pc, #64]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 800722c:	f000 fcb6 	bl	8007b9c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007230:	480e      	ldr	r0, [pc, #56]	; (800726c <BSP_SDRAM_MspInit+0x1ec>)
 8007232:	f000 fc05 	bl	8007a40 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007236:	2200      	movs	r2, #0
 8007238:	210f      	movs	r1, #15
 800723a:	2038      	movs	r0, #56	; 0x38
 800723c:	f000 fabc 	bl	80077b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007240:	2038      	movs	r0, #56	; 0x38
 8007242:	f000 fad5 	bl	80077f0 <HAL_NVIC_EnableIRQ>
}
 8007246:	bf00      	nop
 8007248:	3740      	adds	r7, #64	; 0x40
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40023800 	.word	0x40023800
 8007254:	40020c00 	.word	0x40020c00
 8007258:	40021000 	.word	0x40021000
 800725c:	40021400 	.word	0x40021400
 8007260:	40021800 	.word	0x40021800
 8007264:	40021c00 	.word	0x40021c00
 8007268:	40022000 	.word	0x40022000
 800726c:	20002dc0 	.word	0x20002dc0
 8007270:	40026410 	.word	0x40026410

08007274 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	460a      	mov	r2, r1
 800727e:	80fb      	strh	r3, [r7, #6]
 8007280:	4613      	mov	r3, r2
 8007282:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800728c:	4b25      	ldr	r3, [pc, #148]	; (8007324 <BSP_TS_Init+0xb0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a25      	ldr	r2, [pc, #148]	; (8007328 <BSP_TS_Init+0xb4>)
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	b292      	uxth	r2, r2
 8007296:	4610      	mov	r0, r2
 8007298:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800729a:	4b22      	ldr	r3, [pc, #136]	; (8007324 <BSP_TS_Init+0xb0>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2054      	movs	r0, #84	; 0x54
 80072a0:	4798      	blx	r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80072a6:	7b7b      	ldrb	r3, [r7, #13]
 80072a8:	2b11      	cmp	r3, #17
 80072aa:	d009      	beq.n	80072c0 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80072ac:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <BSP_TS_Init+0xb0>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2070      	movs	r0, #112	; 0x70
 80072b2:	4798      	blx	r3
 80072b4:	4603      	mov	r3, r0
 80072b6:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <BSP_TS_Init+0xb4>)
 80072ba:	2270      	movs	r2, #112	; 0x70
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80072c0:	4b19      	ldr	r3, [pc, #100]	; (8007328 <BSP_TS_Init+0xb4>)
 80072c2:	2254      	movs	r2, #84	; 0x54
 80072c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80072c6:	7b7b      	ldrb	r3, [r7, #13]
 80072c8:	2b11      	cmp	r3, #17
 80072ca:	d002      	beq.n	80072d2 <BSP_TS_Init+0x5e>
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b11      	cmp	r3, #17
 80072d0:	d121      	bne.n	8007316 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <BSP_TS_Init+0xb8>)
 80072d4:	4a13      	ldr	r2, [pc, #76]	; (8007324 <BSP_TS_Init+0xb0>)
 80072d6:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80072d8:	88fa      	ldrh	r2, [r7, #6]
 80072da:	88bb      	ldrh	r3, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d203      	bcs.n	80072e8 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80072e0:	4b13      	ldr	r3, [pc, #76]	; (8007330 <BSP_TS_Init+0xbc>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e002      	b.n	80072ee <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80072e8:	4b11      	ldr	r3, [pc, #68]	; (8007330 <BSP_TS_Init+0xbc>)
 80072ea:	220c      	movs	r2, #12
 80072ec:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d112      	bne.n	800731a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <BSP_TS_Init+0xb8>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	4a0b      	ldr	r2, [pc, #44]	; (8007328 <BSP_TS_Init+0xb4>)
 80072fc:	7812      	ldrb	r2, [r2, #0]
 80072fe:	b292      	uxth	r2, r2
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8007304:	4b09      	ldr	r3, [pc, #36]	; (800732c <BSP_TS_Init+0xb8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	4a07      	ldr	r2, [pc, #28]	; (8007328 <BSP_TS_Init+0xb4>)
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	b292      	uxth	r2, r2
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
    if(ts_status == TS_OK)
 8007314:	e001      	b.n	800731a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8007316:	2303      	movs	r3, #3
 8007318:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	2000002c 	.word	0x2000002c
 8007328:	20002e25 	.word	0x20002e25
 800732c:	20002e20 	.word	0x20002e20
 8007330:	20002e24 	.word	0x20002e24

08007334 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007334:	b590      	push	{r4, r7, lr}
 8007336:	b089      	sub	sp, #36	; 0x24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8007340:	4b81      	ldr	r3, [pc, #516]	; (8007548 <BSP_TS_GetState+0x214>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	4a81      	ldr	r2, [pc, #516]	; (800754c <BSP_TS_GetState+0x218>)
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	b292      	uxth	r2, r2
 800734c:	4610      	mov	r0, r2
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80ee 	beq.w	800753e <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	e0e3      	b.n	8007530 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8007368:	4b77      	ldr	r3, [pc, #476]	; (8007548 <BSP_TS_GetState+0x214>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	4a77      	ldr	r2, [pc, #476]	; (800754c <BSP_TS_GetState+0x218>)
 8007370:	7812      	ldrb	r2, [r2, #0]
 8007372:	b290      	uxth	r0, r2
 8007374:	f107 0110 	add.w	r1, r7, #16
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	0052      	lsls	r2, r2, #1
 800737c:	188c      	adds	r4, r1, r2
 800737e:	f107 010c 	add.w	r1, r7, #12
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	0052      	lsls	r2, r2, #1
 8007386:	440a      	add	r2, r1
 8007388:	4621      	mov	r1, r4
 800738a:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 800738c:	4b70      	ldr	r3, [pc, #448]	; (8007550 <BSP_TS_GetState+0x21c>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d019      	beq.n	80073cc <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	3320      	adds	r3, #32
 800739e:	443b      	add	r3, r7
 80073a0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80073a4:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	3320      	adds	r3, #32
 80073ac:	443b      	add	r3, r7
 80073ae:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	3320      	adds	r3, #32
 80073b8:	443b      	add	r3, r7
 80073ba:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	3320      	adds	r3, #32
 80073c4:	443b      	add	r3, r7
 80073c6:	8b3a      	ldrh	r2, [r7, #24]
 80073c8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80073cc:	4b60      	ldr	r3, [pc, #384]	; (8007550 <BSP_TS_GetState+0x21c>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00f      	beq.n	80073f8 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	3320      	adds	r3, #32
 80073de:	443b      	add	r3, r7
 80073e0:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80073e4:	f240 331f 	movw	r3, #799	; 0x31f
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	3320      	adds	r3, #32
 80073f2:	443b      	add	r3, r7
 80073f4:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80073f8:	4b55      	ldr	r3, [pc, #340]	; (8007550 <BSP_TS_GetState+0x21c>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00f      	beq.n	8007424 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	3320      	adds	r3, #32
 800740a:	443b      	add	r3, r7
 800740c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8007410:	f240 13df 	movw	r3, #479	; 0x1df
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	b29a      	uxth	r2, r3
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	3320      	adds	r3, #32
 800741e:	443b      	add	r3, r7
 8007420:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	3320      	adds	r3, #32
 800742a:	443b      	add	r3, r7
 800742c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8007430:	4619      	mov	r1, r3
 8007432:	4a48      	ldr	r2, [pc, #288]	; (8007554 <BSP_TS_GetState+0x220>)
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743a:	4299      	cmp	r1, r3
 800743c:	d90d      	bls.n	800745a <BSP_TS_GetState+0x126>
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	3320      	adds	r3, #32
 8007444:	443b      	add	r3, r7
 8007446:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800744a:	4942      	ldr	r1, [pc, #264]	; (8007554 <BSP_TS_GetState+0x220>)
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007452:	b29b      	uxth	r3, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	b29b      	uxth	r3, r3
 8007458:	e00c      	b.n	8007474 <BSP_TS_GetState+0x140>
 800745a:	4a3e      	ldr	r2, [pc, #248]	; (8007554 <BSP_TS_GetState+0x220>)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007462:	b29a      	uxth	r2, r3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	3320      	adds	r3, #32
 800746a:	443b      	add	r3, r7
 800746c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	b29b      	uxth	r3, r3
 8007474:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	3320      	adds	r3, #32
 800747c:	443b      	add	r3, r7
 800747e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8007482:	4619      	mov	r1, r3
 8007484:	4a34      	ldr	r2, [pc, #208]	; (8007558 <BSP_TS_GetState+0x224>)
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748c:	4299      	cmp	r1, r3
 800748e:	d90d      	bls.n	80074ac <BSP_TS_GetState+0x178>
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	3320      	adds	r3, #32
 8007496:	443b      	add	r3, r7
 8007498:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800749c:	492e      	ldr	r1, [pc, #184]	; (8007558 <BSP_TS_GetState+0x224>)
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	e00c      	b.n	80074c6 <BSP_TS_GetState+0x192>
 80074ac:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <BSP_TS_GetState+0x224>)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	3320      	adds	r3, #32
 80074bc:	443b      	add	r3, r7
 80074be:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80074c8:	8afa      	ldrh	r2, [r7, #22]
 80074ca:	8abb      	ldrh	r3, [r7, #20]
 80074cc:	4413      	add	r3, r2
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	dd15      	ble.n	80074fe <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	3320      	adds	r3, #32
 80074d8:	443b      	add	r3, r7
 80074da:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80074de:	4619      	mov	r1, r3
 80074e0:	4a1c      	ldr	r2, [pc, #112]	; (8007554 <BSP_TS_GetState+0x220>)
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	3320      	adds	r3, #32
 80074ee:	443b      	add	r3, r7
 80074f0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80074f4:	4619      	mov	r1, r3
 80074f6:	4a18      	ldr	r2, [pc, #96]	; (8007558 <BSP_TS_GetState+0x224>)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80074fe:	4a15      	ldr	r2, [pc, #84]	; (8007554 <BSP_TS_GetState+0x220>)
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007506:	b299      	uxth	r1, r3
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4413      	add	r3, r2
 8007510:	460a      	mov	r2, r1
 8007512:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8007514:	4a10      	ldr	r2, [pc, #64]	; (8007558 <BSP_TS_GetState+0x224>)
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800751c:	b299      	uxth	r1, r3
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	460a      	mov	r2, r1
 8007528:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3301      	adds	r3, #1
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4293      	cmp	r3, r2
 800753a:	f4ff af15 	bcc.w	8007368 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800753e:	7efb      	ldrb	r3, [r7, #27]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3724      	adds	r7, #36	; 0x24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd90      	pop	{r4, r7, pc}
 8007548:	20002e20 	.word	0x20002e20
 800754c:	20002e25 	.word	0x20002e25
 8007550:	20002e24 	.word	0x20002e24
 8007554:	20002e28 	.word	0x20002e28
 8007558:	20002e30 	.word	0x20002e30

0800755c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007560:	2003      	movs	r0, #3
 8007562:	f000 f91e 	bl	80077a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007566:	200f      	movs	r0, #15
 8007568:	f7fb fd12 	bl	8002f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800756c:	f7fb fce0 	bl	8002f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <HAL_IncTick+0x20>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	4b06      	ldr	r3, [pc, #24]	; (800759c <HAL_IncTick+0x24>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4413      	add	r3, r2
 8007588:	4a04      	ldr	r2, [pc, #16]	; (800759c <HAL_IncTick+0x24>)
 800758a:	6013      	str	r3, [r2, #0]
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	200000b0 	.word	0x200000b0
 800759c:	20002e38 	.word	0x20002e38

080075a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  return uwTick;
 80075a4:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <HAL_GetTick+0x14>)
 80075a6:	681b      	ldr	r3, [r3, #0]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20002e38 	.word	0x20002e38

080075b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80075c0:	f7ff ffee 	bl	80075a0 <HAL_GetTick>
 80075c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075d0:	d005      	beq.n	80075de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <HAL_Delay+0x44>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80075de:	bf00      	nop
 80075e0:	f7ff ffde 	bl	80075a0 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d8f7      	bhi.n	80075e0 <HAL_Delay+0x28>
  {
  }
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200000b0 	.word	0x200000b0

08007600 <__NVIC_SetPriorityGrouping>:
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <__NVIC_SetPriorityGrouping+0x40>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800761c:	4013      	ands	r3, r2
 800761e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <__NVIC_SetPriorityGrouping+0x44>)
 800762a:	4313      	orrs	r3, r2
 800762c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800762e:	4a04      	ldr	r2, [pc, #16]	; (8007640 <__NVIC_SetPriorityGrouping+0x40>)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	60d3      	str	r3, [r2, #12]
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	e000ed00 	.word	0xe000ed00
 8007644:	05fa0000 	.word	0x05fa0000

08007648 <__NVIC_GetPriorityGrouping>:
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800764c:	4b04      	ldr	r3, [pc, #16]	; (8007660 <__NVIC_GetPriorityGrouping+0x18>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	f003 0307 	and.w	r3, r3, #7
}
 8007656:	4618      	mov	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	e000ed00 	.word	0xe000ed00

08007664 <__NVIC_EnableIRQ>:
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800766e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007672:	2b00      	cmp	r3, #0
 8007674:	db0b      	blt.n	800768e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	f003 021f 	and.w	r2, r3, #31
 800767c:	4907      	ldr	r1, [pc, #28]	; (800769c <__NVIC_EnableIRQ+0x38>)
 800767e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	2001      	movs	r0, #1
 8007686:	fa00 f202 	lsl.w	r2, r0, r2
 800768a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	e000e100 	.word	0xe000e100

080076a0 <__NVIC_DisableIRQ>:
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	db12      	blt.n	80076d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	f003 021f 	and.w	r2, r3, #31
 80076b8:	490a      	ldr	r1, [pc, #40]	; (80076e4 <__NVIC_DisableIRQ+0x44>)
 80076ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	2001      	movs	r0, #1
 80076c2:	fa00 f202 	lsl.w	r2, r0, r2
 80076c6:	3320      	adds	r3, #32
 80076c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80076cc:	f3bf 8f4f 	dsb	sy
}
 80076d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80076d2:	f3bf 8f6f 	isb	sy
}
 80076d6:	bf00      	nop
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	e000e100 	.word	0xe000e100

080076e8 <__NVIC_SetPriority>:
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	db0a      	blt.n	8007712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	490c      	ldr	r1, [pc, #48]	; (8007734 <__NVIC_SetPriority+0x4c>)
 8007702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007706:	0112      	lsls	r2, r2, #4
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	440b      	add	r3, r1
 800770c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007710:	e00a      	b.n	8007728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	b2da      	uxtb	r2, r3
 8007716:	4908      	ldr	r1, [pc, #32]	; (8007738 <__NVIC_SetPriority+0x50>)
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	3b04      	subs	r3, #4
 8007720:	0112      	lsls	r2, r2, #4
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	440b      	add	r3, r1
 8007726:	761a      	strb	r2, [r3, #24]
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	e000e100 	.word	0xe000e100
 8007738:	e000ed00 	.word	0xe000ed00

0800773c <NVIC_EncodePriority>:
{
 800773c:	b480      	push	{r7}
 800773e:	b089      	sub	sp, #36	; 0x24
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f1c3 0307 	rsb	r3, r3, #7
 8007756:	2b04      	cmp	r3, #4
 8007758:	bf28      	it	cs
 800775a:	2304      	movcs	r3, #4
 800775c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	3304      	adds	r3, #4
 8007762:	2b06      	cmp	r3, #6
 8007764:	d902      	bls.n	800776c <NVIC_EncodePriority+0x30>
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	3b03      	subs	r3, #3
 800776a:	e000      	b.n	800776e <NVIC_EncodePriority+0x32>
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	fa02 f303 	lsl.w	r3, r2, r3
 800777a:	43da      	mvns	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	401a      	ands	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	fa01 f303 	lsl.w	r3, r1, r3
 800778e:	43d9      	mvns	r1, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007794:	4313      	orrs	r3, r2
}
 8007796:	4618      	mov	r0, r3
 8007798:	3724      	adds	r7, #36	; 0x24
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff ff28 	bl	8007600 <__NVIC_SetPriorityGrouping>
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077ca:	f7ff ff3d 	bl	8007648 <__NVIC_GetPriorityGrouping>
 80077ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	6978      	ldr	r0, [r7, #20]
 80077d6:	f7ff ffb1 	bl	800773c <NVIC_EncodePriority>
 80077da:	4602      	mov	r2, r0
 80077dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff ff80 	bl	80076e8 <__NVIC_SetPriority>
}
 80077e8:	bf00      	nop
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ff30 	bl	8007664 <__NVIC_EnableIRQ>
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff ff40 	bl	80076a0 <__NVIC_DisableIRQ>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e0ac      	b.n	8007994 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f000 f8b2 	bl	80079a8 <DFSDM_GetChannelFromInstance>
 8007844:	4603      	mov	r3, r0
 8007846:	4a55      	ldr	r2, [pc, #340]	; (800799c <HAL_DFSDM_ChannelInit+0x174>)
 8007848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e09f      	b.n	8007994 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7f9 fb9f 	bl	8000f98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800785a:	4b51      	ldr	r3, [pc, #324]	; (80079a0 <HAL_DFSDM_ChannelInit+0x178>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	4a4f      	ldr	r2, [pc, #316]	; (80079a0 <HAL_DFSDM_ChannelInit+0x178>)
 8007862:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8007864:	4b4e      	ldr	r3, [pc, #312]	; (80079a0 <HAL_DFSDM_ChannelInit+0x178>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d125      	bne.n	80078b8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800786c:	4b4d      	ldr	r3, [pc, #308]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a4c      	ldr	r2, [pc, #304]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007872:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007876:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007878:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	4948      	ldr	r1, [pc, #288]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007886:	4b47      	ldr	r3, [pc, #284]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a46      	ldr	r2, [pc, #280]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800788c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8007890:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d108      	bne.n	80078ac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 800789a:	4b42      	ldr	r3, [pc, #264]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	041b      	lsls	r3, r3, #16
 80078a6:	493f      	ldr	r1, [pc, #252]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80078ac:	4b3d      	ldr	r3, [pc, #244]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a3c      	ldr	r2, [pc, #240]	; (80079a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80078b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078b6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80078c6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6819      	ldr	r1, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80078d6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80078dc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 020f 	bic.w	r2, r2, #15
 80078f4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6819      	ldr	r1, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800791c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6899      	ldr	r1, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	3b01      	subs	r3, #1
 800792e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f002 0207 	and.w	r2, r2, #7
 8007948:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6859      	ldr	r1, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800795c:	431a      	orrs	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007974:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f810 	bl	80079a8 <DFSDM_GetChannelFromInstance>
 8007988:	4602      	mov	r2, r0
 800798a:	4904      	ldr	r1, [pc, #16]	; (800799c <HAL_DFSDM_ChannelInit+0x174>)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20002e40 	.word	0x20002e40
 80079a0:	20002e3c 	.word	0x20002e3c
 80079a4:	40017400 	.word	0x40017400

080079a8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <DFSDM_GetChannelFromInstance+0x7c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d102      	bne.n	80079be <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e02b      	b.n	8007a16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <DFSDM_GetChannelFromInstance+0x80>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d102      	bne.n	80079cc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80079c6:	2301      	movs	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e024      	b.n	8007a16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <DFSDM_GetChannelFromInstance+0x84>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d102      	bne.n	80079da <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80079d4:	2302      	movs	r3, #2
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e01d      	b.n	8007a16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a14      	ldr	r2, [pc, #80]	; (8007a30 <DFSDM_GetChannelFromInstance+0x88>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d102      	bne.n	80079e8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80079e2:	2303      	movs	r3, #3
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e016      	b.n	8007a16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a12      	ldr	r2, [pc, #72]	; (8007a34 <DFSDM_GetChannelFromInstance+0x8c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d102      	bne.n	80079f6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80079f0:	2304      	movs	r3, #4
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e00f      	b.n	8007a16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a0f      	ldr	r2, [pc, #60]	; (8007a38 <DFSDM_GetChannelFromInstance+0x90>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d102      	bne.n	8007a04 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80079fe:	2305      	movs	r3, #5
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e008      	b.n	8007a16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a0d      	ldr	r2, [pc, #52]	; (8007a3c <DFSDM_GetChannelFromInstance+0x94>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d102      	bne.n	8007a12 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8007a0c:	2306      	movs	r3, #6
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e001      	b.n	8007a16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8007a12:	2307      	movs	r3, #7
 8007a14:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007a16:	68fb      	ldr	r3, [r7, #12]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40017400 	.word	0x40017400
 8007a28:	40017420 	.word	0x40017420
 8007a2c:	40017440 	.word	0x40017440
 8007a30:	40017460 	.word	0x40017460
 8007a34:	40017480 	.word	0x40017480
 8007a38:	400174a0 	.word	0x400174a0
 8007a3c:	400174c0 	.word	0x400174c0

08007a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a4c:	f7ff fda8 	bl	80075a0 <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e099      	b.n	8007b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a7c:	e00f      	b.n	8007a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a7e:	f7ff fd8f 	bl	80075a0 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b05      	cmp	r3, #5
 8007a8a:	d908      	bls.n	8007a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2203      	movs	r2, #3
 8007a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e078      	b.n	8007b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e8      	bne.n	8007a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <HAL_DMA_Init+0x158>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d107      	bne.n	8007b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	4313      	orrs	r3, r2
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d117      	bne.n	8007b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00e      	beq.n	8007b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fad5 	bl	80080f4 <DMA_CheckFifoParam>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2240      	movs	r2, #64	; 0x40
 8007b54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e016      	b.n	8007b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa8c 	bl	8008088 <DMA_CalcBaseAndBitshift>
 8007b70:	4603      	mov	r3, r0
 8007b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b78:	223f      	movs	r2, #63	; 0x3f
 8007b7a:	409a      	lsls	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e010803f 	.word	0xe010803f

08007b9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e050      	b.n	8007c50 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d101      	bne.n	8007bbe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e048      	b.n	8007c50 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0201 	bic.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2221      	movs	r2, #33	; 0x21
 8007bfc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa42 	bl	8008088 <DMA_CalcBaseAndBitshift>
 8007c04:	4603      	mov	r3, r0
 8007c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	223f      	movs	r2, #63	; 0x3f
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_DMA_Start_IT+0x26>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e048      	b.n	8007d10 <HAL_DMA_Start_IT+0xb8>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d137      	bne.n	8007d02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2202      	movs	r2, #2
 8007c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f9c0 	bl	800802c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb0:	223f      	movs	r2, #63	; 0x3f
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0216 	orr.w	r2, r2, #22
 8007cc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695a      	ldr	r2, [r3, #20]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0208 	orr.w	r2, r2, #8
 8007cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0201 	orr.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e005      	b.n	8007d0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007d24:	4b8e      	ldr	r3, [pc, #568]	; (8007f60 <HAL_DMA_IRQHandler+0x248>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a8e      	ldr	r2, [pc, #568]	; (8007f64 <HAL_DMA_IRQHandler+0x24c>)
 8007d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2e:	0a9b      	lsrs	r3, r3, #10
 8007d30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d42:	2208      	movs	r2, #8
 8007d44:	409a      	lsls	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01a      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d013      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0204 	bic.w	r2, r2, #4
 8007d6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d70:	2208      	movs	r2, #8
 8007d72:	409a      	lsls	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7c:	f043 0201 	orr.w	r2, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d012      	beq.n	8007dba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da6:	2201      	movs	r2, #1
 8007da8:	409a      	lsls	r2, r3
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	f043 0202 	orr.w	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	409a      	lsls	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d012      	beq.n	8007df0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ddc:	2204      	movs	r2, #4
 8007dde:	409a      	lsls	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de8:	f043 0204 	orr.w	r2, r3, #4
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df4:	2210      	movs	r2, #16
 8007df6:	409a      	lsls	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d043      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d03c      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e12:	2210      	movs	r2, #16
 8007e14:	409a      	lsls	r2, r3
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d018      	beq.n	8007e5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d108      	bne.n	8007e48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d024      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
 8007e46:	e01f      	b.n	8007e88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01b      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
 8007e58:	e016      	b.n	8007e88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0208 	bic.w	r2, r2, #8
 8007e76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 808f 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8087 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eae:	2220      	movs	r2, #32
 8007eb0:	409a      	lsls	r2, r3
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d136      	bne.n	8007f30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0216 	bic.w	r2, r2, #22
 8007ed0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ee0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <HAL_DMA_IRQHandler+0x1da>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0208 	bic.w	r2, r2, #8
 8007f00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f06:	223f      	movs	r2, #63	; 0x3f
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d07e      	beq.n	8008024 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
        }
        return;
 8007f2e:	e079      	b.n	8008024 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01d      	beq.n	8007f7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10d      	bne.n	8007f68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d031      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
 8007f5c:	e02c      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
 8007f5e:	bf00      	nop
 8007f60:	20000028 	.word	0x20000028
 8007f64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d023      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
 8007f78:	e01e      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10f      	bne.n	8007fa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0210 	bic.w	r2, r2, #16
 8007f96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d032      	beq.n	8008026 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d022      	beq.n	8008012 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2205      	movs	r2, #5
 8007fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60bb      	str	r3, [r7, #8]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d307      	bcc.n	8008000 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f2      	bne.n	8007fe4 <HAL_DMA_IRQHandler+0x2cc>
 8007ffe:	e000      	b.n	8008002 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008000:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	e000      	b.n	8008026 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008024:	bf00      	nop
    }
  }
}
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008048:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	d108      	bne.n	800806c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800806a:	e007      	b.n	800807c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	3b10      	subs	r3, #16
 8008098:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <DMA_CalcBaseAndBitshift+0x60>)
 800809a:	fba2 2303 	umull	r2, r3, r2, r3
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80080a2:	4a12      	ldr	r2, [pc, #72]	; (80080ec <DMA_CalcBaseAndBitshift+0x64>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d908      	bls.n	80080c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <DMA_CalcBaseAndBitshift+0x68>)
 80080be:	4013      	ands	r3, r2
 80080c0:	1d1a      	adds	r2, r3, #4
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	659a      	str	r2, [r3, #88]	; 0x58
 80080c6:	e006      	b.n	80080d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <DMA_CalcBaseAndBitshift+0x68>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	aaaaaaab 	.word	0xaaaaaaab
 80080ec:	08015404 	.word	0x08015404
 80080f0:	fffffc00 	.word	0xfffffc00

080080f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d11f      	bne.n	800814e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b03      	cmp	r3, #3
 8008112:	d856      	bhi.n	80081c2 <DMA_CheckFifoParam+0xce>
 8008114:	a201      	add	r2, pc, #4	; (adr r2, 800811c <DMA_CheckFifoParam+0x28>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	0800812d 	.word	0x0800812d
 8008120:	0800813f 	.word	0x0800813f
 8008124:	0800812d 	.word	0x0800812d
 8008128:	080081c3 	.word	0x080081c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d046      	beq.n	80081c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800813c:	e043      	b.n	80081c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008146:	d140      	bne.n	80081ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800814c:	e03d      	b.n	80081ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008156:	d121      	bne.n	800819c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b03      	cmp	r3, #3
 800815c:	d837      	bhi.n	80081ce <DMA_CheckFifoParam+0xda>
 800815e:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <DMA_CheckFifoParam+0x70>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	08008175 	.word	0x08008175
 8008168:	0800817b 	.word	0x0800817b
 800816c:	08008175 	.word	0x08008175
 8008170:	0800818d 	.word	0x0800818d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
      break;
 8008178:	e030      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d025      	beq.n	80081d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800818a:	e022      	b.n	80081d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008194:	d11f      	bne.n	80081d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800819a:	e01c      	b.n	80081d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d903      	bls.n	80081aa <DMA_CheckFifoParam+0xb6>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d003      	beq.n	80081b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80081a8:	e018      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	73fb      	strb	r3, [r7, #15]
      break;
 80081ae:	e015      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00e      	beq.n	80081da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	73fb      	strb	r3, [r7, #15]
      break;
 80081c0:	e00b      	b.n	80081da <DMA_CheckFifoParam+0xe6>
      break;
 80081c2:	bf00      	nop
 80081c4:	e00a      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081c6:	bf00      	nop
 80081c8:	e008      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081ca:	bf00      	nop
 80081cc:	e006      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081ce:	bf00      	nop
 80081d0:	e004      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081d2:	bf00      	nop
 80081d4:	e002      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;   
 80081d6:	bf00      	nop
 80081d8:	e000      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081da:	bf00      	nop
    }
  } 
  
  return status; 
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e049      	b.n	8008292 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7f8 ff80 	bl	8001118 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823c:	f023 0107 	bic.w	r1, r3, #7
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <HAL_DMA2D_Init+0xb0>)
 8008254:	4013      	ands	r3, r2
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68d1      	ldr	r1, [r2, #12]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6812      	ldr	r2, [r2, #0]
 800825e:	430b      	orrs	r3, r1
 8008260:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	051a      	lsls	r2, r3, #20
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	055b      	lsls	r3, r3, #21
 8008278:	431a      	orrs	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	ffffc000 	.word	0xffffc000

080082a0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_DMA2D_Start+0x1c>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e018      	b.n	80082ee <HAL_DMA2D_Start+0x4e>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 faa4 	bl	8008824 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0201 	orr.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b086      	sub	sp, #24
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d056      	beq.n	80083c0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008312:	f7ff f945 	bl	80075a0 <HAL_GetTick>
 8008316:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008318:	e04b      	b.n	80083b2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008328:	2b00      	cmp	r3, #0
 800832a:	d023      	beq.n	8008374 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833a:	f043 0202 	orr.w	r2, r3, #2
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008350:	f043 0201 	orr.w	r2, r3, #1
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2221      	movs	r2, #33	; 0x21
 800835e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2204      	movs	r2, #4
 8008364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e0a5      	b.n	80084c0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800837a:	d01a      	beq.n	80083b2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800837c:	f7ff f910 	bl	80075a0 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d302      	bcc.n	8008392 <HAL_DMA2D_PollForTransfer+0x9c>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10f      	bne.n	80083b2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f043 0220 	orr.w	r2, r3, #32
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2203      	movs	r2, #3
 80083a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e086      	b.n	80084c0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0ac      	beq.n	800831a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d061      	beq.n	80084a6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80083e2:	f7ff f8dd 	bl	80075a0 <HAL_GetTick>
 80083e6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80083e8:	e056      	b.n	8008498 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d02e      	beq.n	800845a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f003 0308 	and.w	r3, r3, #8
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840a:	f043 0204 	orr.w	r2, r3, #4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008420:	f043 0202 	orr.w	r2, r3, #2
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008436:	f043 0201 	orr.w	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2229      	movs	r2, #41	; 0x29
 8008444:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2204      	movs	r2, #4
 800844a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e032      	b.n	80084c0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008460:	d01a      	beq.n	8008498 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008462:	f7ff f89d 	bl	80075a0 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d302      	bcc.n	8008478 <HAL_DMA2D_PollForTransfer+0x182>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10f      	bne.n	8008498 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847c:	f043 0220 	orr.w	r2, r3, #32
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2203      	movs	r2, #3
 8008488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e013      	b.n	80084c0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0a1      	beq.n	80083ea <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2212      	movs	r2, #18
 80084ac:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d026      	beq.n	8008538 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d021      	beq.n	8008538 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008502:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008508:	f043 0201 	orr.w	r2, r3, #1
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2201      	movs	r2, #1
 8008516:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2204      	movs	r2, #4
 800851c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d026      	beq.n	8008590 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d021      	beq.n	8008590 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800855a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2220      	movs	r2, #32
 8008562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008568:	f043 0202 	orr.w	r2, r3, #2
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2204      	movs	r2, #4
 8008574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d026      	beq.n	80085e8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d021      	beq.n	80085e8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085b2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2208      	movs	r2, #8
 80085ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c0:	f043 0204 	orr.w	r2, r3, #4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2204      	movs	r2, #4
 80085cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d013      	beq.n	800861a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00e      	beq.n	800861a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800860a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2204      	movs	r2, #4
 8008612:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f853 	bl	80086c0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d024      	beq.n	800866e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01f      	beq.n	800866e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800863c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2202      	movs	r2, #2
 8008644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0310 	and.w	r3, r3, #16
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01f      	beq.n	80086b8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01a      	beq.n	80086b8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008690:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2210      	movs	r2, #16
 8008698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f80e 	bl	80086d4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_DMA2D_ConfigLayer+0x20>
 8008704:	2302      	movs	r3, #2
 8008706:	e084      	b.n	8008812 <HAL_DMA2D_ConfigLayer+0x12a>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	4613      	mov	r3, r2
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	4413      	add	r3, r2
 8008720:	00db      	lsls	r3, r3, #3
 8008722:	3320      	adds	r3, #32
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	4413      	add	r3, r2
 8008728:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800873c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008748:	4b35      	ldr	r3, [pc, #212]	; (8008820 <HAL_DMA2D_ConfigLayer+0x138>)
 800874a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b0a      	cmp	r3, #10
 8008752:	d003      	beq.n	800875c <HAL_DMA2D_ConfigLayer+0x74>
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b09      	cmp	r3, #9
 800875a:	d107      	bne.n	800876c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]
 800876a:	e005      	b.n	8008778 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	061b      	lsls	r3, r3, #24
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d120      	bne.n	80087c0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	43db      	mvns	r3, r3
 8008788:	ea02 0103 	and.w	r1, r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	430a      	orrs	r2, r1
 8008794:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2b0a      	cmp	r3, #10
 80087a6:	d003      	beq.n	80087b0 <HAL_DMA2D_ConfigLayer+0xc8>
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b09      	cmp	r3, #9
 80087ae:	d127      	bne.n	8008800 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80087bc:	629a      	str	r2, [r3, #40]	; 0x28
 80087be:	e01f      	b.n	8008800 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69da      	ldr	r2, [r3, #28]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	43db      	mvns	r3, r3
 80087ca:	ea02 0103 	and.w	r1, r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2b0a      	cmp	r3, #10
 80087e8:	d003      	beq.n	80087f2 <HAL_DMA2D_ConfigLayer+0x10a>
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	d106      	bne.n	8008800 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80087fe:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	ff33000f 	.word	0xff33000f

08008824 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008824:	b480      	push	{r7}
 8008826:	b08b      	sub	sp, #44	; 0x2c
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008838:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	041a      	lsls	r2, r3, #16
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	431a      	orrs	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800885c:	d174      	bne.n	8008948 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008864:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800886c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008874:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	b2db      	uxtb	r3, r3
 800887a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d108      	bne.n	8008896 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	431a      	orrs	r2, r3
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	4313      	orrs	r3, r2
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	627b      	str	r3, [r7, #36]	; 0x24
 8008894:	e053      	b.n	800893e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d106      	bne.n	80088ac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
 80088aa:	e048      	b.n	800893e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d111      	bne.n	80088d8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	0cdb      	lsrs	r3, r3, #19
 80088b8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	0a9b      	lsrs	r3, r3, #10
 80088be:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	08db      	lsrs	r3, r3, #3
 80088c4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	02db      	lsls	r3, r3, #11
 80088ce:	4313      	orrs	r3, r2
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	627b      	str	r3, [r7, #36]	; 0x24
 80088d6:	e032      	b.n	800893e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d117      	bne.n	8008910 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	0fdb      	lsrs	r3, r3, #31
 80088e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	0cdb      	lsrs	r3, r3, #19
 80088ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	0adb      	lsrs	r3, r3, #11
 80088f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	08db      	lsrs	r3, r3, #3
 80088f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	029b      	lsls	r3, r3, #10
 8008900:	431a      	orrs	r2, r3
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	03db      	lsls	r3, r3, #15
 8008906:	4313      	orrs	r3, r2
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
 800890e:	e016      	b.n	800893e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	0f1b      	lsrs	r3, r3, #28
 8008914:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	0d1b      	lsrs	r3, r3, #20
 800891a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	0b1b      	lsrs	r3, r3, #12
 8008920:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	091b      	lsrs	r3, r3, #4
 8008926:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	011a      	lsls	r2, r3, #4
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	431a      	orrs	r2, r3
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	031b      	lsls	r3, r3, #12
 8008936:	4313      	orrs	r3, r2
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008944:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008946:	e003      	b.n	8008950 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	60da      	str	r2, [r3, #12]
}
 8008950:	bf00      	nop
 8008952:	372c      	adds	r7, #44	; 0x2c
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	019a      	lsls	r2, r3, #6
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	431a      	orrs	r2, r3
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	431a      	orrs	r2, r3
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	431a      	orrs	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008982:	bf00      	nop
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800899c:	f7fe fe00 	bl	80075a0 <HAL_GetTick>
 80089a0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80089a2:	e009      	b.n	80089b8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80089a4:	f7fe fdfc 	bl	80075a0 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089b2:	d901      	bls.n	80089b8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e015      	b.n	80089e4 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0ee      	beq.n	80089a4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	019a      	lsls	r2, r3, #6
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	ea42 0103 	orr.w	r1, r2, r3
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	041a      	lsls	r2, r3, #16
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b088      	sub	sp, #32
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e109      	b.n	8008c14 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7c5b      	ldrb	r3, [r3, #17]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7f8 fc9e 	bl	800134c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2203      	movs	r2, #3
 8008a14:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008a2a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a3a:	613b      	str	r3, [r7, #16]
 8008a3c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a3e:	f7fe fdaf 	bl	80075a0 <HAL_GetTick>
 8008a42:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008a44:	e009      	b.n	8008a5a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008a46:	f7fe fdab 	bl	80075a0 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a54:	d901      	bls.n	8008a5a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e0dc      	b.n	8008c14 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0ed      	beq.n	8008a46 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4b69      	ldr	r3, [pc, #420]	; (8008c1c <HAL_DSI_Init+0x230>)
 8008a78:	400b      	ands	r3, r1
 8008a7a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008a92:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008a9a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0201 	orr.w	r2, r2, #1
 8008aba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8008ace:	2001      	movs	r0, #1
 8008ad0:	f7fe fd72 	bl	80075b8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ad4:	f7fe fd64 	bl	80075a0 <HAL_GetTick>
 8008ad8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008ada:	e009      	b.n	8008af0 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008adc:	f7fe fd60 	bl	80075a0 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aea:	d901      	bls.n	8008af0 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e091      	b.n	8008c14 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0ed      	beq.n	8008adc <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0206 	orr.w	r2, r2, #6
 8008b10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0203 	bic.w	r2, r2, #3
 8008b24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0203 	bic.w	r2, r2, #3
 8008b52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689a      	ldr	r2, [r3, #8]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008b7a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6899      	ldr	r1, [r3, #8]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <HAL_DSI_Init+0x1b0>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	e000      	b.n	8008b9e <HAL_DSI_Init+0x1b2>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <HAL_DSI_Init+0x234>)
 8008ba4:	fb03 f202 	mul.w	r2, r3, r2
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	409a      	lsls	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008bd4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	fffc8603 	.word	0xfffc8603
 8008c20:	003d0900 	.word	0x003d0900

08008c24 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e066      	b.n	8008d04 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0208 	bic.w	r2, r2, #8
 8008c50:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8008c64:	2300      	movs	r3, #0
 8008c66:	613b      	str	r3, [r7, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0201 	bic.w	r2, r2, #1
 8008c76:	605a      	str	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0206 	bic.w	r2, r2, #6
 8008c96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0201 	bic.w	r2, r2, #1
 8008cae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008cd6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ce6:	60bb      	str	r3, [r7, #8]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7f8 fb7a 	bl	80013e4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	7c1b      	ldrb	r3, [r3, #16]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_DSI_ConfigErrorMonitor+0x16>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e0aa      	b.n	8008e78 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d009      	beq.n	8008d80 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8008d7c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0201 	orr.w	r2, r2, #1
 8008d9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f003 0308 	and.w	r3, r3, #8
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0202 	orr.w	r2, r2, #2
 8008db8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d009      	beq.n	8008dda <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 020c 	orr.w	r2, r2, #12
 8008dd6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0210 	orr.w	r2, r2, #16
 8008df4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f042 0220 	orr.w	r2, r2, #32
 8008e12:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d009      	beq.n	8008e34 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e30:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d009      	beq.n	8008e52 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e4e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d009      	beq.n	8008e70 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8008e6c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00f      	beq.n	8008ebc <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d007      	beq.n	8008ebc <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f8ad 	bl	8009016 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00f      	beq.n	8008eec <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7f9 fb48 	bl	800257c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 808c 	beq.w	800900e <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008efe:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008f16:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	4013      	ands	r3, r2
 8008f24:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	f043 0201 	orr.w	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	f043 0202 	orr.w	r2, r3, #2
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f043 0204 	orr.w	r2, r3, #4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	f043 0208 	orr.w	r2, r3, #8
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f003 030c 	and.w	r3, r3, #12
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d005      	beq.n	8008f92 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	f043 0210 	orr.w	r2, r3, #16
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	f043 0220 	orr.w	r2, r3, #32
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d005      	beq.n	8008fea <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f80e 	bl	800902a <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7c1b      	ldrb	r3, [r3, #16]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d101      	bne.n	8009054 <HAL_DSI_SetGenericVCID+0x16>
 8009050:	2302      	movs	r3, #2
 8009052:	e016      	b.n	8009082 <HAL_DSI_SetGenericVCID+0x44>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 0203 	bic.w	r2, r2, #3
 8009068:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
	...

08009090 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	7c1b      	ldrb	r3, [r3, #16]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d101      	bne.n	80090a6 <HAL_DSI_ConfigVideoMode+0x16>
 80090a2:	2302      	movs	r3, #2
 80090a4:	e1ee      	b.n	8009484 <HAL_DSI_ConfigVideoMode+0x3f4>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0201 	bic.w	r2, r2, #1
 80090ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0201 	bic.w	r2, r2, #1
 80090cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0203 	bic.w	r2, r2, #3
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b8b      	ldr	r3, [pc, #556]	; (800932c <HAL_DSI_ConfigVideoMode+0x29c>)
 80090fe:	400b      	ands	r3, r1
 8009100:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b84      	ldr	r3, [pc, #528]	; (8009330 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8009120:	400b      	ands	r3, r1
 8009122:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	695a      	ldr	r2, [r3, #20]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b7b      	ldr	r3, [pc, #492]	; (8009330 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8009142:	400b      	ands	r3, r1
 8009144:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0203 	bic.w	r2, r2, #3
 8009166:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68d9      	ldr	r1, [r3, #12]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695a      	ldr	r2, [r3, #20]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0207 	bic.w	r2, r2, #7
 8009188:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6959      	ldr	r1, [r3, #20]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	431a      	orrs	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691a      	ldr	r2, [r3, #16]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 020f 	bic.w	r2, r2, #15
 80091b6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6919      	ldr	r1, [r3, #16]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 020e 	bic.w	r2, r2, #14
 80091da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	005a      	lsls	r2, r3, #1
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d110      	bne.n	8009220 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800920c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6919      	ldr	r1, [r3, #16]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4b42      	ldr	r3, [pc, #264]	; (8009334 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800922c:	400b      	ands	r3, r1
 800922e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4b39      	ldr	r3, [pc, #228]	; (8009334 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800924e:	400b      	ands	r3, r1
 8009250:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4b32      	ldr	r3, [pc, #200]	; (8009338 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8009270:	400b      	ands	r3, r1
 8009272:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	4b2a      	ldr	r3, [pc, #168]	; (800933c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8009292:	400b      	ands	r3, r1
 8009294:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b22      	ldr	r3, [pc, #136]	; (800933c <HAL_DSI_ConfigVideoMode+0x2ac>)
 80092b4:	400b      	ands	r3, r1
 80092b6:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	4b19      	ldr	r3, [pc, #100]	; (800933c <HAL_DSI_ConfigVideoMode+0x2ac>)
 80092d6:	400b      	ands	r3, r1
 80092d8:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	4b0d      	ldr	r3, [pc, #52]	; (800932c <HAL_DSI_ConfigVideoMode+0x29c>)
 80092f8:	400b      	ands	r3, r1
 80092fa:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800931c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009328:	e00a      	b.n	8009340 <HAL_DSI_ConfigVideoMode+0x2b0>
 800932a:	bf00      	nop
 800932c:	ffffc000 	.word	0xffffc000
 8009330:	ffffe000 	.word	0xffffe000
 8009334:	fffff000 	.word	0xfffff000
 8009338:	ffff8000 	.word	0xffff8000
 800933c:	fffffc00 	.word	0xfffffc00
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8009356:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6999      	ldr	r1, [r3, #24]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009362:	041a      	lsls	r2, r3, #16
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	699a      	ldr	r2, [r3, #24]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800937a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6999      	ldr	r1, [r3, #24]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093be:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009402:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009424:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7c1b      	ldrb	r3, [r3, #16]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80094a2:	2302      	movs	r3, #2
 80094a4:	e0c5      	b.n	8009632 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0201 	orr.w	r2, r2, #1
 80094ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0201 	bic.w	r2, r2, #1
 80094cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f042 0201 	orr.w	r2, r2, #1
 80094e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0203 	bic.w	r2, r2, #3
 80094f2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68d9      	ldr	r1, [r3, #12]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	695a      	ldr	r2, [r3, #20]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0207 	bic.w	r2, r2, #7
 8009514:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6959      	ldr	r1, [r3, #20]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	69da      	ldr	r2, [r3, #28]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	431a      	orrs	r2, r3
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691a      	ldr	r2, [r3, #16]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 020f 	bic.w	r2, r2, #15
 8009542:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6919      	ldr	r1, [r3, #16]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 020e 	bic.w	r2, r2, #14
 8009566:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	005a      	lsls	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	4b2c      	ldr	r3, [pc, #176]	; (8009640 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800958e:	400b      	ands	r3, r1
 8009590:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80095b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	68da      	ldr	r2, [r3, #12]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	431a      	orrs	r2, r3
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80095d4:	431a      	orrs	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 0201 	bic.w	r2, r2, #1
 80095ee:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0202 	orr.w	r2, r2, #2
 8009626:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	ffff0000 	.word	0xffff0000

08009644 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	7c1b      	ldrb	r3, [r3, #16]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d101      	bne.n	800965a <HAL_DSI_ConfigCommand+0x16>
 8009656:	2302      	movs	r3, #2
 8009658:	e049      	b.n	80096ee <HAL_DSI_ConfigCommand+0xaa>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	4b24      	ldr	r3, [pc, #144]	; (80096fc <HAL_DSI_ConfigCommand+0xb8>)
 800966c:	400b      	ands	r3, r1
 800966e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800967e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8009684:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800968a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8009690:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8009696:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800969c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80096a2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80096a8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80096ae:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80096b4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80096ba:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0202 	bic.w	r2, r2, #2
 80096d2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	fef080ff 	.word	0xfef080ff

08009700 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7c1b      	ldrb	r3, [r3, #16]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <HAL_DSI_ConfigFlowControl+0x16>
 8009712:	2302      	movs	r3, #2
 8009714:	e016      	b.n	8009744 <HAL_DSI_ConfigFlowControl+0x44>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 021f 	bic.w	r2, r2, #31
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	430a      	orrs	r2, r1
 800973a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7c1b      	ldrb	r3, [r3, #16]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_DSI_ConfigPhyTimer+0x16>
 8009762:	2302      	movs	r3, #2
 8009764:	e058      	b.n	8009818 <HAL_DSI_ConfigPhyTimer+0xc8>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	4293      	cmp	r3, r2
 8009776:	bf38      	it	cc
 8009778:	4613      	movcc	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800978c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	041a      	lsls	r2, r3, #16
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80097ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	691a      	ldr	r2, [r3, #16]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	041b      	lsls	r3, r3, #16
 80097d0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80097f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	021a      	lsls	r2, r3, #8
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7c1b      	ldrb	r3, [r3, #16]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_DSI_ConfigHostTimeouts+0x16>
 8009836:	2302      	movs	r3, #2
 8009838:	e0b4      	b.n	80099a4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689a      	ldr	r2, [r3, #8]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800984e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6899      	ldr	r1, [r3, #8]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	021a      	lsls	r2, r3, #8
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	b292      	uxth	r2, r2
 8009870:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	041a      	lsls	r2, r3, #16
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b47      	ldr	r3, [pc, #284]	; (80099b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8009892:	400b      	ands	r3, r1
 8009894:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b3f      	ldr	r3, [pc, #252]	; (80099b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80098b4:	400b      	ands	r3, r1
 80098b6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b36      	ldr	r3, [pc, #216]	; (80099b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80098d8:	400b      	ands	r3, r1
 80098da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b2b      	ldr	r3, [pc, #172]	; (80099b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8009902:	400b      	ands	r3, r1
 8009904:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695a      	ldr	r2, [r3, #20]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	430a      	orrs	r2, r1
 800991a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800992e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	4b16      	ldr	r3, [pc, #88]	; (80099b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8009956:	400b      	ands	r3, r1
 8009958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	69da      	ldr	r2, [r3, #28]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8009980:	400b      	ands	r3, r1
 8009982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	6a1a      	ldr	r2, [r3, #32]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	ffff0000 	.word	0xffff0000

080099b4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	7c1b      	ldrb	r3, [r3, #16]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <HAL_DSI_Start+0x14>
 80099c4:	2302      	movs	r3, #2
 80099c6:	e02b      	b.n	8009a20 <HAL_DSI_Start+0x6c>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 0201 	orr.w	r2, r2, #1
 80099e0:	605a      	str	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80099f0:	2300      	movs	r3, #0
 80099f2:	60bb      	str	r3, [r7, #8]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f042 0208 	orr.w	r2, r2, #8
 8009a04:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a10:	f003 0308 	and.w	r3, r3, #8
 8009a14:	60bb      	str	r3, [r7, #8]
 8009a16:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	7c1b      	ldrb	r3, [r3, #16]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d101      	bne.n	8009a46 <HAL_DSI_ShortWrite+0x1a>
 8009a42:	2302      	movs	r3, #2
 8009a44:	e010      	b.n	8009a68 <HAL_DSI_ShortWrite+0x3c>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009a4c:	6a3b      	ldr	r3, [r7, #32]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7fe ff99 	bl	800898e <DSI_ShortWrite>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	741a      	strb	r2, [r3, #16]

  return status;
 8009a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08c      	sub	sp, #48	; 0x30
 8009a74:	af02      	add	r7, sp, #8
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8009a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a80:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	7c1b      	ldrb	r3, [r3, #16]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d101      	bne.n	8009a8e <HAL_DSI_LongWrite+0x1e>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e084      	b.n	8009b98 <HAL_DSI_LongWrite+0x128>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a94:	f7fd fd84 	bl	80075a0 <HAL_GetTick>
 8009a98:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009a9a:	e00c      	b.n	8009ab6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009a9c:	f7fd fd80 	bl	80075a0 <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aaa:	d904      	bls.n	8009ab6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e070      	b.n	8009b98 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0eb      	beq.n	8009a9c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	bf28      	it	cs
 8009ace:	2303      	movcs	r3, #3
 8009ad0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	623b      	str	r3, [r7, #32]
 8009ad6:	e00f      	b.n	8009af8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	4413      	add	r3, r2
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	3301      	adds	r3, #1
 8009af6:	623b      	str	r3, [r7, #32]
 8009af8:	6a3a      	ldr	r2, [r7, #32]
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d3eb      	bcc.n	8009ad8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	4413      	add	r3, r2
 8009b16:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009b18:	e028      	b.n	8009b6c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	bf28      	it	cs
 8009b20:	2304      	movcs	r3, #4
 8009b22:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	623b      	str	r3, [r7, #32]
 8009b2c:	e00e      	b.n	8009b4c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	4413      	add	r3, r2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	623b      	str	r3, [r7, #32]
 8009b4c:	6a3a      	ldr	r2, [r7, #32]
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d3ec      	bcc.n	8009b2e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69fa      	ldr	r2, [r7, #28]
 8009b5a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8009b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	4413      	add	r3, r2
 8009b6a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1d3      	bne.n	8009b1a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009b7a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	4613      	mov	r3, r2
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	f7fe fee6 	bl	800895c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3728      	adds	r7, #40	; 0x28
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	7c1b      	ldrb	r3, [r3, #16]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e01b      	b.n	8009bee <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8009bcc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	065a      	lsls	r2, r3, #25
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b089      	sub	sp, #36	; 0x24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009c12:	2300      	movs	r3, #0
 8009c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009c16:	2300      	movs	r3, #0
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	e175      	b.n	8009f08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	f040 8164 	bne.w	8009f02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d005      	beq.n	8009c52 <HAL_GPIO_Init+0x56>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d130      	bne.n	8009cb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	2203      	movs	r2, #3
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c62:	43db      	mvns	r3, r3
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	4013      	ands	r3, r2
 8009c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68da      	ldr	r2, [r3, #12]
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	fa02 f303 	lsl.w	r3, r2, r3
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009c88:	2201      	movs	r2, #1
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c90:	43db      	mvns	r3, r3
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	4013      	ands	r3, r2
 8009c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	091b      	lsrs	r3, r3, #4
 8009c9e:	f003 0201 	and.w	r2, r3, #1
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f003 0303 	and.w	r3, r3, #3
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d017      	beq.n	8009cf0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	2203      	movs	r2, #3
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	005b      	lsls	r3, r3, #1
 8009ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d123      	bne.n	8009d44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	08da      	lsrs	r2, r3, #3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3208      	adds	r2, #8
 8009d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f003 0307 	and.w	r3, r3, #7
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	220f      	movs	r2, #15
 8009d14:	fa02 f303 	lsl.w	r3, r2, r3
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	08da      	lsrs	r2, r3, #3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3208      	adds	r2, #8
 8009d3e:	69b9      	ldr	r1, [r7, #24]
 8009d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	2203      	movs	r2, #3
 8009d50:	fa02 f303 	lsl.w	r3, r2, r3
 8009d54:	43db      	mvns	r3, r3
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	4013      	ands	r3, r2
 8009d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f003 0203 	and.w	r2, r3, #3
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 80be 	beq.w	8009f02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d86:	4b66      	ldr	r3, [pc, #408]	; (8009f20 <HAL_GPIO_Init+0x324>)
 8009d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8a:	4a65      	ldr	r2, [pc, #404]	; (8009f20 <HAL_GPIO_Init+0x324>)
 8009d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d90:	6453      	str	r3, [r2, #68]	; 0x44
 8009d92:	4b63      	ldr	r3, [pc, #396]	; (8009f20 <HAL_GPIO_Init+0x324>)
 8009d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009d9e:	4a61      	ldr	r2, [pc, #388]	; (8009f24 <HAL_GPIO_Init+0x328>)
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	089b      	lsrs	r3, r3, #2
 8009da4:	3302      	adds	r3, #2
 8009da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	220f      	movs	r2, #15
 8009db6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dba:	43db      	mvns	r3, r3
 8009dbc:	69ba      	ldr	r2, [r7, #24]
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a58      	ldr	r2, [pc, #352]	; (8009f28 <HAL_GPIO_Init+0x32c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d037      	beq.n	8009e3a <HAL_GPIO_Init+0x23e>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a57      	ldr	r2, [pc, #348]	; (8009f2c <HAL_GPIO_Init+0x330>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d031      	beq.n	8009e36 <HAL_GPIO_Init+0x23a>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a56      	ldr	r2, [pc, #344]	; (8009f30 <HAL_GPIO_Init+0x334>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d02b      	beq.n	8009e32 <HAL_GPIO_Init+0x236>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a55      	ldr	r2, [pc, #340]	; (8009f34 <HAL_GPIO_Init+0x338>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d025      	beq.n	8009e2e <HAL_GPIO_Init+0x232>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a54      	ldr	r2, [pc, #336]	; (8009f38 <HAL_GPIO_Init+0x33c>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d01f      	beq.n	8009e2a <HAL_GPIO_Init+0x22e>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a53      	ldr	r2, [pc, #332]	; (8009f3c <HAL_GPIO_Init+0x340>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d019      	beq.n	8009e26 <HAL_GPIO_Init+0x22a>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a52      	ldr	r2, [pc, #328]	; (8009f40 <HAL_GPIO_Init+0x344>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d013      	beq.n	8009e22 <HAL_GPIO_Init+0x226>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a51      	ldr	r2, [pc, #324]	; (8009f44 <HAL_GPIO_Init+0x348>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00d      	beq.n	8009e1e <HAL_GPIO_Init+0x222>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a50      	ldr	r2, [pc, #320]	; (8009f48 <HAL_GPIO_Init+0x34c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d007      	beq.n	8009e1a <HAL_GPIO_Init+0x21e>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a4f      	ldr	r2, [pc, #316]	; (8009f4c <HAL_GPIO_Init+0x350>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d101      	bne.n	8009e16 <HAL_GPIO_Init+0x21a>
 8009e12:	2309      	movs	r3, #9
 8009e14:	e012      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e16:	230a      	movs	r3, #10
 8009e18:	e010      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e1a:	2308      	movs	r3, #8
 8009e1c:	e00e      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e1e:	2307      	movs	r3, #7
 8009e20:	e00c      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e22:	2306      	movs	r3, #6
 8009e24:	e00a      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e26:	2305      	movs	r3, #5
 8009e28:	e008      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e2a:	2304      	movs	r3, #4
 8009e2c:	e006      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e004      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e002      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e000      	b.n	8009e3c <HAL_GPIO_Init+0x240>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	69fa      	ldr	r2, [r7, #28]
 8009e3e:	f002 0203 	and.w	r2, r2, #3
 8009e42:	0092      	lsls	r2, r2, #2
 8009e44:	4093      	lsls	r3, r2
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009e4c:	4935      	ldr	r1, [pc, #212]	; (8009f24 <HAL_GPIO_Init+0x328>)
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	089b      	lsrs	r3, r3, #2
 8009e52:	3302      	adds	r3, #2
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009e5a:	4b3d      	ldr	r3, [pc, #244]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	43db      	mvns	r3, r3
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	4013      	ands	r3, r2
 8009e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009e7e:	4a34      	ldr	r2, [pc, #208]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009e84:	4b32      	ldr	r3, [pc, #200]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	43db      	mvns	r3, r3
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	4013      	ands	r3, r2
 8009e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d003      	beq.n	8009ea8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009ea8:	4a29      	ldr	r2, [pc, #164]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009eae:	4b28      	ldr	r3, [pc, #160]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	43db      	mvns	r3, r3
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ed2:	4a1f      	ldr	r2, [pc, #124]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ed8:	4b1d      	ldr	r3, [pc, #116]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	43db      	mvns	r3, r3
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009efc:	4a14      	ldr	r2, [pc, #80]	; (8009f50 <HAL_GPIO_Init+0x354>)
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	3301      	adds	r3, #1
 8009f06:	61fb      	str	r3, [r7, #28]
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	2b0f      	cmp	r3, #15
 8009f0c:	f67f ae86 	bls.w	8009c1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	3724      	adds	r7, #36	; 0x24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40023800 	.word	0x40023800
 8009f24:	40013800 	.word	0x40013800
 8009f28:	40020000 	.word	0x40020000
 8009f2c:	40020400 	.word	0x40020400
 8009f30:	40020800 	.word	0x40020800
 8009f34:	40020c00 	.word	0x40020c00
 8009f38:	40021000 	.word	0x40021000
 8009f3c:	40021400 	.word	0x40021400
 8009f40:	40021800 	.word	0x40021800
 8009f44:	40021c00 	.word	0x40021c00
 8009f48:	40022000 	.word	0x40022000
 8009f4c:	40022400 	.word	0x40022400
 8009f50:	40013c00 	.word	0x40013c00

08009f54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]
 8009f6e:	e0d9      	b.n	800a124 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009f70:	2201      	movs	r2, #1
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	4013      	ands	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	f040 80c9 	bne.w	800a11e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009f8c:	4a6b      	ldr	r2, [pc, #428]	; (800a13c <HAL_GPIO_DeInit+0x1e8>)
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	089b      	lsrs	r3, r3, #2
 8009f92:	3302      	adds	r3, #2
 8009f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f98:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f003 0303 	and.w	r3, r3, #3
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	220f      	movs	r2, #15
 8009fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	4013      	ands	r3, r2
 8009fac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a63      	ldr	r2, [pc, #396]	; (800a140 <HAL_GPIO_DeInit+0x1ec>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d037      	beq.n	800a026 <HAL_GPIO_DeInit+0xd2>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a62      	ldr	r2, [pc, #392]	; (800a144 <HAL_GPIO_DeInit+0x1f0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d031      	beq.n	800a022 <HAL_GPIO_DeInit+0xce>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a61      	ldr	r2, [pc, #388]	; (800a148 <HAL_GPIO_DeInit+0x1f4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d02b      	beq.n	800a01e <HAL_GPIO_DeInit+0xca>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a60      	ldr	r2, [pc, #384]	; (800a14c <HAL_GPIO_DeInit+0x1f8>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d025      	beq.n	800a01a <HAL_GPIO_DeInit+0xc6>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a5f      	ldr	r2, [pc, #380]	; (800a150 <HAL_GPIO_DeInit+0x1fc>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d01f      	beq.n	800a016 <HAL_GPIO_DeInit+0xc2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a5e      	ldr	r2, [pc, #376]	; (800a154 <HAL_GPIO_DeInit+0x200>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d019      	beq.n	800a012 <HAL_GPIO_DeInit+0xbe>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a5d      	ldr	r2, [pc, #372]	; (800a158 <HAL_GPIO_DeInit+0x204>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d013      	beq.n	800a00e <HAL_GPIO_DeInit+0xba>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a5c      	ldr	r2, [pc, #368]	; (800a15c <HAL_GPIO_DeInit+0x208>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00d      	beq.n	800a00a <HAL_GPIO_DeInit+0xb6>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a5b      	ldr	r2, [pc, #364]	; (800a160 <HAL_GPIO_DeInit+0x20c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d007      	beq.n	800a006 <HAL_GPIO_DeInit+0xb2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a5a      	ldr	r2, [pc, #360]	; (800a164 <HAL_GPIO_DeInit+0x210>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d101      	bne.n	800a002 <HAL_GPIO_DeInit+0xae>
 8009ffe:	2309      	movs	r3, #9
 800a000:	e012      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a002:	230a      	movs	r3, #10
 800a004:	e010      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a006:	2308      	movs	r3, #8
 800a008:	e00e      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a00a:	2307      	movs	r3, #7
 800a00c:	e00c      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a00e:	2306      	movs	r3, #6
 800a010:	e00a      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a012:	2305      	movs	r3, #5
 800a014:	e008      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a016:	2304      	movs	r3, #4
 800a018:	e006      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a01a:	2303      	movs	r3, #3
 800a01c:	e004      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a01e:	2302      	movs	r3, #2
 800a020:	e002      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <HAL_GPIO_DeInit+0xd4>
 800a026:	2300      	movs	r3, #0
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	f002 0203 	and.w	r2, r2, #3
 800a02e:	0092      	lsls	r2, r2, #2
 800a030:	4093      	lsls	r3, r2
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	d132      	bne.n	800a09e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a038:	4b4b      	ldr	r3, [pc, #300]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	43db      	mvns	r3, r3
 800a040:	4949      	ldr	r1, [pc, #292]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a042:	4013      	ands	r3, r2
 800a044:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a046:	4b48      	ldr	r3, [pc, #288]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	43db      	mvns	r3, r3
 800a04e:	4946      	ldr	r1, [pc, #280]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a050:	4013      	ands	r3, r2
 800a052:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a054:	4b44      	ldr	r3, [pc, #272]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	43db      	mvns	r3, r3
 800a05c:	4942      	ldr	r1, [pc, #264]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a05e:	4013      	ands	r3, r2
 800a060:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a062:	4b41      	ldr	r3, [pc, #260]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a064:	689a      	ldr	r2, [r3, #8]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	43db      	mvns	r3, r3
 800a06a:	493f      	ldr	r1, [pc, #252]	; (800a168 <HAL_GPIO_DeInit+0x214>)
 800a06c:	4013      	ands	r3, r2
 800a06e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	220f      	movs	r2, #15
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a080:	4a2e      	ldr	r2, [pc, #184]	; (800a13c <HAL_GPIO_DeInit+0x1e8>)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	089b      	lsrs	r3, r3, #2
 800a086:	3302      	adds	r3, #2
 800a088:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	43da      	mvns	r2, r3
 800a090:	482a      	ldr	r0, [pc, #168]	; (800a13c <HAL_GPIO_DeInit+0x1e8>)
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	089b      	lsrs	r3, r3, #2
 800a096:	400a      	ands	r2, r1
 800a098:	3302      	adds	r3, #2
 800a09a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	2103      	movs	r1, #3
 800a0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ac:	43db      	mvns	r3, r3
 800a0ae:	401a      	ands	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	08da      	lsrs	r2, r3, #3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3208      	adds	r2, #8
 800a0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	220f      	movs	r2, #15
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	43db      	mvns	r3, r3
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	08d2      	lsrs	r2, r2, #3
 800a0d4:	4019      	ands	r1, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3208      	adds	r2, #8
 800a0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	2103      	movs	r1, #3
 800a0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ec:	43db      	mvns	r3, r3
 800a0ee:	401a      	ands	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a100:	43db      	mvns	r3, r3
 800a102:	401a      	ands	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	2103      	movs	r1, #3
 800a112:	fa01 f303 	lsl.w	r3, r1, r3
 800a116:	43db      	mvns	r3, r3
 800a118:	401a      	ands	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	3301      	adds	r3, #1
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b0f      	cmp	r3, #15
 800a128:	f67f af22 	bls.w	8009f70 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	371c      	adds	r7, #28
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	40013800 	.word	0x40013800
 800a140:	40020000 	.word	0x40020000
 800a144:	40020400 	.word	0x40020400
 800a148:	40020800 	.word	0x40020800
 800a14c:	40020c00 	.word	0x40020c00
 800a150:	40021000 	.word	0x40021000
 800a154:	40021400 	.word	0x40021400
 800a158:	40021800 	.word	0x40021800
 800a15c:	40021c00 	.word	0x40021c00
 800a160:	40022000 	.word	0x40022000
 800a164:	40022400 	.word	0x40022400
 800a168:	40013c00 	.word	0x40013c00

0800a16c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691a      	ldr	r2, [r3, #16]
 800a17c:	887b      	ldrh	r3, [r7, #2]
 800a17e:	4013      	ands	r3, r2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a184:	2301      	movs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	e001      	b.n	800a18e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	807b      	strh	r3, [r7, #2]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a1ac:	787b      	ldrb	r3, [r7, #1]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a1b2:	887a      	ldrh	r2, [r7, #2]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a1b8:	e003      	b.n	800a1c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	041a      	lsls	r2, r3, #16
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	619a      	str	r2, [r3, #24]
}
 800a1c2:	bf00      	nop
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b085      	sub	sp, #20
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a1e0:	887a      	ldrh	r2, [r7, #2]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	041a      	lsls	r2, r3, #16
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	43d9      	mvns	r1, r3
 800a1ec:	887b      	ldrh	r3, [r7, #2]
 800a1ee:	400b      	ands	r3, r1
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	619a      	str	r2, [r3, #24]
}
 800a1f6:	bf00      	nop
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
	...

0800a204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e07f      	b.n	800a316 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d106      	bne.n	800a230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f8a9 	bl	800a382 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2224      	movs	r2, #36	; 0x24
 800a234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f022 0201 	bic.w	r2, r2, #1
 800a246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d107      	bne.n	800a27e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a27a:	609a      	str	r2, [r3, #8]
 800a27c:	e006      	b.n	800a28c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a28a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	2b02      	cmp	r3, #2
 800a292:	d104      	bne.n	800a29e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a29c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6859      	ldr	r1, [r3, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	4b1d      	ldr	r3, [pc, #116]	; (800a320 <HAL_I2C_Init+0x11c>)
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691a      	ldr	r2, [r3, #16]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	69d9      	ldr	r1, [r3, #28]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a1a      	ldr	r2, [r3, #32]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f042 0201 	orr.w	r2, r2, #1
 800a2f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	02008000 	.word	0x02008000

0800a324 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e021      	b.n	800a37a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2224      	movs	r2, #36	; 0x24
 800a33a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0201 	bic.w	r2, r2, #1
 800a34c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f821 	bl	800a396 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	817b      	strh	r3, [r7, #10]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	813b      	strh	r3, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	f040 80f9 	bne.w	800a5c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_I2C_Mem_Write+0x34>
 800a3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d105      	bne.n	800a3ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e0ed      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d101      	bne.n	800a3fa <HAL_I2C_Mem_Write+0x4e>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e0e6      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a402:	f7fd f8cd 	bl	80075a0 <HAL_GetTick>
 800a406:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	2319      	movs	r3, #25
 800a40e:	2201      	movs	r2, #1
 800a410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 fad1 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e0d1      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2221      	movs	r2, #33	; 0x21
 800a428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2240      	movs	r2, #64	; 0x40
 800a430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a3a      	ldr	r2, [r7, #32]
 800a43e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a44c:	88f8      	ldrh	r0, [r7, #6]
 800a44e:	893a      	ldrh	r2, [r7, #8]
 800a450:	8979      	ldrh	r1, [r7, #10]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4603      	mov	r3, r0
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f9e1 	bl	800a824 <I2C_RequestMemoryWrite>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e0a9      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a478:	b29b      	uxth	r3, r3
 800a47a:	2bff      	cmp	r3, #255	; 0xff
 800a47c:	d90e      	bls.n	800a49c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	22ff      	movs	r2, #255	; 0xff
 800a482:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	8979      	ldrh	r1, [r7, #10]
 800a48c:	2300      	movs	r3, #0
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fc2d 	bl	800acf4 <I2C_TransferConfig>
 800a49a:	e00f      	b.n	800a4bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	8979      	ldrh	r1, [r7, #10]
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fc1c 	bl	800acf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 fabb 	bl	800aa3c <I2C_WaitOnTXISFlagUntilTimeout>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e07b      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d4:	781a      	ldrb	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a504:	b29b      	uxth	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d034      	beq.n	800a574 <HAL_I2C_Mem_Write+0x1c8>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d130      	bne.n	800a574 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	2200      	movs	r2, #0
 800a51a:	2180      	movs	r1, #128	; 0x80
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fa4d 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e04d      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a530:	b29b      	uxth	r3, r3
 800a532:	2bff      	cmp	r3, #255	; 0xff
 800a534:	d90e      	bls.n	800a554 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	22ff      	movs	r2, #255	; 0xff
 800a53a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a540:	b2da      	uxtb	r2, r3
 800a542:	8979      	ldrh	r1, [r7, #10]
 800a544:	2300      	movs	r3, #0
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 fbd1 	bl	800acf4 <I2C_TransferConfig>
 800a552:	e00f      	b.n	800a574 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a562:	b2da      	uxtb	r2, r3
 800a564:	8979      	ldrh	r1, [r7, #10]
 800a566:	2300      	movs	r3, #0
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fbc0 	bl	800acf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a578:	b29b      	uxth	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d19e      	bne.n	800a4bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 fa9a 	bl	800aabc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e01a      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2220      	movs	r2, #32
 800a598:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6859      	ldr	r1, [r3, #4]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <HAL_I2C_Mem_Write+0x224>)
 800a5a6:	400b      	ands	r3, r1
 800a5a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	e000      	b.n	800a5c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a5c6:	2302      	movs	r3, #2
  }
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	fe00e800 	.word	0xfe00e800

0800a5d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	4608      	mov	r0, r1
 800a5de:	4611      	mov	r1, r2
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	817b      	strh	r3, [r7, #10]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	813b      	strh	r3, [r7, #8]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b20      	cmp	r3, #32
 800a5f8:	f040 80fd 	bne.w	800a7f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <HAL_I2C_Mem_Read+0x34>
 800a602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a604:	2b00      	cmp	r3, #0
 800a606:	d105      	bne.n	800a614 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a60e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e0f1      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <HAL_I2C_Mem_Read+0x4e>
 800a61e:	2302      	movs	r3, #2
 800a620:	e0ea      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a62a:	f7fc ffb9 	bl	80075a0 <HAL_GetTick>
 800a62e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	2319      	movs	r3, #25
 800a636:	2201      	movs	r2, #1
 800a638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 f9bd 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e0d5      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2222      	movs	r2, #34	; 0x22
 800a650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2240      	movs	r2, #64	; 0x40
 800a658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a3a      	ldr	r2, [r7, #32]
 800a666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a66c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a674:	88f8      	ldrh	r0, [r7, #6]
 800a676:	893a      	ldrh	r2, [r7, #8]
 800a678:	8979      	ldrh	r1, [r7, #10]
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	4603      	mov	r3, r0
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 f921 	bl	800a8cc <I2C_RequestMemoryRead>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e0ad      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	2bff      	cmp	r3, #255	; 0xff
 800a6a4:	d90e      	bls.n	800a6c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	22ff      	movs	r2, #255	; 0xff
 800a6aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	8979      	ldrh	r1, [r7, #10]
 800a6b4:	4b52      	ldr	r3, [pc, #328]	; (800a800 <HAL_I2C_Mem_Read+0x22c>)
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 fb19 	bl	800acf4 <I2C_TransferConfig>
 800a6c2:	e00f      	b.n	800a6e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	8979      	ldrh	r1, [r7, #10]
 800a6d6:	4b4a      	ldr	r3, [pc, #296]	; (800a800 <HAL_I2C_Mem_Read+0x22c>)
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f000 fb08 	bl	800acf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2104      	movs	r1, #4
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f964 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e07c      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	b2d2      	uxtb	r2, r2
 800a70a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a71a:	3b01      	subs	r3, #1
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a726:	b29b      	uxth	r3, r3
 800a728:	3b01      	subs	r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a734:	b29b      	uxth	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d034      	beq.n	800a7a4 <HAL_I2C_Mem_Read+0x1d0>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d130      	bne.n	800a7a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	2200      	movs	r2, #0
 800a74a:	2180      	movs	r1, #128	; 0x80
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f935 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e04d      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a760:	b29b      	uxth	r3, r3
 800a762:	2bff      	cmp	r3, #255	; 0xff
 800a764:	d90e      	bls.n	800a784 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	22ff      	movs	r2, #255	; 0xff
 800a76a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a770:	b2da      	uxtb	r2, r3
 800a772:	8979      	ldrh	r1, [r7, #10]
 800a774:	2300      	movs	r3, #0
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 fab9 	bl	800acf4 <I2C_TransferConfig>
 800a782:	e00f      	b.n	800a7a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a788:	b29a      	uxth	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a792:	b2da      	uxtb	r2, r3
 800a794:	8979      	ldrh	r1, [r7, #10]
 800a796:	2300      	movs	r3, #0
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 faa8 	bl	800acf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d19a      	bne.n	800a6e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 f982 	bl	800aabc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e01a      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6859      	ldr	r1, [r3, #4]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <HAL_I2C_Mem_Read+0x230>)
 800a7d6:	400b      	ands	r3, r1
 800a7d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2220      	movs	r2, #32
 800a7de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e000      	b.n	800a7f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a7f6:	2302      	movs	r3, #2
  }
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	80002400 	.word	0x80002400
 800a804:	fe00e800 	.word	0xfe00e800

0800a808 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a816:	b2db      	uxtb	r3, r3
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af02      	add	r7, sp, #8
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	461a      	mov	r2, r3
 800a832:	4603      	mov	r3, r0
 800a834:	817b      	strh	r3, [r7, #10]
 800a836:	460b      	mov	r3, r1
 800a838:	813b      	strh	r3, [r7, #8]
 800a83a:	4613      	mov	r3, r2
 800a83c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a83e:	88fb      	ldrh	r3, [r7, #6]
 800a840:	b2da      	uxtb	r2, r3
 800a842:	8979      	ldrh	r1, [r7, #10]
 800a844:	4b20      	ldr	r3, [pc, #128]	; (800a8c8 <I2C_RequestMemoryWrite+0xa4>)
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 fa51 	bl	800acf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a852:	69fa      	ldr	r2, [r7, #28]
 800a854:	69b9      	ldr	r1, [r7, #24]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f8f0 	bl	800aa3c <I2C_WaitOnTXISFlagUntilTimeout>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e02c      	b.n	800a8c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d105      	bne.n	800a878 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a86c:	893b      	ldrh	r3, [r7, #8]
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	629a      	str	r2, [r3, #40]	; 0x28
 800a876:	e015      	b.n	800a8a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a878:	893b      	ldrh	r3, [r7, #8]
 800a87a:	0a1b      	lsrs	r3, r3, #8
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a886:	69fa      	ldr	r2, [r7, #28]
 800a888:	69b9      	ldr	r1, [r7, #24]
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 f8d6 	bl	800aa3c <I2C_WaitOnTXISFlagUntilTimeout>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e012      	b.n	800a8c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a89a:	893b      	ldrh	r3, [r7, #8]
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2180      	movs	r1, #128	; 0x80
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 f884 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	80002000 	.word	0x80002000

0800a8cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af02      	add	r7, sp, #8
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4603      	mov	r3, r0
 800a8dc:	817b      	strh	r3, [r7, #10]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	813b      	strh	r3, [r7, #8]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a8e6:	88fb      	ldrh	r3, [r7, #6]
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	8979      	ldrh	r1, [r7, #10]
 800a8ec:	4b20      	ldr	r3, [pc, #128]	; (800a970 <I2C_RequestMemoryRead+0xa4>)
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f9fe 	bl	800acf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8f8:	69fa      	ldr	r2, [r7, #28]
 800a8fa:	69b9      	ldr	r1, [r7, #24]
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 f89d 	bl	800aa3c <I2C_WaitOnTXISFlagUntilTimeout>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e02c      	b.n	800a966 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a90c:	88fb      	ldrh	r3, [r7, #6]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d105      	bne.n	800a91e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a912:	893b      	ldrh	r3, [r7, #8]
 800a914:	b2da      	uxtb	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	629a      	str	r2, [r3, #40]	; 0x28
 800a91c:	e015      	b.n	800a94a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a91e:	893b      	ldrh	r3, [r7, #8]
 800a920:	0a1b      	lsrs	r3, r3, #8
 800a922:	b29b      	uxth	r3, r3
 800a924:	b2da      	uxtb	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a92c:	69fa      	ldr	r2, [r7, #28]
 800a92e:	69b9      	ldr	r1, [r7, #24]
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f883 	bl	800aa3c <I2C_WaitOnTXISFlagUntilTimeout>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e012      	b.n	800a966 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a940:	893b      	ldrh	r3, [r7, #8]
 800a942:	b2da      	uxtb	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	2200      	movs	r2, #0
 800a952:	2140      	movs	r1, #64	; 0x40
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 f831 	bl	800a9bc <I2C_WaitOnFlagUntilTimeout>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e000      	b.n	800a966 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	80002000 	.word	0x80002000

0800a974 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	f003 0302 	and.w	r3, r3, #2
 800a986:	2b02      	cmp	r3, #2
 800a988:	d103      	bne.n	800a992 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2200      	movs	r2, #0
 800a990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d007      	beq.n	800a9b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	699a      	ldr	r2, [r3, #24]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0201 	orr.w	r2, r2, #1
 800a9ae:	619a      	str	r2, [r3, #24]
  }
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9cc:	e022      	b.n	800aa14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d4:	d01e      	beq.n	800aa14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9d6:	f7fc fde3 	bl	80075a0 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d302      	bcc.n	800a9ec <I2C_WaitOnFlagUntilTimeout+0x30>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d113      	bne.n	800aa14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f0:	f043 0220 	orr.w	r2, r3, #32
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e00f      	b.n	800aa34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699a      	ldr	r2, [r3, #24]
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	bf0c      	ite	eq
 800aa24:	2301      	moveq	r3, #1
 800aa26:	2300      	movne	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d0cd      	beq.n	800a9ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aa48:	e02c      	b.n	800aaa4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 f870 	bl	800ab34 <I2C_IsErrorOccurred>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e02a      	b.n	800aab4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa64:	d01e      	beq.n	800aaa4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa66:	f7fc fd9b 	bl	80075a0 <HAL_GetTick>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d302      	bcc.n	800aa7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d113      	bne.n	800aaa4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa80:	f043 0220 	orr.w	r2, r3, #32
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e007      	b.n	800aab4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d1cb      	bne.n	800aa4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aac8:	e028      	b.n	800ab1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f000 f830 	bl	800ab34 <I2C_IsErrorOccurred>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e026      	b.n	800ab2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aade:	f7fc fd5f 	bl	80075a0 <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d302      	bcc.n	800aaf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d113      	bne.n	800ab1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf8:	f043 0220 	orr.w	r2, r3, #32
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e007      	b.n	800ab2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	f003 0320 	and.w	r3, r3, #32
 800ab26:	2b20      	cmp	r3, #32
 800ab28:	d1cf      	bne.n	800aaca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08a      	sub	sp, #40	; 0x28
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	f003 0310 	and.w	r3, r3, #16
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d068      	beq.n	800ac32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2210      	movs	r2, #16
 800ab66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ab68:	e049      	b.n	800abfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab70:	d045      	beq.n	800abfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ab72:	f7fc fd15 	bl	80075a0 <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d302      	bcc.n	800ab88 <I2C_IsErrorOccurred+0x54>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d13a      	bne.n	800abfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abaa:	d121      	bne.n	800abf0 <I2C_IsErrorOccurred+0xbc>
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abb2:	d01d      	beq.n	800abf0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800abb4:	7cfb      	ldrb	r3, [r7, #19]
 800abb6:	2b20      	cmp	r3, #32
 800abb8:	d01a      	beq.n	800abf0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800abca:	f7fc fce9 	bl	80075a0 <HAL_GetTick>
 800abce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abd0:	e00e      	b.n	800abf0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800abd2:	f7fc fce5 	bl	80075a0 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b19      	cmp	r3, #25
 800abde:	d907      	bls.n	800abf0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	f043 0320 	orr.w	r3, r3, #32
 800abe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800abee:	e006      	b.n	800abfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	d1e9      	bne.n	800abd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	f003 0320 	and.w	r3, r3, #32
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	d003      	beq.n	800ac14 <I2C_IsErrorOccurred+0xe0>
 800ac0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0aa      	beq.n	800ab6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ac14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d103      	bne.n	800ac24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2220      	movs	r2, #32
 800ac22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	f043 0304 	orr.w	r3, r3, #4
 800ac2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	f043 0301 	orr.w	r3, r3, #1
 800ac4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00b      	beq.n	800ac7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	f043 0308 	orr.w	r3, r3, #8
 800ac6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00b      	beq.n	800aca0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	f043 0302 	orr.w	r3, r3, #2
 800ac8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01c      	beq.n	800ace2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff fe63 	bl	800a974 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6859      	ldr	r1, [r3, #4]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <I2C_IsErrorOccurred+0x1bc>)
 800acba:	400b      	ands	r3, r1
 800acbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	431a      	orrs	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2220      	movs	r2, #32
 800acce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ace2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3728      	adds	r7, #40	; 0x28
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	fe00e800 	.word	0xfe00e800

0800acf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	607b      	str	r3, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	817b      	strh	r3, [r7, #10]
 800ad02:	4613      	mov	r3, r2
 800ad04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ad06:	897b      	ldrh	r3, [r7, #10]
 800ad08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ad0c:	7a7b      	ldrb	r3, [r7, #9]
 800ad0e:	041b      	lsls	r3, r3, #16
 800ad10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ad14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	0d5b      	lsrs	r3, r3, #21
 800ad2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ad32:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <I2C_TransferConfig+0x60>)
 800ad34:	430b      	orrs	r3, r1
 800ad36:	43db      	mvns	r3, r3
 800ad38:	ea02 0103 	and.w	r1, r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	03ff63ff 	.word	0x03ff63ff

0800ad58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e0bf      	b.n	800aeea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7f7 f9ce 	bl	8002120 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	699a      	ldr	r2, [r3, #24]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800ad9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6999      	ldr	r1, [r3, #24]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800adb0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6899      	ldr	r1, [r3, #8]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	4b4a      	ldr	r3, [pc, #296]	; (800aef4 <HAL_LTDC_Init+0x19c>)
 800adcc:	400b      	ands	r3, r1
 800adce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6899      	ldr	r1, [r3, #8]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	699a      	ldr	r2, [r3, #24]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	431a      	orrs	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68d9      	ldr	r1, [r3, #12]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	4b3e      	ldr	r3, [pc, #248]	; (800aef4 <HAL_LTDC_Init+0x19c>)
 800adfa:	400b      	ands	r3, r1
 800adfc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	041b      	lsls	r3, r3, #16
 800ae04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68d9      	ldr	r1, [r3, #12]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1a      	ldr	r2, [r3, #32]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	431a      	orrs	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6919      	ldr	r1, [r3, #16]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	4b33      	ldr	r3, [pc, #204]	; (800aef4 <HAL_LTDC_Init+0x19c>)
 800ae28:	400b      	ands	r3, r1
 800ae2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	041b      	lsls	r3, r3, #16
 800ae32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6919      	ldr	r1, [r3, #16]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	431a      	orrs	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6959      	ldr	r1, [r3, #20]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	4b27      	ldr	r3, [pc, #156]	; (800aef4 <HAL_LTDC_Init+0x19c>)
 800ae56:	400b      	ands	r3, r1
 800ae58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5e:	041b      	lsls	r3, r3, #16
 800ae60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6959      	ldr	r1, [r3, #20]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ae88:	041b      	lsls	r3, r3, #16
 800ae8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ae9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f042 0206 	orr.w	r2, r2, #6
 800aec6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f042 0201 	orr.w	r2, r2, #1
 800aed6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	f000f800 	.word	0xf000f800

0800aef8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d023      	beq.n	800af62 <HAL_LTDC_IRQHandler+0x6a>
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d01e      	beq.n	800af62 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 0204 	bic.w	r2, r2, #4
 800af32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2204      	movs	r2, #4
 800af3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af42:	f043 0201 	orr.w	r2, r3, #1
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2204      	movs	r2, #4
 800af50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f86f 	bl	800b040 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f003 0302 	and.w	r3, r3, #2
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d023      	beq.n	800afb4 <HAL_LTDC_IRQHandler+0xbc>
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f003 0302 	and.w	r3, r3, #2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d01e      	beq.n	800afb4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f022 0202 	bic.w	r2, r2, #2
 800af84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2202      	movs	r2, #2
 800af8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af94:	f043 0202 	orr.w	r2, r3, #2
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2204      	movs	r2, #4
 800afa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f846 	bl	800b040 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d01b      	beq.n	800aff6 <HAL_LTDC_IRQHandler+0xfe>
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d016      	beq.n	800aff6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0201 	bic.w	r2, r2, #1
 800afd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2201      	movs	r2, #1
 800afde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f82f 	bl	800b054 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f003 0308 	and.w	r3, r3, #8
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01b      	beq.n	800b038 <HAL_LTDC_IRQHandler+0x140>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f003 0308 	and.w	r3, r3, #8
 800b006:	2b00      	cmp	r3, #0
 800b008:	d016      	beq.n	800b038 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 0208 	bic.w	r2, r2, #8
 800b018:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2208      	movs	r2, #8
 800b020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7f7 fabc 	bl	80025b0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b038:	bf00      	nop
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b068:	b5b0      	push	{r4, r5, r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d101      	bne.n	800b082 <HAL_LTDC_ConfigLayer+0x1a>
 800b07e:	2302      	movs	r3, #2
 800b080:	e02c      	b.n	800b0dc <HAL_LTDC_ConfigLayer+0x74>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2202      	movs	r2, #2
 800b08e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2134      	movs	r1, #52	; 0x34
 800b098:	fb01 f303 	mul.w	r3, r1, r3
 800b09c:	4413      	add	r3, r2
 800b09e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	4614      	mov	r4, r2
 800b0a6:	461d      	mov	r5, r3
 800b0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 f88f 	bl	800b1e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bdb0      	pop	{r4, r5, r7, pc}

0800b0e4 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d101      	bne.n	800b0fe <HAL_LTDC_ConfigColorKeying+0x1a>
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e030      	b.n	800b160 <HAL_LTDC_ConfigColorKeying+0x7c>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2202      	movs	r2, #2
 800b10a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	01db      	lsls	r3, r3, #7
 800b118:	4413      	add	r3, r2
 800b11a:	3384      	adds	r3, #132	; 0x84
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	6812      	ldr	r2, [r2, #0]
 800b122:	4611      	mov	r1, r2
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	01d2      	lsls	r2, r2, #7
 800b128:	440a      	add	r2, r1
 800b12a:	3284      	adds	r2, #132	; 0x84
 800b12c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b130:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	01db      	lsls	r3, r3, #7
 800b13c:	4413      	add	r3, r2
 800b13e:	3384      	adds	r3, #132	; 0x84
 800b140:	461a      	mov	r2, r3
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2201      	movs	r2, #1
 800b14c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d101      	bne.n	800b184 <HAL_LTDC_EnableColorKeying+0x18>
 800b180:	2302      	movs	r3, #2
 800b182:	e026      	b.n	800b1d2 <HAL_LTDC_EnableColorKeying+0x66>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	01db      	lsls	r3, r3, #7
 800b19e:	4413      	add	r3, r2
 800b1a0:	3384      	adds	r3, #132	; 0x84
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	6812      	ldr	r2, [r2, #0]
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	01d2      	lsls	r2, r2, #7
 800b1ae:	440a      	add	r2, r1
 800b1b0:	3284      	adds	r2, #132	; 0x84
 800b1b2:	f043 0302 	orr.w	r3, r3, #2
 800b1b6:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
	...

0800b1e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b089      	sub	sp, #36	; 0x24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	0c1b      	lsrs	r3, r3, #16
 800b1f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1fc:	4413      	add	r3, r2
 800b1fe:	041b      	lsls	r3, r3, #16
 800b200:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	01db      	lsls	r3, r3, #7
 800b20c:	4413      	add	r3, r2
 800b20e:	3384      	adds	r3, #132	; 0x84
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	6812      	ldr	r2, [r2, #0]
 800b216:	4611      	mov	r1, r2
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	01d2      	lsls	r2, r2, #7
 800b21c:	440a      	add	r2, r1
 800b21e:	3284      	adds	r2, #132	; 0x84
 800b220:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b224:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	0c1b      	lsrs	r3, r3, #16
 800b232:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b236:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b238:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4619      	mov	r1, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	01db      	lsls	r3, r3, #7
 800b244:	440b      	add	r3, r1
 800b246:	3384      	adds	r3, #132	; 0x84
 800b248:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b24e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	68da      	ldr	r2, [r3, #12]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b25e:	4413      	add	r3, r2
 800b260:	041b      	lsls	r3, r3, #16
 800b262:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	01db      	lsls	r3, r3, #7
 800b26e:	4413      	add	r3, r2
 800b270:	3384      	adds	r3, #132	; 0x84
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	6812      	ldr	r2, [r2, #0]
 800b278:	4611      	mov	r1, r2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	01d2      	lsls	r2, r2, #7
 800b27e:	440a      	add	r2, r1
 800b280:	3284      	adds	r2, #132	; 0x84
 800b282:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b286:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b296:	4413      	add	r3, r2
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	01db      	lsls	r3, r3, #7
 800b2a4:	440b      	add	r3, r1
 800b2a6:	3384      	adds	r3, #132	; 0x84
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	01db      	lsls	r3, r3, #7
 800b2ba:	4413      	add	r3, r2
 800b2bc:	3384      	adds	r3, #132	; 0x84
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	6812      	ldr	r2, [r2, #0]
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	01d2      	lsls	r2, r2, #7
 800b2ca:	440a      	add	r2, r1
 800b2cc:	3284      	adds	r2, #132	; 0x84
 800b2ce:	f023 0307 	bic.w	r3, r3, #7
 800b2d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	01db      	lsls	r3, r3, #7
 800b2de:	4413      	add	r3, r2
 800b2e0:	3384      	adds	r3, #132	; 0x84
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2f0:	021b      	lsls	r3, r3, #8
 800b2f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b2fa:	041b      	lsls	r3, r3, #16
 800b2fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	061b      	lsls	r3, r3, #24
 800b304:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	461a      	mov	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	01db      	lsls	r3, r3, #7
 800b310:	4413      	add	r3, r2
 800b312:	3384      	adds	r3, #132	; 0x84
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	01db      	lsls	r3, r3, #7
 800b320:	4413      	add	r3, r2
 800b322:	3384      	adds	r3, #132	; 0x84
 800b324:	461a      	mov	r2, r3
 800b326:	2300      	movs	r3, #0
 800b328:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b330:	461a      	mov	r2, r3
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	431a      	orrs	r2, r3
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	431a      	orrs	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4619      	mov	r1, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	01db      	lsls	r3, r3, #7
 800b344:	440b      	add	r3, r1
 800b346:	3384      	adds	r3, #132	; 0x84
 800b348:	4619      	mov	r1, r3
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	461a      	mov	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	01db      	lsls	r3, r3, #7
 800b35a:	4413      	add	r3, r2
 800b35c:	3384      	adds	r3, #132	; 0x84
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	6812      	ldr	r2, [r2, #0]
 800b364:	4611      	mov	r1, r2
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	01d2      	lsls	r2, r2, #7
 800b36a:	440a      	add	r2, r1
 800b36c:	3284      	adds	r2, #132	; 0x84
 800b36e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b372:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	01db      	lsls	r3, r3, #7
 800b37e:	4413      	add	r3, r2
 800b380:	3384      	adds	r3, #132	; 0x84
 800b382:	461a      	mov	r2, r3
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	01db      	lsls	r3, r3, #7
 800b394:	4413      	add	r3, r2
 800b396:	3384      	adds	r3, #132	; 0x84
 800b398:	69da      	ldr	r2, [r3, #28]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	01db      	lsls	r3, r3, #7
 800b3a4:	440b      	add	r3, r1
 800b3a6:	3384      	adds	r3, #132	; 0x84
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4b58      	ldr	r3, [pc, #352]	; (800b50c <LTDC_SetConfig+0x32c>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	69da      	ldr	r2, [r3, #28]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	68f9      	ldr	r1, [r7, #12]
 800b3ba:	6809      	ldr	r1, [r1, #0]
 800b3bc:	4608      	mov	r0, r1
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	01c9      	lsls	r1, r1, #7
 800b3c2:	4401      	add	r1, r0
 800b3c4:	3184      	adds	r1, #132	; 0x84
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	01db      	lsls	r3, r3, #7
 800b3d4:	4413      	add	r3, r2
 800b3d6:	3384      	adds	r3, #132	; 0x84
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	01db      	lsls	r3, r3, #7
 800b3e4:	4413      	add	r3, r2
 800b3e6:	3384      	adds	r3, #132	; 0x84
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	01db      	lsls	r3, r3, #7
 800b3f8:	4413      	add	r3, r2
 800b3fa:	3384      	adds	r3, #132	; 0x84
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b402:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d102      	bne.n	800b412 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b40c:	2304      	movs	r3, #4
 800b40e:	61fb      	str	r3, [r7, #28]
 800b410:	e01b      	b.n	800b44a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d102      	bne.n	800b420 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b41a:	2303      	movs	r3, #3
 800b41c:	61fb      	str	r3, [r7, #28]
 800b41e:	e014      	b.n	800b44a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	2b04      	cmp	r3, #4
 800b426:	d00b      	beq.n	800b440 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d007      	beq.n	800b440 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b434:	2b03      	cmp	r3, #3
 800b436:	d003      	beq.n	800b440 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b43c:	2b07      	cmp	r3, #7
 800b43e:	d102      	bne.n	800b446 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b440:	2302      	movs	r3, #2
 800b442:	61fb      	str	r3, [r7, #28]
 800b444:	e001      	b.n	800b44a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b446:	2301      	movs	r3, #1
 800b448:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	01db      	lsls	r3, r3, #7
 800b454:	4413      	add	r3, r2
 800b456:	3384      	adds	r3, #132	; 0x84
 800b458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	4611      	mov	r1, r2
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	01d2      	lsls	r2, r2, #7
 800b464:	440a      	add	r2, r1
 800b466:	3284      	adds	r2, #132	; 0x84
 800b468:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b46c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	fb02 f303 	mul.w	r3, r2, r3
 800b478:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	6859      	ldr	r1, [r3, #4]
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	1acb      	subs	r3, r1, r3
 800b484:	69f9      	ldr	r1, [r7, #28]
 800b486:	fb01 f303 	mul.w	r3, r1, r3
 800b48a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b48c:	68f9      	ldr	r1, [r7, #12]
 800b48e:	6809      	ldr	r1, [r1, #0]
 800b490:	4608      	mov	r0, r1
 800b492:	6879      	ldr	r1, [r7, #4]
 800b494:	01c9      	lsls	r1, r1, #7
 800b496:	4401      	add	r1, r0
 800b498:	3184      	adds	r1, #132	; 0x84
 800b49a:	4313      	orrs	r3, r2
 800b49c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	01db      	lsls	r3, r3, #7
 800b4a8:	4413      	add	r3, r2
 800b4aa:	3384      	adds	r3, #132	; 0x84
 800b4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	01db      	lsls	r3, r3, #7
 800b4b8:	440b      	add	r3, r1
 800b4ba:	3384      	adds	r3, #132	; 0x84
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4b14      	ldr	r3, [pc, #80]	; (800b510 <LTDC_SetConfig+0x330>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	01db      	lsls	r3, r3, #7
 800b4ce:	4413      	add	r3, r2
 800b4d0:	3384      	adds	r3, #132	; 0x84
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	01db      	lsls	r3, r3, #7
 800b4e4:	4413      	add	r3, r2
 800b4e6:	3384      	adds	r3, #132	; 0x84
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	6812      	ldr	r2, [r2, #0]
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	01d2      	lsls	r2, r2, #7
 800b4f4:	440a      	add	r2, r1
 800b4f6:	3284      	adds	r2, #132	; 0x84
 800b4f8:	f043 0301 	orr.w	r3, r3, #1
 800b4fc:	6013      	str	r3, [r2, #0]
}
 800b4fe:	bf00      	nop
 800b500:	3724      	adds	r7, #36	; 0x24
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	fffff8f8 	.word	0xfffff8f8
 800b510:	fffff800 	.word	0xfffff800

0800b514 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800b526:	2200      	movs	r2, #0
 800b528:	e001      	b.n	800b52e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800b52a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800b53a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b53e:	e000      	b.n	800b542 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800b540:	2200      	movs	r2, #0
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d102      	bne.n	800b554 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800b54e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b552:	e000      	b.n	800b556 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800b554:	2200      	movs	r2, #0
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55e:	1e5a      	subs	r2, r3, #1
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56c:	4413      	add	r3, r2
 800b56e:	1e5a      	subs	r2, r3, #1
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57c:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800b582:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 800b584:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b592:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800b598:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59e:	4413      	add	r3, r2
 800b5a0:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b5be:	4b23      	ldr	r3, [pc, #140]	; (800b64c <HAL_PWREx_EnableOverDrive+0x98>)
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c2:	4a22      	ldr	r2, [pc, #136]	; (800b64c <HAL_PWREx_EnableOverDrive+0x98>)
 800b5c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5c8:	6413      	str	r3, [r2, #64]	; 0x40
 800b5ca:	4b20      	ldr	r3, [pc, #128]	; (800b64c <HAL_PWREx_EnableOverDrive+0x98>)
 800b5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b5d6:	4b1e      	ldr	r3, [pc, #120]	; (800b650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a1d      	ldr	r2, [pc, #116]	; (800b650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b5dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b5e2:	f7fb ffdd 	bl	80075a0 <HAL_GetTick>
 800b5e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b5e8:	e009      	b.n	800b5fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b5ea:	f7fb ffd9 	bl	80075a0 <HAL_GetTick>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5f8:	d901      	bls.n	800b5fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e022      	b.n	800b644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b5fe:	4b14      	ldr	r3, [pc, #80]	; (800b650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b60a:	d1ee      	bne.n	800b5ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a0f      	ldr	r2, [pc, #60]	; (800b650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b618:	f7fb ffc2 	bl	80075a0 <HAL_GetTick>
 800b61c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b61e:	e009      	b.n	800b634 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b620:	f7fb ffbe 	bl	80075a0 <HAL_GetTick>
 800b624:	4602      	mov	r2, r0
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b62e:	d901      	bls.n	800b634 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e007      	b.n	800b644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b634:	4b06      	ldr	r3, [pc, #24]	; (800b650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b63c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b640:	d1ee      	bne.n	800b620 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	40023800 	.word	0x40023800
 800b650:	40007000 	.word	0x40007000

0800b654 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af02      	add	r7, sp, #8
 800b65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b65c:	f7fb ffa0 	bl	80075a0 <HAL_GetTick>
 800b660:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e067      	b.n	800b73c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10b      	bne.n	800b690 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7f7 fa9f 	bl	8002bc4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b686:	f241 3188 	movw	r1, #5000	; 0x1388
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fae8 	bl	800bc60 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	021a      	lsls	r2, r3, #8
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2120      	movs	r1, #32
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fae0 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b6c0:	7afb      	ldrb	r3, [r7, #11]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d135      	bne.n	800b732 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <HAL_QSPI_Init+0xf0>)
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	6852      	ldr	r2, [r2, #4]
 800b6d4:	0611      	lsls	r1, r2, #24
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	68d2      	ldr	r2, [r2, #12]
 800b6da:	4311      	orrs	r1, r2
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	69d2      	ldr	r2, [r2, #28]
 800b6e0:	4311      	orrs	r1, r2
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	6a12      	ldr	r2, [r2, #32]
 800b6e6:	4311      	orrs	r1, r2
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	4b14      	ldr	r3, [pc, #80]	; (800b748 <HAL_QSPI_Init+0xf4>)
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	6912      	ldr	r2, [r2, #16]
 800b6fe:	0411      	lsls	r1, r2, #16
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	6952      	ldr	r2, [r2, #20]
 800b704:	4311      	orrs	r1, r2
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6992      	ldr	r2, [r2, #24]
 800b70a:	4311      	orrs	r1, r2
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	6812      	ldr	r2, [r2, #0]
 800b710:	430b      	orrs	r3, r1
 800b712:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f042 0201 	orr.w	r2, r2, #1
 800b722:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b73a:	7afb      	ldrb	r3, [r7, #11]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	00ffff2f 	.word	0x00ffff2f
 800b748:	ffe0f8fe 	.word	0xffe0f8fe

0800b74c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e016      	b.n	800b78c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 0201 	bic.w	r2, r2, #1
 800b76c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7f7 fad8 	bl	8002d24 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af02      	add	r7, sp, #8
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b7a0:	f7fb fefe 	bl	80075a0 <HAL_GetTick>
 800b7a4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d101      	bne.n	800b7b6 <HAL_QSPI_Command+0x22>
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	e048      	b.n	800b848 <HAL_QSPI_Command+0xb4>
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d137      	bne.n	800b83a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	2120      	movs	r1, #32
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 fa4a 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d125      	bne.n	800b83e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	68b9      	ldr	r1, [r7, #8]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f000 fa77 	bl	800bcea <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	2b00      	cmp	r3, #0
 800b802:	d115      	bne.n	800b830 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	2201      	movs	r2, #1
 800b80c:	2102      	movs	r1, #2
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 fa34 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b818:	7dfb      	ldrb	r3, [r7, #23]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10f      	bne.n	800b83e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2202      	movs	r2, #2
 800b824:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b82e:	e006      	b.n	800b83e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b838:	e001      	b.n	800b83e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b83a:	2302      	movs	r3, #2
 800b83c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b846:	7dfb      	ldrb	r3, [r7, #23]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08a      	sub	sp, #40	; 0x28
 800b854:	af02      	add	r7, sp, #8
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b860:	f7fb fe9e 	bl	80075a0 <HAL_GetTick>
 800b864:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3320      	adds	r3, #32
 800b86c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b01      	cmp	r3, #1
 800b878:	d101      	bne.n	800b87e <HAL_QSPI_Transmit+0x2e>
 800b87a:	2302      	movs	r3, #2
 800b87c:	e076      	b.n	800b96c <HAL_QSPI_Transmit+0x11c>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d165      	bne.n	800b95e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d056      	beq.n	800b94c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2212      	movs	r2, #18
 800b8a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	695a      	ldr	r2, [r3, #20]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b8d2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b8d4:	e01b      	b.n	800b90e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	2104      	movs	r1, #4
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 f9cb 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b8ea:	7ffb      	ldrb	r3, [r7, #31]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d113      	bne.n	800b918 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	781a      	ldrb	r2, [r3, #0]
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1df      	bne.n	800b8d6 <HAL_QSPI_Transmit+0x86>
 800b916:	e000      	b.n	800b91a <HAL_QSPI_Transmit+0xca>
          break;
 800b918:	bf00      	nop
      }

      if (status == HAL_OK)
 800b91a:	7ffb      	ldrb	r3, [r7, #31]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d110      	bne.n	800b942 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2201      	movs	r2, #1
 800b928:	2102      	movs	r1, #2
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 f9a6 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800b930:	4603      	mov	r3, r0
 800b932:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b934:	7ffb      	ldrb	r3, [r7, #31]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d103      	bne.n	800b942 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2202      	movs	r2, #2
 800b940:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b94a:	e00a      	b.n	800b962 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b950:	f043 0208 	orr.w	r2, r3, #8
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	77fb      	strb	r3, [r7, #31]
 800b95c:	e001      	b.n	800b962 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b95e:	2302      	movs	r3, #2
 800b960:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b96a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3720      	adds	r7, #32
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b08a      	sub	sp, #40	; 0x28
 800b978:	af02      	add	r7, sp, #8
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b984:	f7fb fe0c 	bl	80075a0 <HAL_GetTick>
 800b988:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3320      	adds	r3, #32
 800b998:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <HAL_QSPI_Receive+0x36>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e07d      	b.n	800baa6 <HAL_QSPI_Receive+0x132>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d16c      	bne.n	800ba98 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d05d      	beq.n	800ba86 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2222      	movs	r2, #34	; 0x22
 800b9ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ba02:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800ba0c:	e01c      	b.n	800ba48 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2201      	movs	r2, #1
 800ba16:	2106      	movs	r1, #6
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f000 f92f 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800ba22:	7ffb      	ldrb	r3, [r7, #31]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d114      	bne.n	800ba52 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	7812      	ldrb	r2, [r2, #0]
 800ba30:	b2d2      	uxtb	r2, r2
 800ba32:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	1e5a      	subs	r2, r3, #1
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1de      	bne.n	800ba0e <HAL_QSPI_Receive+0x9a>
 800ba50:	e000      	b.n	800ba54 <HAL_QSPI_Receive+0xe0>
          break;
 800ba52:	bf00      	nop
      }

      if (status == HAL_OK)
 800ba54:	7ffb      	ldrb	r3, [r7, #31]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d110      	bne.n	800ba7c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	2201      	movs	r2, #1
 800ba62:	2102      	movs	r1, #2
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 f909 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800ba6e:	7ffb      	ldrb	r3, [r7, #31]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d103      	bne.n	800ba7c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba84:	e00a      	b.n	800ba9c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8a:	f043 0208 	orr.w	r2, r3, #8
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	77fb      	strb	r3, [r7, #31]
 800ba96:	e001      	b.n	800ba9c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800baa4:	7ffb      	ldrb	r3, [r7, #31]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3720      	adds	r7, #32
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b088      	sub	sp, #32
 800bab2:	af02      	add	r7, sp, #8
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800babc:	f7fb fd70 	bl	80075a0 <HAL_GetTick>
 800bac0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d101      	bne.n	800bad2 <HAL_QSPI_AutoPolling+0x24>
 800bace:	2302      	movs	r3, #2
 800bad0:	e060      	b.n	800bb94 <HAL_QSPI_AutoPolling+0xe6>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d14f      	bne.n	800bb86 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2242      	movs	r2, #66	; 0x42
 800baf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	2200      	movs	r2, #0
 800bafc:	2120      	movs	r1, #32
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 f8bc 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d13d      	bne.n	800bb8a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	6812      	ldr	r2, [r2, #0]
 800bb16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	6852      	ldr	r2, [r2, #4]
 800bb20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	6892      	ldr	r2, [r2, #8]
 800bb2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	431a      	orrs	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800bb44:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68da      	ldr	r2, [r3, #12]
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800bb4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 f8c8 	bl	800bcea <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2201      	movs	r2, #1
 800bb62:	2108      	movs	r1, #8
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f889 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10a      	bne.n	800bb8a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2208      	movs	r2, #8
 800bb7a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb84:	e001      	b.n	800bb8a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800bb86:	2302      	movs	r3, #2
 800bb88:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b088      	sub	sp, #32
 800bba0:	af02      	add	r7, sp, #8
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bba8:	f7fb fcfa 	bl	80075a0 <HAL_GetTick>
 800bbac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d101      	bne.n	800bbbe <HAL_QSPI_MemoryMapped+0x22>
 800bbba:	2302      	movs	r3, #2
 800bbbc:	e04c      	b.n	800bc58 <HAL_QSPI_MemoryMapped+0xbc>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d13b      	bne.n	800bc4a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2282      	movs	r2, #130	; 0x82
 800bbdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2120      	movs	r1, #32
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 f845 	bl	800bc7c <QSPI_WaitFlagStateUntilTimeout>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d128      	bne.n	800bc4e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f023 0108 	bic.w	r1, r3, #8
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	2b08      	cmp	r3, #8
 800bc18:	d110      	bne.n	800bc3c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	6812      	ldr	r2, [r2, #0]
 800bc22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2210      	movs	r2, #16
 800bc2a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bc3a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800bc3c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800bc40:	68b9      	ldr	r1, [r7, #8]
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 f851 	bl	800bcea <QSPI_Config>
 800bc48:	e001      	b.n	800bc4e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bc8c:	e01a      	b.n	800bcc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc94:	d016      	beq.n	800bcc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc96:	f7fb fc83 	bl	80075a0 <HAL_GetTick>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d302      	bcc.n	800bcac <QSPI_WaitFlagStateUntilTimeout+0x30>
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10b      	bne.n	800bcc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2204      	movs	r2, #4
 800bcb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb8:	f043 0201 	orr.w	r2, r3, #1
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e00e      	b.n	800bce2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	4013      	ands	r3, r2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bf14      	ite	ne
 800bcd2:	2301      	movne	r3, #1
 800bcd4:	2300      	moveq	r3, #0
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d1d6      	bne.n	800bc8e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d009      	beq.n	800bd12 <QSPI_Config+0x28>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bd04:	d005      	beq.n	800bd12 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3a01      	subs	r2, #1
 800bd10:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f000 80b9 	beq.w	800be8e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d05f      	beq.n	800bde4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	6892      	ldr	r2, [r2, #8]
 800bd2c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d031      	beq.n	800bd9a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd44:	431a      	orrs	r2, r3
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	049b      	lsls	r3, r3, #18
 800bd52:	431a      	orrs	r2, r3
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	431a      	orrs	r2, r3
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	431a      	orrs	r2, r3
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	431a      	orrs	r2, r3
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	ea42 0103 	orr.w	r1, r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bd8a:	f000 812e 	beq.w	800bfea <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	6852      	ldr	r2, [r2, #4]
 800bd96:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800bd98:	e127      	b.n	800bfea <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	431a      	orrs	r2, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	431a      	orrs	r2, r3
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	049b      	lsls	r3, r3, #18
 800bdb6:	431a      	orrs	r2, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	431a      	orrs	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	431a      	orrs	r2, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	431a      	orrs	r2, r3
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	ea42 0103 	orr.w	r1, r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	615a      	str	r2, [r3, #20]
}
 800bde2:	e102      	b.n	800bfea <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d02e      	beq.n	800be4a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf4:	431a      	orrs	r2, r3
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	431a      	orrs	r2, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	049b      	lsls	r3, r3, #18
 800be08:	431a      	orrs	r2, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	6a1b      	ldr	r3, [r3, #32]
 800be0e:	431a      	orrs	r2, r3
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	431a      	orrs	r2, r3
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	431a      	orrs	r2, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	431a      	orrs	r2, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	ea42 0103 	orr.w	r1, r2, r3
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	430a      	orrs	r2, r1
 800be32:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be3a:	f000 80d6 	beq.w	800bfea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	6852      	ldr	r2, [r2, #4]
 800be46:	619a      	str	r2, [r3, #24]
}
 800be48:	e0cf      	b.n	800bfea <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be52:	431a      	orrs	r2, r3
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be58:	431a      	orrs	r2, r3
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	431a      	orrs	r2, r3
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	695b      	ldr	r3, [r3, #20]
 800be64:	049b      	lsls	r3, r3, #18
 800be66:	431a      	orrs	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	431a      	orrs	r2, r3
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	69db      	ldr	r3, [r3, #28]
 800be72:	431a      	orrs	r2, r3
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	431a      	orrs	r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	ea42 0103 	orr.w	r1, r2, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	430a      	orrs	r2, r1
 800be8a:	615a      	str	r2, [r3, #20]
}
 800be8c:	e0ad      	b.n	800bfea <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d058      	beq.n	800bf48 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	6892      	ldr	r2, [r2, #8]
 800be9e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d02d      	beq.n	800bf04 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb0:	431a      	orrs	r2, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb6:	431a      	orrs	r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebc:	431a      	orrs	r2, r3
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	049b      	lsls	r3, r3, #18
 800bec4:	431a      	orrs	r2, r3
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	431a      	orrs	r2, r3
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	6a1b      	ldr	r3, [r3, #32]
 800bed0:	431a      	orrs	r2, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	431a      	orrs	r2, r3
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	69db      	ldr	r3, [r3, #28]
 800bedc:	431a      	orrs	r2, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	ea42 0103 	orr.w	r1, r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	430a      	orrs	r2, r1
 800beee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bef6:	d078      	beq.n	800bfea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	6852      	ldr	r2, [r2, #4]
 800bf00:	619a      	str	r2, [r3, #24]
}
 800bf02:	e072      	b.n	800bfea <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf12:	431a      	orrs	r2, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	049b      	lsls	r3, r3, #18
 800bf20:	431a      	orrs	r2, r3
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	431a      	orrs	r2, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6a1b      	ldr	r3, [r3, #32]
 800bf2c:	431a      	orrs	r2, r3
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	69db      	ldr	r3, [r3, #28]
 800bf32:	431a      	orrs	r2, r3
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	ea42 0103 	orr.w	r1, r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	615a      	str	r2, [r3, #20]
}
 800bf46:	e050      	b.n	800bfea <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	69db      	ldr	r3, [r3, #28]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d02a      	beq.n	800bfa6 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf58:	431a      	orrs	r2, r3
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	431a      	orrs	r2, r3
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	695b      	ldr	r3, [r3, #20]
 800bf6a:	049b      	lsls	r3, r3, #18
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	431a      	orrs	r2, r3
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	ea42 0103 	orr.w	r1, r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bf98:	d027      	beq.n	800bfea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	6852      	ldr	r2, [r2, #4]
 800bfa2:	619a      	str	r2, [r3, #24]
}
 800bfa4:	e021      	b.n	800bfea <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d01d      	beq.n	800bfea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfbc:	431a      	orrs	r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	695b      	ldr	r3, [r3, #20]
 800bfc8:	049b      	lsls	r3, r3, #18
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	6a1b      	ldr	r3, [r3, #32]
 800bfd0:	431a      	orrs	r2, r3
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	69db      	ldr	r3, [r3, #28]
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	ea42 0103 	orr.w	r1, r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	615a      	str	r2, [r3, #20]
}
 800bfea:	bf00      	nop
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
	...

0800bff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c000:	2300      	movs	r3, #0
 800c002:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e29b      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 8087 	beq.w	800c12a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c01c:	4b96      	ldr	r3, [pc, #600]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f003 030c 	and.w	r3, r3, #12
 800c024:	2b04      	cmp	r3, #4
 800c026:	d00c      	beq.n	800c042 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c028:	4b93      	ldr	r3, [pc, #588]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f003 030c 	and.w	r3, r3, #12
 800c030:	2b08      	cmp	r3, #8
 800c032:	d112      	bne.n	800c05a <HAL_RCC_OscConfig+0x62>
 800c034:	4b90      	ldr	r3, [pc, #576]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c03c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c040:	d10b      	bne.n	800c05a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c042:	4b8d      	ldr	r3, [pc, #564]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d06c      	beq.n	800c128 <HAL_RCC_OscConfig+0x130>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d168      	bne.n	800c128 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e275      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c062:	d106      	bne.n	800c072 <HAL_RCC_OscConfig+0x7a>
 800c064:	4b84      	ldr	r3, [pc, #528]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a83      	ldr	r2, [pc, #524]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c06a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	e02e      	b.n	800c0d0 <HAL_RCC_OscConfig+0xd8>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10c      	bne.n	800c094 <HAL_RCC_OscConfig+0x9c>
 800c07a:	4b7f      	ldr	r3, [pc, #508]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a7e      	ldr	r2, [pc, #504]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c084:	6013      	str	r3, [r2, #0]
 800c086:	4b7c      	ldr	r3, [pc, #496]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a7b      	ldr	r2, [pc, #492]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c08c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	e01d      	b.n	800c0d0 <HAL_RCC_OscConfig+0xd8>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c09c:	d10c      	bne.n	800c0b8 <HAL_RCC_OscConfig+0xc0>
 800c09e:	4b76      	ldr	r3, [pc, #472]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a75      	ldr	r2, [pc, #468]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0a8:	6013      	str	r3, [r2, #0]
 800c0aa:	4b73      	ldr	r3, [pc, #460]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a72      	ldr	r2, [pc, #456]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0b4:	6013      	str	r3, [r2, #0]
 800c0b6:	e00b      	b.n	800c0d0 <HAL_RCC_OscConfig+0xd8>
 800c0b8:	4b6f      	ldr	r3, [pc, #444]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a6e      	ldr	r2, [pc, #440]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	4b6c      	ldr	r3, [pc, #432]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a6b      	ldr	r2, [pc, #428]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d013      	beq.n	800c100 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d8:	f7fb fa62 	bl	80075a0 <HAL_GetTick>
 800c0dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0de:	e008      	b.n	800c0f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c0e0:	f7fb fa5e 	bl	80075a0 <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	2b64      	cmp	r3, #100	; 0x64
 800c0ec:	d901      	bls.n	800c0f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e229      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0f2:	4b61      	ldr	r3, [pc, #388]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0f0      	beq.n	800c0e0 <HAL_RCC_OscConfig+0xe8>
 800c0fe:	e014      	b.n	800c12a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c100:	f7fb fa4e 	bl	80075a0 <HAL_GetTick>
 800c104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c106:	e008      	b.n	800c11a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c108:	f7fb fa4a 	bl	80075a0 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	2b64      	cmp	r3, #100	; 0x64
 800c114:	d901      	bls.n	800c11a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e215      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c11a:	4b57      	ldr	r3, [pc, #348]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1f0      	bne.n	800c108 <HAL_RCC_OscConfig+0x110>
 800c126:	e000      	b.n	800c12a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f003 0302 	and.w	r3, r3, #2
 800c132:	2b00      	cmp	r3, #0
 800c134:	d069      	beq.n	800c20a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c136:	4b50      	ldr	r3, [pc, #320]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	f003 030c 	and.w	r3, r3, #12
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00b      	beq.n	800c15a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c142:	4b4d      	ldr	r3, [pc, #308]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f003 030c 	and.w	r3, r3, #12
 800c14a:	2b08      	cmp	r3, #8
 800c14c:	d11c      	bne.n	800c188 <HAL_RCC_OscConfig+0x190>
 800c14e:	4b4a      	ldr	r3, [pc, #296]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d116      	bne.n	800c188 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c15a:	4b47      	ldr	r3, [pc, #284]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 0302 	and.w	r3, r3, #2
 800c162:	2b00      	cmp	r3, #0
 800c164:	d005      	beq.n	800c172 <HAL_RCC_OscConfig+0x17a>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d001      	beq.n	800c172 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e1e9      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c172:	4b41      	ldr	r3, [pc, #260]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	493d      	ldr	r1, [pc, #244]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c182:	4313      	orrs	r3, r2
 800c184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c186:	e040      	b.n	800c20a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d023      	beq.n	800c1d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c190:	4b39      	ldr	r3, [pc, #228]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a38      	ldr	r2, [pc, #224]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c196:	f043 0301 	orr.w	r3, r3, #1
 800c19a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c19c:	f7fb fa00 	bl	80075a0 <HAL_GetTick>
 800c1a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1a2:	e008      	b.n	800c1b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1a4:	f7fb f9fc 	bl	80075a0 <HAL_GetTick>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d901      	bls.n	800c1b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e1c7      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1b6:	4b30      	ldr	r3, [pc, #192]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 0302 	and.w	r3, r3, #2
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d0f0      	beq.n	800c1a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1c2:	4b2d      	ldr	r3, [pc, #180]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	4929      	ldr	r1, [pc, #164]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	600b      	str	r3, [r1, #0]
 800c1d6:	e018      	b.n	800c20a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c1d8:	4b27      	ldr	r3, [pc, #156]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a26      	ldr	r2, [pc, #152]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c1de:	f023 0301 	bic.w	r3, r3, #1
 800c1e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1e4:	f7fb f9dc 	bl	80075a0 <HAL_GetTick>
 800c1e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c1ea:	e008      	b.n	800c1fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1ec:	f7fb f9d8 	bl	80075a0 <HAL_GetTick>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d901      	bls.n	800c1fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e1a3      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c1fe:	4b1e      	ldr	r3, [pc, #120]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0302 	and.w	r3, r3, #2
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1f0      	bne.n	800c1ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 0308 	and.w	r3, r3, #8
 800c212:	2b00      	cmp	r3, #0
 800c214:	d038      	beq.n	800c288 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d019      	beq.n	800c252 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c21e:	4b16      	ldr	r3, [pc, #88]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c222:	4a15      	ldr	r2, [pc, #84]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c224:	f043 0301 	orr.w	r3, r3, #1
 800c228:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c22a:	f7fb f9b9 	bl	80075a0 <HAL_GetTick>
 800c22e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c230:	e008      	b.n	800c244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c232:	f7fb f9b5 	bl	80075a0 <HAL_GetTick>
 800c236:	4602      	mov	r2, r0
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d901      	bls.n	800c244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e180      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c244:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c248:	f003 0302 	and.w	r3, r3, #2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0f0      	beq.n	800c232 <HAL_RCC_OscConfig+0x23a>
 800c250:	e01a      	b.n	800c288 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c252:	4b09      	ldr	r3, [pc, #36]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c256:	4a08      	ldr	r2, [pc, #32]	; (800c278 <HAL_RCC_OscConfig+0x280>)
 800c258:	f023 0301 	bic.w	r3, r3, #1
 800c25c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c25e:	f7fb f99f 	bl	80075a0 <HAL_GetTick>
 800c262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c264:	e00a      	b.n	800c27c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c266:	f7fb f99b 	bl	80075a0 <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	2b02      	cmp	r3, #2
 800c272:	d903      	bls.n	800c27c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e166      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
 800c278:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c27c:	4b92      	ldr	r3, [pc, #584]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c27e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1ee      	bne.n	800c266 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 80a4 	beq.w	800c3de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c296:	4b8c      	ldr	r3, [pc, #560]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10d      	bne.n	800c2be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2a2:	4b89      	ldr	r3, [pc, #548]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	4a88      	ldr	r2, [pc, #544]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2ac:	6413      	str	r3, [r2, #64]	; 0x40
 800c2ae:	4b86      	ldr	r3, [pc, #536]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2b6:	60bb      	str	r3, [r7, #8]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2be:	4b83      	ldr	r3, [pc, #524]	; (800c4cc <HAL_RCC_OscConfig+0x4d4>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d118      	bne.n	800c2fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c2ca:	4b80      	ldr	r3, [pc, #512]	; (800c4cc <HAL_RCC_OscConfig+0x4d4>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a7f      	ldr	r2, [pc, #508]	; (800c4cc <HAL_RCC_OscConfig+0x4d4>)
 800c2d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c2d6:	f7fb f963 	bl	80075a0 <HAL_GetTick>
 800c2da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2dc:	e008      	b.n	800c2f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2de:	f7fb f95f 	bl	80075a0 <HAL_GetTick>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	2b64      	cmp	r3, #100	; 0x64
 800c2ea:	d901      	bls.n	800c2f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e12a      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2f0:	4b76      	ldr	r3, [pc, #472]	; (800c4cc <HAL_RCC_OscConfig+0x4d4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d0f0      	beq.n	800c2de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d106      	bne.n	800c312 <HAL_RCC_OscConfig+0x31a>
 800c304:	4b70      	ldr	r3, [pc, #448]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c308:	4a6f      	ldr	r2, [pc, #444]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c30a:	f043 0301 	orr.w	r3, r3, #1
 800c30e:	6713      	str	r3, [r2, #112]	; 0x70
 800c310:	e02d      	b.n	800c36e <HAL_RCC_OscConfig+0x376>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10c      	bne.n	800c334 <HAL_RCC_OscConfig+0x33c>
 800c31a:	4b6b      	ldr	r3, [pc, #428]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c31e:	4a6a      	ldr	r2, [pc, #424]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c320:	f023 0301 	bic.w	r3, r3, #1
 800c324:	6713      	str	r3, [r2, #112]	; 0x70
 800c326:	4b68      	ldr	r3, [pc, #416]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c32a:	4a67      	ldr	r2, [pc, #412]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c32c:	f023 0304 	bic.w	r3, r3, #4
 800c330:	6713      	str	r3, [r2, #112]	; 0x70
 800c332:	e01c      	b.n	800c36e <HAL_RCC_OscConfig+0x376>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	2b05      	cmp	r3, #5
 800c33a:	d10c      	bne.n	800c356 <HAL_RCC_OscConfig+0x35e>
 800c33c:	4b62      	ldr	r3, [pc, #392]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c340:	4a61      	ldr	r2, [pc, #388]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c342:	f043 0304 	orr.w	r3, r3, #4
 800c346:	6713      	str	r3, [r2, #112]	; 0x70
 800c348:	4b5f      	ldr	r3, [pc, #380]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c34a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c34c:	4a5e      	ldr	r2, [pc, #376]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c34e:	f043 0301 	orr.w	r3, r3, #1
 800c352:	6713      	str	r3, [r2, #112]	; 0x70
 800c354:	e00b      	b.n	800c36e <HAL_RCC_OscConfig+0x376>
 800c356:	4b5c      	ldr	r3, [pc, #368]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c35a:	4a5b      	ldr	r2, [pc, #364]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c35c:	f023 0301 	bic.w	r3, r3, #1
 800c360:	6713      	str	r3, [r2, #112]	; 0x70
 800c362:	4b59      	ldr	r3, [pc, #356]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c366:	4a58      	ldr	r2, [pc, #352]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c368:	f023 0304 	bic.w	r3, r3, #4
 800c36c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d015      	beq.n	800c3a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c376:	f7fb f913 	bl	80075a0 <HAL_GetTick>
 800c37a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c37c:	e00a      	b.n	800c394 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c37e:	f7fb f90f 	bl	80075a0 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d901      	bls.n	800c394 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	e0d8      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c394:	4b4c      	ldr	r3, [pc, #304]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c398:	f003 0302 	and.w	r3, r3, #2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0ee      	beq.n	800c37e <HAL_RCC_OscConfig+0x386>
 800c3a0:	e014      	b.n	800c3cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3a2:	f7fb f8fd 	bl	80075a0 <HAL_GetTick>
 800c3a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3a8:	e00a      	b.n	800c3c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3aa:	f7fb f8f9 	bl	80075a0 <HAL_GetTick>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d901      	bls.n	800c3c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e0c2      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c3c0:	4b41      	ldr	r3, [pc, #260]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3c4:	f003 0302 	and.w	r3, r3, #2
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1ee      	bne.n	800c3aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d105      	bne.n	800c3de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3d2:	4b3d      	ldr	r3, [pc, #244]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d6:	4a3c      	ldr	r2, [pc, #240]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c3d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 80ae 	beq.w	800c544 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c3e8:	4b37      	ldr	r3, [pc, #220]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f003 030c 	and.w	r3, r3, #12
 800c3f0:	2b08      	cmp	r3, #8
 800c3f2:	d06d      	beq.n	800c4d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d14b      	bne.n	800c494 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3fc:	4b32      	ldr	r3, [pc, #200]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a31      	ldr	r2, [pc, #196]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c408:	f7fb f8ca 	bl	80075a0 <HAL_GetTick>
 800c40c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c40e:	e008      	b.n	800c422 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c410:	f7fb f8c6 	bl	80075a0 <HAL_GetTick>
 800c414:	4602      	mov	r2, r0
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d901      	bls.n	800c422 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c41e:	2303      	movs	r3, #3
 800c420:	e091      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c422:	4b29      	ldr	r3, [pc, #164]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1f0      	bne.n	800c410 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	69da      	ldr	r2, [r3, #28]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	431a      	orrs	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43c:	019b      	lsls	r3, r3, #6
 800c43e:	431a      	orrs	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c444:	085b      	lsrs	r3, r3, #1
 800c446:	3b01      	subs	r3, #1
 800c448:	041b      	lsls	r3, r3, #16
 800c44a:	431a      	orrs	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c450:	061b      	lsls	r3, r3, #24
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c458:	071b      	lsls	r3, r3, #28
 800c45a:	491b      	ldr	r1, [pc, #108]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c460:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a18      	ldr	r2, [pc, #96]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c46a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c46c:	f7fb f898 	bl	80075a0 <HAL_GetTick>
 800c470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c472:	e008      	b.n	800c486 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c474:	f7fb f894 	bl	80075a0 <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d901      	bls.n	800c486 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e05f      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c486:	4b10      	ldr	r3, [pc, #64]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0f0      	beq.n	800c474 <HAL_RCC_OscConfig+0x47c>
 800c492:	e057      	b.n	800c544 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c494:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a0b      	ldr	r2, [pc, #44]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c49a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c49e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4a0:	f7fb f87e 	bl	80075a0 <HAL_GetTick>
 800c4a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4a6:	e008      	b.n	800c4ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4a8:	f7fb f87a 	bl	80075a0 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d901      	bls.n	800c4ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e045      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c4ba:	4b03      	ldr	r3, [pc, #12]	; (800c4c8 <HAL_RCC_OscConfig+0x4d0>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1f0      	bne.n	800c4a8 <HAL_RCC_OscConfig+0x4b0>
 800c4c6:	e03d      	b.n	800c544 <HAL_RCC_OscConfig+0x54c>
 800c4c8:	40023800 	.word	0x40023800
 800c4cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c4d0:	4b1f      	ldr	r3, [pc, #124]	; (800c550 <HAL_RCC_OscConfig+0x558>)
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d030      	beq.n	800c540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d129      	bne.n	800c540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d122      	bne.n	800c540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c500:	4013      	ands	r3, r2
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c506:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c508:	4293      	cmp	r3, r2
 800c50a:	d119      	bne.n	800c540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c516:	085b      	lsrs	r3, r3, #1
 800c518:	3b01      	subs	r3, #1
 800c51a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d10f      	bne.n	800c540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d107      	bne.n	800c540 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c53a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d001      	beq.n	800c544 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	e000      	b.n	800c546 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	40023800 	.word	0x40023800

0800c554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d101      	bne.n	800c56c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	e0d0      	b.n	800c70e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c56c:	4b6a      	ldr	r3, [pc, #424]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 030f 	and.w	r3, r3, #15
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	429a      	cmp	r2, r3
 800c578:	d910      	bls.n	800c59c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c57a:	4b67      	ldr	r3, [pc, #412]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f023 020f 	bic.w	r2, r3, #15
 800c582:	4965      	ldr	r1, [pc, #404]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	4313      	orrs	r3, r2
 800c588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c58a:	4b63      	ldr	r3, [pc, #396]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 030f 	and.w	r3, r3, #15
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	429a      	cmp	r2, r3
 800c596:	d001      	beq.n	800c59c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e0b8      	b.n	800c70e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d020      	beq.n	800c5ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0304 	and.w	r3, r3, #4
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d005      	beq.n	800c5c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c5b4:	4b59      	ldr	r3, [pc, #356]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	4a58      	ldr	r2, [pc, #352]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c5ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c5be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 0308 	and.w	r3, r3, #8
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d005      	beq.n	800c5d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c5cc:	4b53      	ldr	r3, [pc, #332]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	4a52      	ldr	r2, [pc, #328]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c5d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c5d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5d8:	4b50      	ldr	r3, [pc, #320]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	494d      	ldr	r1, [pc, #308]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 0301 	and.w	r3, r3, #1
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d040      	beq.n	800c678 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d107      	bne.n	800c60e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5fe:	4b47      	ldr	r3, [pc, #284]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d115      	bne.n	800c636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e07f      	b.n	800c70e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	2b02      	cmp	r3, #2
 800c614:	d107      	bne.n	800c626 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c616:	4b41      	ldr	r3, [pc, #260]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d109      	bne.n	800c636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e073      	b.n	800c70e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c626:	4b3d      	ldr	r3, [pc, #244]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 0302 	and.w	r3, r3, #2
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e06b      	b.n	800c70e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c636:	4b39      	ldr	r3, [pc, #228]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f023 0203 	bic.w	r2, r3, #3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	4936      	ldr	r1, [pc, #216]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c644:	4313      	orrs	r3, r2
 800c646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c648:	f7fa ffaa 	bl	80075a0 <HAL_GetTick>
 800c64c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c64e:	e00a      	b.n	800c666 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c650:	f7fa ffa6 	bl	80075a0 <HAL_GetTick>
 800c654:	4602      	mov	r2, r0
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c65e:	4293      	cmp	r3, r2
 800c660:	d901      	bls.n	800c666 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c662:	2303      	movs	r3, #3
 800c664:	e053      	b.n	800c70e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c666:	4b2d      	ldr	r3, [pc, #180]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f003 020c 	and.w	r2, r3, #12
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	429a      	cmp	r2, r3
 800c676:	d1eb      	bne.n	800c650 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c678:	4b27      	ldr	r3, [pc, #156]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	429a      	cmp	r2, r3
 800c684:	d210      	bcs.n	800c6a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c686:	4b24      	ldr	r3, [pc, #144]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f023 020f 	bic.w	r2, r3, #15
 800c68e:	4922      	ldr	r1, [pc, #136]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	4313      	orrs	r3, r2
 800c694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c696:	4b20      	ldr	r3, [pc, #128]	; (800c718 <HAL_RCC_ClockConfig+0x1c4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 030f 	and.w	r3, r3, #15
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d001      	beq.n	800c6a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e032      	b.n	800c70e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 0304 	and.w	r3, r3, #4
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d008      	beq.n	800c6c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6b4:	4b19      	ldr	r3, [pc, #100]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	4916      	ldr	r1, [pc, #88]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0308 	and.w	r3, r3, #8
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c6d2:	4b12      	ldr	r3, [pc, #72]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	00db      	lsls	r3, r3, #3
 800c6e0:	490e      	ldr	r1, [pc, #56]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c6e6:	f000 f821 	bl	800c72c <HAL_RCC_GetSysClockFreq>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <HAL_RCC_ClockConfig+0x1c8>)
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	091b      	lsrs	r3, r3, #4
 800c6f2:	f003 030f 	and.w	r3, r3, #15
 800c6f6:	490a      	ldr	r1, [pc, #40]	; (800c720 <HAL_RCC_ClockConfig+0x1cc>)
 800c6f8:	5ccb      	ldrb	r3, [r1, r3]
 800c6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c6fe:	4a09      	ldr	r2, [pc, #36]	; (800c724 <HAL_RCC_ClockConfig+0x1d0>)
 800c700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c702:	4b09      	ldr	r3, [pc, #36]	; (800c728 <HAL_RCC_ClockConfig+0x1d4>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4618      	mov	r0, r3
 800c708:	f7f6 fc42 	bl	8002f90 <HAL_InitTick>

  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	40023c00 	.word	0x40023c00
 800c71c:	40023800 	.word	0x40023800
 800c720:	08013934 	.word	0x08013934
 800c724:	20000028 	.word	0x20000028
 800c728:	200000ac 	.word	0x200000ac

0800c72c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c72c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c730:	b090      	sub	sp, #64	; 0x40
 800c732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	637b      	str	r3, [r7, #52]	; 0x34
 800c738:	2300      	movs	r3, #0
 800c73a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c73c:	2300      	movs	r3, #0
 800c73e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c744:	4b59      	ldr	r3, [pc, #356]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	f003 030c 	and.w	r3, r3, #12
 800c74c:	2b08      	cmp	r3, #8
 800c74e:	d00d      	beq.n	800c76c <HAL_RCC_GetSysClockFreq+0x40>
 800c750:	2b08      	cmp	r3, #8
 800c752:	f200 80a1 	bhi.w	800c898 <HAL_RCC_GetSysClockFreq+0x16c>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <HAL_RCC_GetSysClockFreq+0x34>
 800c75a:	2b04      	cmp	r3, #4
 800c75c:	d003      	beq.n	800c766 <HAL_RCC_GetSysClockFreq+0x3a>
 800c75e:	e09b      	b.n	800c898 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c760:	4b53      	ldr	r3, [pc, #332]	; (800c8b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800c762:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c764:	e09b      	b.n	800c89e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c766:	4b53      	ldr	r3, [pc, #332]	; (800c8b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800c768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c76a:	e098      	b.n	800c89e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c76c:	4b4f      	ldr	r3, [pc, #316]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c774:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c776:	4b4d      	ldr	r3, [pc, #308]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d028      	beq.n	800c7d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c782:	4b4a      	ldr	r3, [pc, #296]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	099b      	lsrs	r3, r3, #6
 800c788:	2200      	movs	r2, #0
 800c78a:	623b      	str	r3, [r7, #32]
 800c78c:	627a      	str	r2, [r7, #36]	; 0x24
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c794:	2100      	movs	r1, #0
 800c796:	4b47      	ldr	r3, [pc, #284]	; (800c8b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800c798:	fb03 f201 	mul.w	r2, r3, r1
 800c79c:	2300      	movs	r3, #0
 800c79e:	fb00 f303 	mul.w	r3, r0, r3
 800c7a2:	4413      	add	r3, r2
 800c7a4:	4a43      	ldr	r2, [pc, #268]	; (800c8b4 <HAL_RCC_GetSysClockFreq+0x188>)
 800c7a6:	fba0 1202 	umull	r1, r2, r0, r2
 800c7aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7ac:	460a      	mov	r2, r1
 800c7ae:	62ba      	str	r2, [r7, #40]	; 0x28
 800c7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7b2:	4413      	add	r3, r2
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	61bb      	str	r3, [r7, #24]
 800c7bc:	61fa      	str	r2, [r7, #28]
 800c7be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c7c6:	f7f3 fd8b 	bl	80002e0 <__aeabi_uldivmod>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7d2:	e053      	b.n	800c87c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c7d4:	4b35      	ldr	r3, [pc, #212]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	099b      	lsrs	r3, r3, #6
 800c7da:	2200      	movs	r2, #0
 800c7dc:	613b      	str	r3, [r7, #16]
 800c7de:	617a      	str	r2, [r7, #20]
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c7e6:	f04f 0b00 	mov.w	fp, #0
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	465b      	mov	r3, fp
 800c7ee:	f04f 0000 	mov.w	r0, #0
 800c7f2:	f04f 0100 	mov.w	r1, #0
 800c7f6:	0159      	lsls	r1, r3, #5
 800c7f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c7fc:	0150      	lsls	r0, r2, #5
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	ebb2 080a 	subs.w	r8, r2, sl
 800c806:	eb63 090b 	sbc.w	r9, r3, fp
 800c80a:	f04f 0200 	mov.w	r2, #0
 800c80e:	f04f 0300 	mov.w	r3, #0
 800c812:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c816:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c81a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c81e:	ebb2 0408 	subs.w	r4, r2, r8
 800c822:	eb63 0509 	sbc.w	r5, r3, r9
 800c826:	f04f 0200 	mov.w	r2, #0
 800c82a:	f04f 0300 	mov.w	r3, #0
 800c82e:	00eb      	lsls	r3, r5, #3
 800c830:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c834:	00e2      	lsls	r2, r4, #3
 800c836:	4614      	mov	r4, r2
 800c838:	461d      	mov	r5, r3
 800c83a:	eb14 030a 	adds.w	r3, r4, sl
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	eb45 030b 	adc.w	r3, r5, fp
 800c844:	607b      	str	r3, [r7, #4]
 800c846:	f04f 0200 	mov.w	r2, #0
 800c84a:	f04f 0300 	mov.w	r3, #0
 800c84e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c852:	4629      	mov	r1, r5
 800c854:	028b      	lsls	r3, r1, #10
 800c856:	4621      	mov	r1, r4
 800c858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c85c:	4621      	mov	r1, r4
 800c85e:	028a      	lsls	r2, r1, #10
 800c860:	4610      	mov	r0, r2
 800c862:	4619      	mov	r1, r3
 800c864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c866:	2200      	movs	r2, #0
 800c868:	60bb      	str	r3, [r7, #8]
 800c86a:	60fa      	str	r2, [r7, #12]
 800c86c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c870:	f7f3 fd36 	bl	80002e0 <__aeabi_uldivmod>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4613      	mov	r3, r2
 800c87a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c87c:	4b0b      	ldr	r3, [pc, #44]	; (800c8ac <HAL_RCC_GetSysClockFreq+0x180>)
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	0c1b      	lsrs	r3, r3, #16
 800c882:	f003 0303 	and.w	r3, r3, #3
 800c886:	3301      	adds	r3, #1
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800c88c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	fbb2 f3f3 	udiv	r3, r2, r3
 800c894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c896:	e002      	b.n	800c89e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c898:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800c89a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c89c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3740      	adds	r7, #64	; 0x40
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8aa:	bf00      	nop
 800c8ac:	40023800 	.word	0x40023800
 800c8b0:	00f42400 	.word	0x00f42400
 800c8b4:	017d7840 	.word	0x017d7840

0800c8b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c8bc:	4b03      	ldr	r3, [pc, #12]	; (800c8cc <HAL_RCC_GetHCLKFreq+0x14>)
 800c8be:	681b      	ldr	r3, [r3, #0]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	20000028 	.word	0x20000028

0800c8d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c8d4:	f7ff fff0 	bl	800c8b8 <HAL_RCC_GetHCLKFreq>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	4b05      	ldr	r3, [pc, #20]	; (800c8f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	0a9b      	lsrs	r3, r3, #10
 800c8e0:	f003 0307 	and.w	r3, r3, #7
 800c8e4:	4903      	ldr	r1, [pc, #12]	; (800c8f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c8e6:	5ccb      	ldrb	r3, [r1, r3]
 800c8e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	40023800 	.word	0x40023800
 800c8f4:	08013944 	.word	0x08013944

0800c8f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c8fc:	f7ff ffdc 	bl	800c8b8 <HAL_RCC_GetHCLKFreq>
 800c900:	4602      	mov	r2, r0
 800c902:	4b05      	ldr	r3, [pc, #20]	; (800c918 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	0b5b      	lsrs	r3, r3, #13
 800c908:	f003 0307 	and.w	r3, r3, #7
 800c90c:	4903      	ldr	r1, [pc, #12]	; (800c91c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c90e:	5ccb      	ldrb	r3, [r1, r3]
 800c910:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c914:	4618      	mov	r0, r3
 800c916:	bd80      	pop	{r7, pc}
 800c918:	40023800 	.word	0x40023800
 800c91c:	08013944 	.word	0x08013944

0800c920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	220f      	movs	r2, #15
 800c92e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c930:	4b12      	ldr	r3, [pc, #72]	; (800c97c <HAL_RCC_GetClockConfig+0x5c>)
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	f003 0203 	and.w	r2, r3, #3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c93c:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <HAL_RCC_GetClockConfig+0x5c>)
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c948:	4b0c      	ldr	r3, [pc, #48]	; (800c97c <HAL_RCC_GetClockConfig+0x5c>)
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c954:	4b09      	ldr	r3, [pc, #36]	; (800c97c <HAL_RCC_GetClockConfig+0x5c>)
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	08db      	lsrs	r3, r3, #3
 800c95a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c962:	4b07      	ldr	r3, [pc, #28]	; (800c980 <HAL_RCC_GetClockConfig+0x60>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 020f 	and.w	r2, r3, #15
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	601a      	str	r2, [r3, #0]
}
 800c96e:	bf00      	nop
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	40023800 	.word	0x40023800
 800c980:	40023c00 	.word	0x40023c00

0800c984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b088      	sub	sp, #32
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d012      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c9ac:	4b69      	ldr	r3, [pc, #420]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	4a68      	ldr	r2, [pc, #416]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c9b6:	6093      	str	r3, [r2, #8]
 800c9b8:	4b66      	ldr	r3, [pc, #408]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9ba:	689a      	ldr	r2, [r3, #8]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c0:	4964      	ldr	r1, [pc, #400]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d017      	beq.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9de:	4b5d      	ldr	r3, [pc, #372]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ec:	4959      	ldr	r1, [pc, #356]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9fc:	d101      	bne.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d017      	beq.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ca1a:	4b4e      	ldr	r3, [pc, #312]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca28:	494a      	ldr	r1, [pc, #296]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca38:	d101      	bne.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ca46:	2301      	movs	r3, #1
 800ca48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ca56:	2301      	movs	r3, #1
 800ca58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f003 0320 	and.w	r3, r3, #32
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 808b 	beq.w	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ca68:	4b3a      	ldr	r3, [pc, #232]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6c:	4a39      	ldr	r2, [pc, #228]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca72:	6413      	str	r3, [r2, #64]	; 0x40
 800ca74:	4b37      	ldr	r3, [pc, #220]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca7c:	60bb      	str	r3, [r7, #8]
 800ca7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ca80:	4b35      	ldr	r3, [pc, #212]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a34      	ldr	r2, [pc, #208]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ca86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca8c:	f7fa fd88 	bl	80075a0 <HAL_GetTick>
 800ca90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ca92:	e008      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca94:	f7fa fd84 	bl	80075a0 <HAL_GetTick>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	2b64      	cmp	r3, #100	; 0x64
 800caa0:	d901      	bls.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e38f      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800caa6:	4b2c      	ldr	r3, [pc, #176]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0f0      	beq.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cab2:	4b28      	ldr	r3, [pc, #160]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d035      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caca:	693a      	ldr	r2, [r7, #16]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d02e      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cad0:	4b20      	ldr	r3, [pc, #128]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cad8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cada:	4b1e      	ldr	r3, [pc, #120]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cade:	4a1d      	ldr	r2, [pc, #116]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cae4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cae6:	4b1b      	ldr	r3, [pc, #108]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caea:	4a1a      	ldr	r2, [pc, #104]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800caec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caf0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800caf2:	4a18      	ldr	r2, [pc, #96]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800caf8:	4b16      	ldr	r3, [pc, #88]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d114      	bne.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb04:	f7fa fd4c 	bl	80075a0 <HAL_GetTick>
 800cb08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb0a:	e00a      	b.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb0c:	f7fa fd48 	bl	80075a0 <HAL_GetTick>
 800cb10:	4602      	mov	r2, r0
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d901      	bls.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	e351      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb22:	4b0c      	ldr	r3, [pc, #48]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb26:	f003 0302 	and.w	r3, r3, #2
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0ee      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb3a:	d111      	bne.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cb3c:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cb48:	4b04      	ldr	r3, [pc, #16]	; (800cb5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cb4a:	400b      	ands	r3, r1
 800cb4c:	4901      	ldr	r1, [pc, #4]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	608b      	str	r3, [r1, #8]
 800cb52:	e00b      	b.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cb54:	40023800 	.word	0x40023800
 800cb58:	40007000 	.word	0x40007000
 800cb5c:	0ffffcff 	.word	0x0ffffcff
 800cb60:	4bac      	ldr	r3, [pc, #688]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	4aab      	ldr	r2, [pc, #684]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cb6a:	6093      	str	r3, [r2, #8]
 800cb6c:	4ba9      	ldr	r3, [pc, #676]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb78:	49a6      	ldr	r1, [pc, #664]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0310 	and.w	r3, r3, #16
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d010      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb8a:	4ba2      	ldr	r3, [pc, #648]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb90:	4aa0      	ldr	r2, [pc, #640]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cb9a:	4b9e      	ldr	r3, [pc, #632]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba4:	499b      	ldr	r1, [pc, #620]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cba6:	4313      	orrs	r3, r2
 800cba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00a      	beq.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cbb8:	4b96      	ldr	r3, [pc, #600]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbc6:	4993      	ldr	r1, [pc, #588]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00a      	beq.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cbda:	4b8e      	ldr	r3, [pc, #568]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbe8:	498a      	ldr	r1, [pc, #552]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbea:	4313      	orrs	r3, r2
 800cbec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00a      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cbfc:	4b85      	ldr	r3, [pc, #532]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc0a:	4982      	ldr	r1, [pc, #520]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00a      	beq.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cc1e:	4b7d      	ldr	r3, [pc, #500]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2c:	4979      	ldr	r1, [pc, #484]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00a      	beq.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cc40:	4b74      	ldr	r3, [pc, #464]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc46:	f023 0203 	bic.w	r2, r3, #3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc4e:	4971      	ldr	r1, [pc, #452]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc50:	4313      	orrs	r3, r2
 800cc52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cc62:	4b6c      	ldr	r3, [pc, #432]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc68:	f023 020c 	bic.w	r2, r3, #12
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc70:	4968      	ldr	r1, [pc, #416]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00a      	beq.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cc84:	4b63      	ldr	r3, [pc, #396]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc92:	4960      	ldr	r1, [pc, #384]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc94:	4313      	orrs	r3, r2
 800cc96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00a      	beq.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cca6:	4b5b      	ldr	r3, [pc, #364]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb4:	4957      	ldr	r1, [pc, #348]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00a      	beq.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ccc8:	4b52      	ldr	r3, [pc, #328]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd6:	494f      	ldr	r1, [pc, #316]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00a      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ccea:	4b4a      	ldr	r3, [pc, #296]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf8:	4946      	ldr	r1, [pc, #280]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00a      	beq.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800cd0c:	4b41      	ldr	r3, [pc, #260]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd1a:	493e      	ldr	r1, [pc, #248]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00a      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800cd2e:	4b39      	ldr	r3, [pc, #228]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd3c:	4935      	ldr	r1, [pc, #212]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00a      	beq.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cd50:	4b30      	ldr	r3, [pc, #192]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd5e:	492d      	ldr	r1, [pc, #180]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd60:	4313      	orrs	r3, r2
 800cd62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d011      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cd72:	4b28      	ldr	r3, [pc, #160]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd80:	4924      	ldr	r1, [pc, #144]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cd82:	4313      	orrs	r3, r2
 800cd84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd90:	d101      	bne.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800cd92:	2301      	movs	r3, #1
 800cd94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 0308 	and.w	r3, r3, #8
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800cda2:	2301      	movs	r3, #1
 800cda4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00a      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cdb2:	4b18      	ldr	r3, [pc, #96]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cdb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdb8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdc0:	4914      	ldr	r1, [pc, #80]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00b      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cde4:	490b      	ldr	r1, [pc, #44]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cde6:	4313      	orrs	r3, r2
 800cde8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00f      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdfe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce08:	4902      	ldr	r1, [pc, #8]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ce10:	e002      	b.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800ce12:	bf00      	nop
 800ce14:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00b      	beq.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ce24:	4b8a      	ldr	r3, [pc, #552]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce34:	4986      	ldr	r1, [pc, #536]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce36:	4313      	orrs	r3, r2
 800ce38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ce48:	4b81      	ldr	r3, [pc, #516]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce58:	497d      	ldr	r1, [pc, #500]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d006      	beq.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 80d6 	beq.w	800d020 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ce74:	4b76      	ldr	r3, [pc, #472]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a75      	ldr	r2, [pc, #468]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce80:	f7fa fb8e 	bl	80075a0 <HAL_GetTick>
 800ce84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ce86:	e008      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ce88:	f7fa fb8a 	bl	80075a0 <HAL_GetTick>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	2b64      	cmp	r3, #100	; 0x64
 800ce94:	d901      	bls.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce96:	2303      	movs	r3, #3
 800ce98:	e195      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ce9a:	4b6d      	ldr	r3, [pc, #436]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1f0      	bne.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d021      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d11d      	bne.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ceba:	4b65      	ldr	r3, [pc, #404]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cec0:	0c1b      	lsrs	r3, r3, #16
 800cec2:	f003 0303 	and.w	r3, r3, #3
 800cec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cec8:	4b61      	ldr	r3, [pc, #388]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ceca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cece:	0e1b      	lsrs	r3, r3, #24
 800ced0:	f003 030f 	and.w	r3, r3, #15
 800ced4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	019a      	lsls	r2, r3, #6
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	041b      	lsls	r3, r3, #16
 800cee0:	431a      	orrs	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	061b      	lsls	r3, r3, #24
 800cee6:	431a      	orrs	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	071b      	lsls	r3, r3, #28
 800ceee:	4958      	ldr	r1, [pc, #352]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cef0:	4313      	orrs	r3, r2
 800cef2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d004      	beq.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf0a:	d00a      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d02e      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf20:	d129      	bne.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cf22:	4b4b      	ldr	r3, [pc, #300]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf28:	0c1b      	lsrs	r3, r3, #16
 800cf2a:	f003 0303 	and.w	r3, r3, #3
 800cf2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cf30:	4b47      	ldr	r3, [pc, #284]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf36:	0f1b      	lsrs	r3, r3, #28
 800cf38:	f003 0307 	and.w	r3, r3, #7
 800cf3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	019a      	lsls	r2, r3, #6
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	041b      	lsls	r3, r3, #16
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	061b      	lsls	r3, r3, #24
 800cf50:	431a      	orrs	r2, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	071b      	lsls	r3, r3, #28
 800cf56:	493e      	ldr	r1, [pc, #248]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cf5e:	4b3c      	ldr	r3, [pc, #240]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf64:	f023 021f 	bic.w	r2, r3, #31
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	4938      	ldr	r1, [pc, #224]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf70:	4313      	orrs	r3, r2
 800cf72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d01d      	beq.n	800cfbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cf82:	4b33      	ldr	r3, [pc, #204]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf88:	0e1b      	lsrs	r3, r3, #24
 800cf8a:	f003 030f 	and.w	r3, r3, #15
 800cf8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cf90:	4b2f      	ldr	r3, [pc, #188]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf96:	0f1b      	lsrs	r3, r3, #28
 800cf98:	f003 0307 	and.w	r3, r3, #7
 800cf9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	019a      	lsls	r2, r3, #6
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	041b      	lsls	r3, r3, #16
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	061b      	lsls	r3, r3, #24
 800cfb0:	431a      	orrs	r2, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	071b      	lsls	r3, r3, #28
 800cfb6:	4926      	ldr	r1, [pc, #152]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d011      	beq.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	019a      	lsls	r2, r3, #6
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	041b      	lsls	r3, r3, #16
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	061b      	lsls	r3, r3, #24
 800cfde:	431a      	orrs	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	071b      	lsls	r3, r3, #28
 800cfe6:	491a      	ldr	r1, [pc, #104]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cfee:	4b18      	ldr	r3, [pc, #96]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a17      	ldr	r2, [pc, #92]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cffa:	f7fa fad1 	bl	80075a0 <HAL_GetTick>
 800cffe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d000:	e008      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d002:	f7fa facd 	bl	80075a0 <HAL_GetTick>
 800d006:	4602      	mov	r2, r0
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	2b64      	cmp	r3, #100	; 0x64
 800d00e:	d901      	bls.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e0d8      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d014:	4b0e      	ldr	r3, [pc, #56]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d0f0      	beq.n	800d002 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	2b01      	cmp	r3, #1
 800d024:	f040 80ce 	bne.w	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d028:	4b09      	ldr	r3, [pc, #36]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a08      	ldr	r2, [pc, #32]	; (800d050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d02e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d034:	f7fa fab4 	bl	80075a0 <HAL_GetTick>
 800d038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d03a:	e00b      	b.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d03c:	f7fa fab0 	bl	80075a0 <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	2b64      	cmp	r3, #100	; 0x64
 800d048:	d904      	bls.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d04a:	2303      	movs	r3, #3
 800d04c:	e0bb      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800d04e:	bf00      	nop
 800d050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d054:	4b5e      	ldr	r3, [pc, #376]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d05c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d060:	d0ec      	beq.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d072:	2b00      	cmp	r3, #0
 800d074:	d009      	beq.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d02e      	beq.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	d12a      	bne.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d08a:	4b51      	ldr	r3, [pc, #324]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d090:	0c1b      	lsrs	r3, r3, #16
 800d092:	f003 0303 	and.w	r3, r3, #3
 800d096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d098:	4b4d      	ldr	r3, [pc, #308]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d09e:	0f1b      	lsrs	r3, r3, #28
 800d0a0:	f003 0307 	and.w	r3, r3, #7
 800d0a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	019a      	lsls	r2, r3, #6
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	041b      	lsls	r3, r3, #16
 800d0b0:	431a      	orrs	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	061b      	lsls	r3, r3, #24
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	071b      	lsls	r3, r3, #28
 800d0be:	4944      	ldr	r1, [pc, #272]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d0c6:	4b42      	ldr	r3, [pc, #264]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d0c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	021b      	lsls	r3, r3, #8
 800d0d8:	493d      	ldr	r1, [pc, #244]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d022      	beq.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0f4:	d11d      	bne.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d0f6:	4b36      	ldr	r3, [pc, #216]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0fc:	0e1b      	lsrs	r3, r3, #24
 800d0fe:	f003 030f 	and.w	r3, r3, #15
 800d102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d104:	4b32      	ldr	r3, [pc, #200]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d10a:	0f1b      	lsrs	r3, r3, #28
 800d10c:	f003 0307 	and.w	r3, r3, #7
 800d110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	019a      	lsls	r2, r3, #6
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	041b      	lsls	r3, r3, #16
 800d11e:	431a      	orrs	r2, r3
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	061b      	lsls	r3, r3, #24
 800d124:	431a      	orrs	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	071b      	lsls	r3, r3, #28
 800d12a:	4929      	ldr	r1, [pc, #164]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d12c:	4313      	orrs	r3, r2
 800d12e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f003 0308 	and.w	r3, r3, #8
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d028      	beq.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d13e:	4b24      	ldr	r3, [pc, #144]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d144:	0e1b      	lsrs	r3, r3, #24
 800d146:	f003 030f 	and.w	r3, r3, #15
 800d14a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d14c:	4b20      	ldr	r3, [pc, #128]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d152:	0c1b      	lsrs	r3, r3, #16
 800d154:	f003 0303 	and.w	r3, r3, #3
 800d158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	019a      	lsls	r2, r3, #6
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	041b      	lsls	r3, r3, #16
 800d164:	431a      	orrs	r2, r3
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	061b      	lsls	r3, r3, #24
 800d16a:	431a      	orrs	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	69db      	ldr	r3, [r3, #28]
 800d170:	071b      	lsls	r3, r3, #28
 800d172:	4917      	ldr	r1, [pc, #92]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d174:	4313      	orrs	r3, r2
 800d176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d17a:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d188:	4911      	ldr	r1, [pc, #68]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d18a:	4313      	orrs	r3, r2
 800d18c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d190:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a0e      	ldr	r2, [pc, #56]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d19a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d19c:	f7fa fa00 	bl	80075a0 <HAL_GetTick>
 800d1a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d1a2:	e008      	b.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d1a4:	f7fa f9fc 	bl	80075a0 <HAL_GetTick>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	2b64      	cmp	r3, #100	; 0x64
 800d1b0:	d901      	bls.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	e007      	b.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d1b6:	4b06      	ldr	r3, [pc, #24]	; (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1c2:	d1ef      	bne.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3720      	adds	r7, #32
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	40023800 	.word	0x40023800

0800d1d4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a8c      	ldr	r2, [pc, #560]	; (800d414 <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
 800d1e4:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800d1e6:	4b8c      	ldr	r3, [pc, #560]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1ec:	099b      	lsrs	r3, r3, #6
 800d1ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d1f6:	4b88      	ldr	r3, [pc, #544]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d1f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1fc:	0c1b      	lsrs	r3, r3, #16
 800d1fe:	f003 0203 	and.w	r2, r3, #3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d206:	4b84      	ldr	r3, [pc, #528]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20c:	0e1b      	lsrs	r3, r3, #24
 800d20e:	f003 020f 	and.w	r2, r3, #15
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d216:	4b80      	ldr	r3, [pc, #512]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d21c:	0f1b      	lsrs	r3, r3, #28
 800d21e:	f003 0207 	and.w	r2, r3, #7
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800d226:	4b7c      	ldr	r3, [pc, #496]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d22c:	099b      	lsrs	r3, r3, #6
 800d22e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d236:	4b78      	ldr	r3, [pc, #480]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d23c:	0c1b      	lsrs	r3, r3, #16
 800d23e:	f003 0203 	and.w	r2, r3, #3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d246:	4b74      	ldr	r3, [pc, #464]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d24c:	0e1b      	lsrs	r3, r3, #24
 800d24e:	f003 020f 	and.w	r2, r3, #15
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d256:	4b70      	ldr	r3, [pc, #448]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d25c:	0f1b      	lsrs	r3, r3, #28
 800d25e:	f003 0207 	and.w	r2, r3, #7
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800d266:	4b6c      	ldr	r3, [pc, #432]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d26c:	f003 021f 	and.w	r2, r3, #31
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800d274:	4b68      	ldr	r3, [pc, #416]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d27a:	0a1b      	lsrs	r3, r3, #8
 800d27c:	f003 021f 	and.w	r2, r3, #31
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800d284:	4b64      	ldr	r3, [pc, #400]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d28a:	0c1b      	lsrs	r3, r3, #16
 800d28c:	f003 0203 	and.w	r2, r3, #3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800d294:	4b60      	ldr	r3, [pc, #384]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d29a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800d2a2:	4b5d      	ldr	r3, [pc, #372]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d2a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2a8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800d2b0:	4b59      	ldr	r3, [pc, #356]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800d2bc:	4b56      	ldr	r3, [pc, #344]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800d2ca:	4b53      	ldr	r3, [pc, #332]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2d0:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800d2d8:	4b4f      	ldr	r3, [pc, #316]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2de:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800d2e6:	4b4c      	ldr	r3, [pc, #304]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2ec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800d2f4:	4b48      	ldr	r3, [pc, #288]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2fa:	f003 0203 	and.w	r2, r3, #3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800d302:	4b45      	ldr	r3, [pc, #276]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d308:	f003 020c 	and.w	r2, r3, #12
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800d310:	4b41      	ldr	r3, [pc, #260]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d316:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800d31e:	4b3e      	ldr	r3, [pc, #248]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d324:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800d32c:	4b3a      	ldr	r3, [pc, #232]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d332:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800d33a:	4b37      	ldr	r3, [pc, #220]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d340:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800d348:	4b33      	ldr	r3, [pc, #204]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800d356:	4b30      	ldr	r3, [pc, #192]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d35c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d364:	4b2c      	ldr	r3, [pc, #176]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d36a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800d372:	4b29      	ldr	r3, [pc, #164]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d378:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800d380:	4b25      	ldr	r3, [pc, #148]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d386:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800d38e:	4b22      	ldr	r3, [pc, #136]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d394:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800d39e:	4b1e      	ldr	r3, [pc, #120]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3a4:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800d3ae:	4b1a      	ldr	r3, [pc, #104]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b4:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800d3be:	4b16      	ldr	r3, [pc, #88]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3c4:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800d3ce:	4b12      	ldr	r3, [pc, #72]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d3d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800d3d8:	4b0f      	ldr	r3, [pc, #60]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800d3e8:	4b0b      	ldr	r3, [pc, #44]	; (800d418 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800d3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d103      	bne.n	800d3fe <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800d3fc:	e003      	b.n	800d406 <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d404:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d406:	bf00      	nop
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	1cfffff1 	.word	0x1cfffff1
 800d418:	40023800 	.word	0x40023800

0800d41c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b087      	sub	sp, #28
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d43a:	f040 80a4 	bne.w	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d43e:	4ba6      	ldr	r3, [pc, #664]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d444:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d44c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d454:	f000 808a 	beq.w	800d56c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d45e:	f200 8091 	bhi.w	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d468:	d07d      	beq.n	800d566 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d470:	f200 8088 	bhi.w	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d004      	beq.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d480:	d039      	beq.n	800d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d482:	e07f      	b.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d484:	4b94      	ldr	r3, [pc, #592]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d108      	bne.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d490:	4b91      	ldr	r3, [pc, #580]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d498:	4a90      	ldr	r2, [pc, #576]	; (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d49e:	613b      	str	r3, [r7, #16]
 800d4a0:	e007      	b.n	800d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d4a2:	4b8d      	ldr	r3, [pc, #564]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4aa:	4a8d      	ldr	r2, [pc, #564]	; (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d4b2:	4b89      	ldr	r3, [pc, #548]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b8:	0e1b      	lsrs	r3, r3, #24
 800d4ba:	f003 030f 	and.w	r3, r3, #15
 800d4be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d4c0:	4b85      	ldr	r3, [pc, #532]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4c6:	099b      	lsrs	r3, r3, #6
 800d4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	fb03 f202 	mul.w	r2, r3, r2
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4d8:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d4da:	4b7f      	ldr	r3, [pc, #508]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e0:	0a1b      	lsrs	r3, r3, #8
 800d4e2:	f003 031f 	and.w	r3, r3, #31
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f2:	617b      	str	r3, [r7, #20]
        break;
 800d4f4:	e047      	b.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d4f6:	4b78      	ldr	r3, [pc, #480]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d108      	bne.n	800d514 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d502:	4b75      	ldr	r3, [pc, #468]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d50a:	4a74      	ldr	r2, [pc, #464]	; (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d510:	613b      	str	r3, [r7, #16]
 800d512:	e007      	b.n	800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d514:	4b70      	ldr	r3, [pc, #448]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d51c:	4a70      	ldr	r2, [pc, #448]	; (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d522:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d524:	4b6c      	ldr	r3, [pc, #432]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d52a:	0e1b      	lsrs	r3, r3, #24
 800d52c:	f003 030f 	and.w	r3, r3, #15
 800d530:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d532:	4b69      	ldr	r3, [pc, #420]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d538:	099b      	lsrs	r3, r3, #6
 800d53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	fb03 f202 	mul.w	r2, r3, r2
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	fbb2 f3f3 	udiv	r3, r2, r3
 800d54a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d54c:	4b62      	ldr	r3, [pc, #392]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d54e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d552:	f003 031f 	and.w	r3, r3, #31
 800d556:	3301      	adds	r3, #1
 800d558:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d562:	617b      	str	r3, [r7, #20]
        break;
 800d564:	e00f      	b.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d566:	4b5f      	ldr	r3, [pc, #380]	; (800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800d568:	617b      	str	r3, [r7, #20]
        break;
 800d56a:	e00c      	b.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d56c:	4b5a      	ldr	r3, [pc, #360]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d102      	bne.n	800d57e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800d578:	4b58      	ldr	r3, [pc, #352]	; (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d57a:	617b      	str	r3, [r7, #20]
        break;
 800d57c:	e003      	b.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800d57e:	4b58      	ldr	r3, [pc, #352]	; (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d580:	617b      	str	r3, [r7, #20]
        break;
 800d582:	e000      	b.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800d584:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d58c:	f040 80ad 	bne.w	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d590:	4b51      	ldr	r3, [pc, #324]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d596:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d59e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d5a6:	f000 808a 	beq.w	800d6be <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d5b0:	f200 809a 	bhi.w	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5ba:	d07d      	beq.n	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5c2:	f200 8091 	bhi.w	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d004      	beq.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5d2:	d039      	beq.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d5d4:	e088      	b.n	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d5d6:	4b40      	ldr	r3, [pc, #256]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d108      	bne.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d5e2:	4b3d      	ldr	r3, [pc, #244]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5ea:	4a3c      	ldr	r2, [pc, #240]	; (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5f0:	613b      	str	r3, [r7, #16]
 800d5f2:	e007      	b.n	800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d5f4:	4b38      	ldr	r3, [pc, #224]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5fc:	4a38      	ldr	r2, [pc, #224]	; (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d602:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d604:	4b34      	ldr	r3, [pc, #208]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d60a:	0e1b      	lsrs	r3, r3, #24
 800d60c:	f003 030f 	and.w	r3, r3, #15
 800d610:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d612:	4b31      	ldr	r3, [pc, #196]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d618:	099b      	lsrs	r3, r3, #6
 800d61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	fb03 f202 	mul.w	r2, r3, r2
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	fbb2 f3f3 	udiv	r3, r2, r3
 800d62a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d62c:	4b2a      	ldr	r3, [pc, #168]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d62e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d632:	0a1b      	lsrs	r3, r3, #8
 800d634:	f003 031f 	and.w	r3, r3, #31
 800d638:	3301      	adds	r3, #1
 800d63a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	fbb2 f3f3 	udiv	r3, r2, r3
 800d644:	617b      	str	r3, [r7, #20]
        break;
 800d646:	e050      	b.n	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d648:	4b23      	ldr	r3, [pc, #140]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d650:	2b00      	cmp	r3, #0
 800d652:	d108      	bne.n	800d666 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d654:	4b20      	ldr	r3, [pc, #128]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d65c:	4a1f      	ldr	r2, [pc, #124]	; (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d662:	613b      	str	r3, [r7, #16]
 800d664:	e007      	b.n	800d676 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d666:	4b1c      	ldr	r3, [pc, #112]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d66e:	4a1c      	ldr	r2, [pc, #112]	; (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d670:	fbb2 f3f3 	udiv	r3, r2, r3
 800d674:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d676:	4b18      	ldr	r3, [pc, #96]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d67c:	0e1b      	lsrs	r3, r3, #24
 800d67e:	f003 030f 	and.w	r3, r3, #15
 800d682:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d684:	4b14      	ldr	r3, [pc, #80]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d68a:	099b      	lsrs	r3, r3, #6
 800d68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d690:	693a      	ldr	r2, [r7, #16]
 800d692:	fb03 f202 	mul.w	r2, r3, r2
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	fbb2 f3f3 	udiv	r3, r2, r3
 800d69c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d69e:	4b0e      	ldr	r3, [pc, #56]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6a4:	f003 031f 	and.w	r3, r3, #31
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d6ac:	697a      	ldr	r2, [r7, #20]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6b4:	617b      	str	r3, [r7, #20]
        break;
 800d6b6:	e018      	b.n	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d6b8:	4b0a      	ldr	r3, [pc, #40]	; (800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800d6ba:	617b      	str	r3, [r7, #20]
        break;
 800d6bc:	e015      	b.n	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d6be:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d102      	bne.n	800d6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800d6ca:	4b04      	ldr	r3, [pc, #16]	; (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d6cc:	617b      	str	r3, [r7, #20]
        break;
 800d6ce:	e00c      	b.n	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800d6d0:	4b03      	ldr	r3, [pc, #12]	; (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800d6d2:	617b      	str	r3, [r7, #20]
        break;
 800d6d4:	e009      	b.n	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800d6d6:	bf00      	nop
 800d6d8:	40023800 	.word	0x40023800
 800d6dc:	00f42400 	.word	0x00f42400
 800d6e0:	017d7840 	.word	0x017d7840
 800d6e4:	00bb8000 	.word	0x00bb8000
        break;
 800d6e8:	bf00      	nop
      }
    }
  }

  return frequency;
 800d6ea:	697b      	ldr	r3, [r7, #20]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	371c      	adds	r7, #28
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d700:	2300      	movs	r3, #0
 800d702:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d704:	2300      	movs	r3, #0
 800d706:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d101      	bne.n	800d716 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	e156      	b.n	800d9c4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7f5 fb86 	bl	8002e3c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2202      	movs	r2, #2
 800d734:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fb13 	bl	800dd64 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	2b02      	cmp	r3, #2
 800d744:	d00c      	beq.n	800d760 <HAL_SAI_Init+0x68>
 800d746:	2b02      	cmp	r3, #2
 800d748:	d80d      	bhi.n	800d766 <HAL_SAI_Init+0x6e>
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <HAL_SAI_Init+0x5c>
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d003      	beq.n	800d75a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d752:	e008      	b.n	800d766 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	61fb      	str	r3, [r7, #28]
      break;
 800d758:	e006      	b.n	800d768 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d75a:	2310      	movs	r3, #16
 800d75c:	61fb      	str	r3, [r7, #28]
      break;
 800d75e:	e003      	b.n	800d768 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d760:	2320      	movs	r3, #32
 800d762:	61fb      	str	r3, [r7, #28]
      break;
 800d764:	e000      	b.n	800d768 <HAL_SAI_Init+0x70>
      break;
 800d766:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	2b03      	cmp	r3, #3
 800d76e:	d81e      	bhi.n	800d7ae <HAL_SAI_Init+0xb6>
 800d770:	a201      	add	r2, pc, #4	; (adr r2, 800d778 <HAL_SAI_Init+0x80>)
 800d772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d776:	bf00      	nop
 800d778:	0800d789 	.word	0x0800d789
 800d77c:	0800d78f 	.word	0x0800d78f
 800d780:	0800d797 	.word	0x0800d797
 800d784:	0800d79f 	.word	0x0800d79f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	617b      	str	r3, [r7, #20]
    }
    break;
 800d78c:	e010      	b.n	800d7b0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d792:	617b      	str	r3, [r7, #20]
    }
    break;
 800d794:	e00c      	b.n	800d7b0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d79a:	617b      	str	r3, [r7, #20]
    }
    break;
 800d79c:	e008      	b.n	800d7b0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d79e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7a2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	f043 0301 	orr.w	r3, r3, #1
 800d7aa:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d7ac:	e000      	b.n	800d7b0 <HAL_SAI_Init+0xb8>
    default:
      break;
 800d7ae:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a85      	ldr	r2, [pc, #532]	; (800d9cc <HAL_SAI_Init+0x2d4>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d004      	beq.n	800d7c4 <HAL_SAI_Init+0xcc>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a84      	ldr	r2, [pc, #528]	; (800d9d0 <HAL_SAI_Init+0x2d8>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d103      	bne.n	800d7cc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d7c4:	4a83      	ldr	r2, [pc, #524]	; (800d9d4 <HAL_SAI_Init+0x2dc>)
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	6013      	str	r3, [r2, #0]
 800d7ca:	e002      	b.n	800d7d2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d7cc:	4a82      	ldr	r2, [pc, #520]	; (800d9d8 <HAL_SAI_Init+0x2e0>)
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	69db      	ldr	r3, [r3, #28]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d04c      	beq.n	800d874 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a7a      	ldr	r2, [pc, #488]	; (800d9cc <HAL_SAI_Init+0x2d4>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d004      	beq.n	800d7f2 <HAL_SAI_Init+0xfa>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a78      	ldr	r2, [pc, #480]	; (800d9d0 <HAL_SAI_Init+0x2d8>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d104      	bne.n	800d7fc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d7f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d7f6:	f7ff fe11 	bl	800d41c <HAL_RCCEx_GetPeriphCLKFreq>
 800d7fa:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a76      	ldr	r2, [pc, #472]	; (800d9dc <HAL_SAI_Init+0x2e4>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d004      	beq.n	800d810 <HAL_SAI_Init+0x118>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a75      	ldr	r2, [pc, #468]	; (800d9e0 <HAL_SAI_Init+0x2e8>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d104      	bne.n	800d81a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d810:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d814:	f7ff fe02 	bl	800d41c <HAL_RCCEx_GetPeriphCLKFreq>
 800d818:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	4613      	mov	r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4413      	add	r3, r2
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	461a      	mov	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	025b      	lsls	r3, r3, #9
 800d82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d830:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	4a6b      	ldr	r2, [pc, #428]	; (800d9e4 <HAL_SAI_Init+0x2ec>)
 800d836:	fba2 2303 	umull	r2, r3, r2, r3
 800d83a:	08da      	lsrs	r2, r3, #3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d840:	68f9      	ldr	r1, [r7, #12]
 800d842:	4b68      	ldr	r3, [pc, #416]	; (800d9e4 <HAL_SAI_Init+0x2ec>)
 800d844:	fba3 2301 	umull	r2, r3, r3, r1
 800d848:	08da      	lsrs	r2, r3, #3
 800d84a:	4613      	mov	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	005b      	lsls	r3, r3, #1
 800d852:	1aca      	subs	r2, r1, r3
 800d854:	2a08      	cmp	r2, #8
 800d856:	d904      	bls.n	800d862 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a1b      	ldr	r3, [r3, #32]
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d866:	2b04      	cmp	r3, #4
 800d868:	d104      	bne.n	800d874 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	085a      	lsrs	r2, r3, #1
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d003      	beq.n	800d884 <HAL_SAI_Init+0x18c>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	2b02      	cmp	r3, #2
 800d882:	d109      	bne.n	800d898 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d101      	bne.n	800d890 <HAL_SAI_Init+0x198>
 800d88c:	2300      	movs	r3, #0
 800d88e:	e001      	b.n	800d894 <HAL_SAI_Init+0x19c>
 800d890:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d894:	61bb      	str	r3, [r7, #24]
 800d896:	e008      	b.n	800d8aa <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d102      	bne.n	800d8a6 <HAL_SAI_Init+0x1ae>
 800d8a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8a4:	e000      	b.n	800d8a8 <HAL_SAI_Init+0x1b0>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	6819      	ldr	r1, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	4b4c      	ldr	r3, [pc, #304]	; (800d9e8 <HAL_SAI_Init+0x2f0>)
 800d8b6:	400b      	ands	r3, r1
 800d8b8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	6819      	ldr	r1, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d8ce:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d4:	431a      	orrs	r2, r3
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d8e2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d8ee:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	051b      	lsls	r3, r3, #20
 800d8f6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	430a      	orrs	r2, r1
 800d8fe:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6859      	ldr	r1, [r3, #4]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b38      	ldr	r3, [pc, #224]	; (800d9ec <HAL_SAI_Init+0x2f4>)
 800d90c:	400b      	ands	r3, r1
 800d90e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6859      	ldr	r1, [r3, #4]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	699a      	ldr	r2, [r3, #24]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91e:	431a      	orrs	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d924:	431a      	orrs	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	430a      	orrs	r2, r1
 800d92c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6899      	ldr	r1, [r3, #8]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	4b2d      	ldr	r3, [pc, #180]	; (800d9f0 <HAL_SAI_Init+0x2f8>)
 800d93a:	400b      	ands	r3, r1
 800d93c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6899      	ldr	r1, [r3, #8]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d948:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d94e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d954:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d95a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d960:	3b01      	subs	r3, #1
 800d962:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d964:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68d9      	ldr	r1, [r3, #12]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d97c:	400b      	ands	r3, r1
 800d97e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	68d9      	ldr	r1, [r3, #12]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d98e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d994:	041b      	lsls	r3, r3, #16
 800d996:	431a      	orrs	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d99c:	3b01      	subs	r3, #1
 800d99e:	021b      	lsls	r3, r3, #8
 800d9a0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	430a      	orrs	r2, r1
 800d9a8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3720      	adds	r7, #32
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	40015804 	.word	0x40015804
 800d9d0:	40015824 	.word	0x40015824
 800d9d4:	40015800 	.word	0x40015800
 800d9d8:	40015c00 	.word	0x40015c00
 800d9dc:	40015c04 	.word	0x40015c04
 800d9e0:	40015c24 	.word	0x40015c24
 800d9e4:	cccccccd 	.word	0xcccccccd
 800d9e8:	ff05c010 	.word	0xff05c010
 800d9ec:	ffff1ff0 	.word	0xffff1ff0
 800d9f0:	fff88000 	.word	0xfff88000

0800d9f4 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d101      	bne.n	800da06 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e027      	b.n	800da56 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2202      	movs	r2, #2
 800da0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2200      	movs	r2, #0
 800da14:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da1e:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f99f 	bl	800dd64 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685a      	ldr	r2, [r3, #4]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f042 0208 	orr.w	r2, r2, #8
 800da34:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7f5 fa4c 	bl	8002ed4 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	4613      	mov	r3, r2
 800da6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800da6e:	f7f9 fd97 	bl	80075a0 <HAL_GetTick>
 800da72:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <HAL_SAI_Transmit_DMA+0x20>
 800da7a:	88fb      	ldrh	r3, [r7, #6]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800da80:	2301      	movs	r3, #1
 800da82:	e093      	b.n	800dbac <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	f040 808c 	bne.w	800dbaa <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d101      	bne.n	800daa0 <HAL_SAI_Transmit_DMA+0x40>
 800da9c:	2302      	movs	r3, #2
 800da9e:	e085      	b.n	800dbac <HAL_SAI_Transmit_DMA+0x14c>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	88fa      	ldrh	r2, [r7, #6]
 800dab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	88fa      	ldrh	r2, [r7, #6]
 800daba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2212      	movs	r2, #18
 800daca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad2:	4a38      	ldr	r2, [pc, #224]	; (800dbb4 <HAL_SAI_Transmit_DMA+0x154>)
 800dad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dada:	4a37      	ldr	r2, [pc, #220]	; (800dbb8 <HAL_SAI_Transmit_DMA+0x158>)
 800dadc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae2:	4a36      	ldr	r2, [pc, #216]	; (800dbbc <HAL_SAI_Transmit_DMA+0x15c>)
 800dae4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daea:	2200      	movs	r2, #0
 800daec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf6:	4619      	mov	r1, r3
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	331c      	adds	r3, #28
 800dafe:	461a      	mov	r2, r3
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db06:	f7fa f8a7 	bl	8007c58 <HAL_DMA_Start_IT>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d005      	beq.n	800db1c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e047      	b.n	800dbac <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800db1c:	2100      	movs	r1, #0
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f000 f8ea 	bl	800dcf8 <SAI_InterruptFlag>
 800db24:	4601      	mov	r1, r0
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	691a      	ldr	r2, [r3, #16]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	430a      	orrs	r2, r1
 800db32:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800db42:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800db44:	e015      	b.n	800db72 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800db46:	f7f9 fd2b 	bl	80075a0 <HAL_GetTick>
 800db4a:	4602      	mov	r2, r0
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db54:	d90d      	bls.n	800db72 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	e01c      	b.n	800dbac <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d0e2      	beq.n	800db46 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d107      	bne.n	800db9e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800db9c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	e000      	b.n	800dbac <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800dbaa:	2302      	movs	r3, #2
  }
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3718      	adds	r7, #24
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	0800de35 	.word	0x0800de35
 800dbb8:	0800ddd5 	.word	0x0800ddd5
 800dbbc:	0800decd 	.word	0x0800decd

0800dbc0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d002      	beq.n	800dbda <HAL_SAI_Receive_DMA+0x1a>
 800dbd4:	88fb      	ldrh	r3, [r7, #6]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d101      	bne.n	800dbde <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e074      	b.n	800dcc8 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d16d      	bne.n	800dcc6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d101      	bne.n	800dbf8 <HAL_SAI_Receive_DMA+0x38>
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	e067      	b.n	800dcc8 <HAL_SAI_Receive_DMA+0x108>
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	88fa      	ldrh	r2, [r7, #6]
 800dc0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	88fa      	ldrh	r2, [r7, #6]
 800dc12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2222      	movs	r2, #34	; 0x22
 800dc22:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc2a:	4a29      	ldr	r2, [pc, #164]	; (800dcd0 <HAL_SAI_Receive_DMA+0x110>)
 800dc2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc32:	4a28      	ldr	r2, [pc, #160]	; (800dcd4 <HAL_SAI_Receive_DMA+0x114>)
 800dc34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc3a:	4a27      	ldr	r2, [pc, #156]	; (800dcd8 <HAL_SAI_Receive_DMA+0x118>)
 800dc3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc42:	2200      	movs	r2, #0
 800dc44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	331c      	adds	r3, #28
 800dc50:	4619      	mov	r1, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc56:	461a      	mov	r2, r3
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc5e:	f7f9 fffb 	bl	8007c58 <HAL_DMA_Start_IT>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d005      	beq.n	800dc74 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e029      	b.n	800dcc8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dc74:	2100      	movs	r1, #0
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f000 f83e 	bl	800dcf8 <SAI_InterruptFlag>
 800dc7c:	4601      	mov	r1, r0
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	691a      	ldr	r2, [r3, #16]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800dc9a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d107      	bne.n	800dcba <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dcb8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e000      	b.n	800dcc8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800dcc6:	2302      	movs	r3, #2
  }
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	0800deb1 	.word	0x0800deb1
 800dcd4:	0800de51 	.word	0x0800de51
 800dcd8:	0800decd 	.word	0x0800decd

0800dcdc <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dcea:	b2db      	uxtb	r3, r3
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800dd02:	2301      	movs	r3, #1
 800dd04:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d103      	bne.n	800dd14 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f043 0308 	orr.w	r3, r3, #8
 800dd12:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd18:	2b08      	cmp	r3, #8
 800dd1a:	d10b      	bne.n	800dd34 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	d003      	beq.n	800dd2c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d103      	bne.n	800dd34 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f043 0310 	orr.w	r3, r3, #16
 800dd32:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d003      	beq.n	800dd44 <SAI_InterruptFlag+0x4c>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d104      	bne.n	800dd4e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	e003      	b.n	800dd56 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f043 0304 	orr.w	r3, r3, #4
 800dd54:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800dd56:	68fb      	ldr	r3, [r7, #12]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800dd6c:	4b17      	ldr	r3, [pc, #92]	; (800ddcc <SAI_Disable+0x68>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a17      	ldr	r2, [pc, #92]	; (800ddd0 <SAI_Disable+0x6c>)
 800dd72:	fba2 2303 	umull	r2, r3, r2, r3
 800dd76:	0b1b      	lsrs	r3, r3, #12
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dd8e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	1e5a      	subs	r2, r3, #1
 800dd94:	60fa      	str	r2, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d10a      	bne.n	800ddb0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dda0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	72fb      	strb	r3, [r7, #11]
      break;
 800ddae:	e006      	b.n	800ddbe <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1e8      	bne.n	800dd90 <SAI_Disable+0x2c>

  return status;
 800ddbe:	7afb      	ldrb	r3, [r7, #11]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3714      	adds	r7, #20
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	20000028 	.word	0x20000028
 800ddd0:	95cbec1b 	.word	0x95cbec1b

0800ddd4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	69db      	ldr	r3, [r3, #28]
 800dde6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddea:	d01c      	beq.n	800de26 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800de02:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800de04:	2100      	movs	r1, #0
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7ff ff76 	bl	800dcf8 <SAI_InterruptFlag>
 800de0c:	4603      	mov	r3, r0
 800de0e:	43d9      	mvns	r1, r3
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	691a      	ldr	r2, [r3, #16]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	400a      	ands	r2, r1
 800de1c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2201      	movs	r2, #1
 800de22:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f7f7 fbaf 	bl	800558a <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800de2c:	bf00      	nop
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7f7 fbab 	bl	800559e <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800de48:	bf00      	nop
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de5c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	69db      	ldr	r3, [r3, #28]
 800de62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de66:	d01c      	beq.n	800dea2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800de76:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2200      	movs	r2, #0
 800de7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800de80:	2100      	movs	r1, #0
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7ff ff38 	bl	800dcf8 <SAI_InterruptFlag>
 800de88:	4603      	mov	r3, r0
 800de8a:	43d9      	mvns	r1, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	691a      	ldr	r2, [r3, #16]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	400a      	ands	r2, r1
 800de98:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f7f7 fc98 	bl	80057d8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800dea8:	bf00      	nop
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800debc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f7f7 fc80 	bl	80057c4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dee0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800def0:	2b01      	cmp	r3, #1
 800def2:	d004      	beq.n	800defe <SAI_DMAError+0x32>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800def8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800defa:	2b01      	cmp	r3, #1
 800defc:	d112      	bne.n	800df24 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800df0c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7ff ff28 	bl	800dd64 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2200      	movs	r2, #0
 800df20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7f7 fb45 	bl	80055b4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b082      	sub	sp, #8
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d101      	bne.n	800df46 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800df42:	2301      	movs	r3, #1
 800df44:	e025      	b.n	800df92 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d106      	bne.n	800df60 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7f3 fb42 	bl	80015e4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2202      	movs	r2, #2
 800df64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3304      	adds	r3, #4
 800df70:	4619      	mov	r1, r3
 800df72:	4610      	mov	r0, r2
 800df74:	f001 f83a 	bl	800efec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6818      	ldr	r0, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	461a      	mov	r2, r3
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	f001 f88e 	bl	800f0a4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b086      	sub	sp, #24
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	60f8      	str	r0, [r7, #12]
 800dfa2:	60b9      	str	r1, [r7, #8]
 800dfa4:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dfac:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800dfae:	7dfb      	ldrb	r3, [r7, #23]
 800dfb0:	2b02      	cmp	r3, #2
 800dfb2:	d101      	bne.n	800dfb8 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	e021      	b.n	800dffc <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800dfb8:	7dfb      	ldrb	r3, [r7, #23]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d002      	beq.n	800dfc4 <HAL_SDRAM_SendCommand+0x2a>
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	2b05      	cmp	r3, #5
 800dfc2:	d118      	bne.n	800dff6 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	68b9      	ldr	r1, [r7, #8]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f001 f8cf 	bl	800f178 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b02      	cmp	r3, #2
 800dfe0:	d104      	bne.n	800dfec <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2205      	movs	r2, #5
 800dfe6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800dfea:	e006      	b.n	800dffa <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800dff4:	e001      	b.n	800dffa <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e000      	b.n	800dffc <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b02      	cmp	r3, #2
 800e018:	d101      	bne.n	800e01e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e01a:	2302      	movs	r3, #2
 800e01c:	e016      	b.n	800e04c <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e024:	b2db      	uxtb	r3, r3
 800e026:	2b01      	cmp	r3, #1
 800e028:	d10f      	bne.n	800e04a <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2202      	movs	r2, #2
 800e02e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6839      	ldr	r1, [r7, #0]
 800e038:	4618      	mov	r0, r3
 800e03a:	f001 f8c1 	bl	800f1c0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e046:	2300      	movs	r3, #0
 800e048:	e000      	b.n	800e04c <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	e049      	b.n	800e0fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d106      	bne.n	800e080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f841 	bl	800e102 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2202      	movs	r2, #2
 800e084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	3304      	adds	r3, #4
 800e090:	4619      	mov	r1, r3
 800e092:	4610      	mov	r0, r2
 800e094:	f000 fa00 	bl	800e498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e102:	b480      	push	{r7}
 800e104:	b083      	sub	sp, #12
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
	...

0800e118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d001      	beq.n	800e130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e12c:	2301      	movs	r3, #1
 800e12e:	e054      	b.n	800e1da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2202      	movs	r2, #2
 800e134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	68da      	ldr	r2, [r3, #12]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f042 0201 	orr.w	r2, r2, #1
 800e146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a26      	ldr	r2, [pc, #152]	; (800e1e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d022      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e15a:	d01d      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a22      	ldr	r2, [pc, #136]	; (800e1ec <HAL_TIM_Base_Start_IT+0xd4>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d018      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a21      	ldr	r2, [pc, #132]	; (800e1f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d013      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a1f      	ldr	r2, [pc, #124]	; (800e1f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d00e      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a1e      	ldr	r2, [pc, #120]	; (800e1f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d009      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a1c      	ldr	r2, [pc, #112]	; (800e1fc <HAL_TIM_Base_Start_IT+0xe4>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d004      	beq.n	800e198 <HAL_TIM_Base_Start_IT+0x80>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a1b      	ldr	r2, [pc, #108]	; (800e200 <HAL_TIM_Base_Start_IT+0xe8>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d115      	bne.n	800e1c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689a      	ldr	r2, [r3, #8]
 800e19e:	4b19      	ldr	r3, [pc, #100]	; (800e204 <HAL_TIM_Base_Start_IT+0xec>)
 800e1a0:	4013      	ands	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b06      	cmp	r3, #6
 800e1a8:	d015      	beq.n	800e1d6 <HAL_TIM_Base_Start_IT+0xbe>
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1b0:	d011      	beq.n	800e1d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f042 0201 	orr.w	r2, r2, #1
 800e1c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1c2:	e008      	b.n	800e1d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f042 0201 	orr.w	r2, r2, #1
 800e1d2:	601a      	str	r2, [r3, #0]
 800e1d4:	e000      	b.n	800e1d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	40010000 	.word	0x40010000
 800e1ec:	40000400 	.word	0x40000400
 800e1f0:	40000800 	.word	0x40000800
 800e1f4:	40000c00 	.word	0x40000c00
 800e1f8:	40010400 	.word	0x40010400
 800e1fc:	40014000 	.word	0x40014000
 800e200:	40001800 	.word	0x40001800
 800e204:	00010007 	.word	0x00010007

0800e208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	f003 0302 	and.w	r3, r3, #2
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	d122      	bne.n	800e264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	f003 0302 	and.w	r3, r3, #2
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d11b      	bne.n	800e264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f06f 0202 	mvn.w	r2, #2
 800e234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2201      	movs	r2, #1
 800e23a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	699b      	ldr	r3, [r3, #24]
 800e242:	f003 0303 	and.w	r3, r3, #3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d003      	beq.n	800e252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f905 	bl	800e45a <HAL_TIM_IC_CaptureCallback>
 800e250:	e005      	b.n	800e25e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f8f7 	bl	800e446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 f908 	bl	800e46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	f003 0304 	and.w	r3, r3, #4
 800e26e:	2b04      	cmp	r3, #4
 800e270:	d122      	bne.n	800e2b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	2b04      	cmp	r3, #4
 800e27e:	d11b      	bne.n	800e2b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f06f 0204 	mvn.w	r2, #4
 800e288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2202      	movs	r2, #2
 800e28e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d003      	beq.n	800e2a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 f8db 	bl	800e45a <HAL_TIM_IC_CaptureCallback>
 800e2a4:	e005      	b.n	800e2b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 f8cd 	bl	800e446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 f8de 	bl	800e46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	f003 0308 	and.w	r3, r3, #8
 800e2c2:	2b08      	cmp	r3, #8
 800e2c4:	d122      	bne.n	800e30c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	f003 0308 	and.w	r3, r3, #8
 800e2d0:	2b08      	cmp	r3, #8
 800e2d2:	d11b      	bne.n	800e30c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f06f 0208 	mvn.w	r2, #8
 800e2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2204      	movs	r2, #4
 800e2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	69db      	ldr	r3, [r3, #28]
 800e2ea:	f003 0303 	and.w	r3, r3, #3
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d003      	beq.n	800e2fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 f8b1 	bl	800e45a <HAL_TIM_IC_CaptureCallback>
 800e2f8:	e005      	b.n	800e306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f8a3 	bl	800e446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f8b4 	bl	800e46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	f003 0310 	and.w	r3, r3, #16
 800e316:	2b10      	cmp	r3, #16
 800e318:	d122      	bne.n	800e360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	f003 0310 	and.w	r3, r3, #16
 800e324:	2b10      	cmp	r3, #16
 800e326:	d11b      	bne.n	800e360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f06f 0210 	mvn.w	r2, #16
 800e330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2208      	movs	r2, #8
 800e336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	69db      	ldr	r3, [r3, #28]
 800e33e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e342:	2b00      	cmp	r3, #0
 800e344:	d003      	beq.n	800e34e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 f887 	bl	800e45a <HAL_TIM_IC_CaptureCallback>
 800e34c:	e005      	b.n	800e35a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f879 	bl	800e446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f88a 	bl	800e46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	691b      	ldr	r3, [r3, #16]
 800e366:	f003 0301 	and.w	r3, r3, #1
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d10e      	bne.n	800e38c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	f003 0301 	and.w	r3, r3, #1
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d107      	bne.n	800e38c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f06f 0201 	mvn.w	r2, #1
 800e384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7f4 fbd2 	bl	8002b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e396:	2b80      	cmp	r3, #128	; 0x80
 800e398:	d10e      	bne.n	800e3b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3a4:	2b80      	cmp	r3, #128	; 0x80
 800e3a6:	d107      	bne.n	800e3b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e3b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f91a 	bl	800e5ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	691b      	ldr	r3, [r3, #16]
 800e3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3c6:	d10e      	bne.n	800e3e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3d2:	2b80      	cmp	r3, #128	; 0x80
 800e3d4:	d107      	bne.n	800e3e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f90d 	bl	800e600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3f0:	2b40      	cmp	r3, #64	; 0x40
 800e3f2:	d10e      	bne.n	800e412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3fe:	2b40      	cmp	r3, #64	; 0x40
 800e400:	d107      	bne.n	800e412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 f838 	bl	800e482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	f003 0320 	and.w	r3, r3, #32
 800e41c:	2b20      	cmp	r3, #32
 800e41e:	d10e      	bne.n	800e43e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	f003 0320 	and.w	r3, r3, #32
 800e42a:	2b20      	cmp	r3, #32
 800e42c:	d107      	bne.n	800e43e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f06f 0220 	mvn.w	r2, #32
 800e436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 f8cd 	bl	800e5d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e43e:	bf00      	nop
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e446:	b480      	push	{r7}
 800e448:	b083      	sub	sp, #12
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e44e:	bf00      	nop
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e45a:	b480      	push	{r7}
 800e45c:	b083      	sub	sp, #12
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e462:	bf00      	nop
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr

0800e46e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e46e:	b480      	push	{r7}
 800e470:	b083      	sub	sp, #12
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e476:	bf00      	nop
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr

0800e482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e482:	b480      	push	{r7}
 800e484:	b083      	sub	sp, #12
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e48a:	bf00      	nop
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
	...

0800e498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a40      	ldr	r2, [pc, #256]	; (800e5ac <TIM_Base_SetConfig+0x114>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d013      	beq.n	800e4d8 <TIM_Base_SetConfig+0x40>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4b6:	d00f      	beq.n	800e4d8 <TIM_Base_SetConfig+0x40>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a3d      	ldr	r2, [pc, #244]	; (800e5b0 <TIM_Base_SetConfig+0x118>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d00b      	beq.n	800e4d8 <TIM_Base_SetConfig+0x40>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4a3c      	ldr	r2, [pc, #240]	; (800e5b4 <TIM_Base_SetConfig+0x11c>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d007      	beq.n	800e4d8 <TIM_Base_SetConfig+0x40>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a3b      	ldr	r2, [pc, #236]	; (800e5b8 <TIM_Base_SetConfig+0x120>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d003      	beq.n	800e4d8 <TIM_Base_SetConfig+0x40>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a3a      	ldr	r2, [pc, #232]	; (800e5bc <TIM_Base_SetConfig+0x124>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d108      	bne.n	800e4ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a2f      	ldr	r2, [pc, #188]	; (800e5ac <TIM_Base_SetConfig+0x114>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d02b      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4f8:	d027      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a2c      	ldr	r2, [pc, #176]	; (800e5b0 <TIM_Base_SetConfig+0x118>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d023      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a2b      	ldr	r2, [pc, #172]	; (800e5b4 <TIM_Base_SetConfig+0x11c>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d01f      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a2a      	ldr	r2, [pc, #168]	; (800e5b8 <TIM_Base_SetConfig+0x120>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d01b      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4a29      	ldr	r2, [pc, #164]	; (800e5bc <TIM_Base_SetConfig+0x124>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d017      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4a28      	ldr	r2, [pc, #160]	; (800e5c0 <TIM_Base_SetConfig+0x128>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d013      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a27      	ldr	r2, [pc, #156]	; (800e5c4 <TIM_Base_SetConfig+0x12c>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d00f      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4a26      	ldr	r2, [pc, #152]	; (800e5c8 <TIM_Base_SetConfig+0x130>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d00b      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4a25      	ldr	r2, [pc, #148]	; (800e5cc <TIM_Base_SetConfig+0x134>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d007      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4a24      	ldr	r2, [pc, #144]	; (800e5d0 <TIM_Base_SetConfig+0x138>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d003      	beq.n	800e54a <TIM_Base_SetConfig+0xb2>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4a23      	ldr	r2, [pc, #140]	; (800e5d4 <TIM_Base_SetConfig+0x13c>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d108      	bne.n	800e55c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	4313      	orrs	r3, r2
 800e55a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	695b      	ldr	r3, [r3, #20]
 800e566:	4313      	orrs	r3, r2
 800e568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4a0a      	ldr	r2, [pc, #40]	; (800e5ac <TIM_Base_SetConfig+0x114>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d003      	beq.n	800e590 <TIM_Base_SetConfig+0xf8>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4a0c      	ldr	r2, [pc, #48]	; (800e5bc <TIM_Base_SetConfig+0x124>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d103      	bne.n	800e598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	691a      	ldr	r2, [r3, #16]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	615a      	str	r2, [r3, #20]
}
 800e59e:	bf00      	nop
 800e5a0:	3714      	adds	r7, #20
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	40010000 	.word	0x40010000
 800e5b0:	40000400 	.word	0x40000400
 800e5b4:	40000800 	.word	0x40000800
 800e5b8:	40000c00 	.word	0x40000c00
 800e5bc:	40010400 	.word	0x40010400
 800e5c0:	40014000 	.word	0x40014000
 800e5c4:	40014400 	.word	0x40014400
 800e5c8:	40014800 	.word	0x40014800
 800e5cc:	40001800 	.word	0x40001800
 800e5d0:	40001c00 	.word	0x40001c00
 800e5d4:	40002000 	.word	0x40002000

0800e5d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e608:	bf00      	nop
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	e040      	b.n	800e6a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d106      	bne.n	800e63c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7f4 fe5c 	bl	80032f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2224      	movs	r2, #36	; 0x24
 800e640:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f022 0201 	bic.w	r2, r2, #1
 800e650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 f8b0 	bl	800e7b8 <UART_SetConfig>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d101      	bne.n	800e662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e65e:	2301      	movs	r3, #1
 800e660:	e022      	b.n	800e6a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fb08 	bl	800ec80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	685a      	ldr	r2, [r3, #4]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e67e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	689a      	ldr	r2, [r3, #8]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e68e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f042 0201 	orr.w	r2, r2, #1
 800e69e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fb8f 	bl	800edc4 <UART_CheckIdleState>
 800e6a6:	4603      	mov	r3, r0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b08a      	sub	sp, #40	; 0x28
 800e6b4:	af02      	add	r7, sp, #8
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	603b      	str	r3, [r7, #0]
 800e6bc:	4613      	mov	r3, r2
 800e6be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6c4:	2b20      	cmp	r3, #32
 800e6c6:	d171      	bne.n	800e7ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <HAL_UART_Transmit+0x24>
 800e6ce:	88fb      	ldrh	r3, [r7, #6]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e06a      	b.n	800e7ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2221      	movs	r2, #33	; 0x21
 800e6e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e6e6:	f7f8 ff5b 	bl	80075a0 <HAL_GetTick>
 800e6ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	88fa      	ldrh	r2, [r7, #6]
 800e6f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	88fa      	ldrh	r2, [r7, #6]
 800e6f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	689b      	ldr	r3, [r3, #8]
 800e700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e704:	d108      	bne.n	800e718 <HAL_UART_Transmit+0x68>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d104      	bne.n	800e718 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e70e:	2300      	movs	r3, #0
 800e710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	61bb      	str	r3, [r7, #24]
 800e716:	e003      	b.n	800e720 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e720:	e02c      	b.n	800e77c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	2200      	movs	r2, #0
 800e72a:	2180      	movs	r1, #128	; 0x80
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 fb96 	bl	800ee5e <UART_WaitOnFlagUntilTimeout>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800e738:	2303      	movs	r3, #3
 800e73a:	e038      	b.n	800e7ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10b      	bne.n	800e75a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	881b      	ldrh	r3, [r3, #0]
 800e746:	461a      	mov	r2, r3
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e750:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	3302      	adds	r3, #2
 800e756:	61bb      	str	r3, [r7, #24]
 800e758:	e007      	b.n	800e76a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	781a      	ldrb	r2, [r3, #0]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	3301      	adds	r3, #1
 800e768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e770:	b29b      	uxth	r3, r3
 800e772:	3b01      	subs	r3, #1
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e782:	b29b      	uxth	r3, r3
 800e784:	2b00      	cmp	r3, #0
 800e786:	d1cc      	bne.n	800e722 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	2200      	movs	r2, #0
 800e790:	2140      	movs	r1, #64	; 0x40
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f000 fb63 	bl	800ee5e <UART_WaitOnFlagUntilTimeout>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	e005      	b.n	800e7ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e000      	b.n	800e7ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e7ac:	2302      	movs	r3, #2
  }
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3720      	adds	r7, #32
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
	...

0800e7b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b088      	sub	sp, #32
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	689a      	ldr	r2, [r3, #8]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	431a      	orrs	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	695b      	ldr	r3, [r3, #20]
 800e7d2:	431a      	orrs	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	69db      	ldr	r3, [r3, #28]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	4ba6      	ldr	r3, [pc, #664]	; (800ea7c <UART_SetConfig+0x2c4>)
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	6812      	ldr	r2, [r2, #0]
 800e7ea:	6979      	ldr	r1, [r7, #20]
 800e7ec:	430b      	orrs	r3, r1
 800e7ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68da      	ldr	r2, [r3, #12]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	430a      	orrs	r2, r1
 800e804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6a1b      	ldr	r3, [r3, #32]
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	4313      	orrs	r3, r2
 800e814:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	430a      	orrs	r2, r1
 800e828:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a94      	ldr	r2, [pc, #592]	; (800ea80 <UART_SetConfig+0x2c8>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d120      	bne.n	800e876 <UART_SetConfig+0xbe>
 800e834:	4b93      	ldr	r3, [pc, #588]	; (800ea84 <UART_SetConfig+0x2cc>)
 800e836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e83a:	f003 0303 	and.w	r3, r3, #3
 800e83e:	2b03      	cmp	r3, #3
 800e840:	d816      	bhi.n	800e870 <UART_SetConfig+0xb8>
 800e842:	a201      	add	r2, pc, #4	; (adr r2, 800e848 <UART_SetConfig+0x90>)
 800e844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e848:	0800e859 	.word	0x0800e859
 800e84c:	0800e865 	.word	0x0800e865
 800e850:	0800e85f 	.word	0x0800e85f
 800e854:	0800e86b 	.word	0x0800e86b
 800e858:	2301      	movs	r3, #1
 800e85a:	77fb      	strb	r3, [r7, #31]
 800e85c:	e150      	b.n	800eb00 <UART_SetConfig+0x348>
 800e85e:	2302      	movs	r3, #2
 800e860:	77fb      	strb	r3, [r7, #31]
 800e862:	e14d      	b.n	800eb00 <UART_SetConfig+0x348>
 800e864:	2304      	movs	r3, #4
 800e866:	77fb      	strb	r3, [r7, #31]
 800e868:	e14a      	b.n	800eb00 <UART_SetConfig+0x348>
 800e86a:	2308      	movs	r3, #8
 800e86c:	77fb      	strb	r3, [r7, #31]
 800e86e:	e147      	b.n	800eb00 <UART_SetConfig+0x348>
 800e870:	2310      	movs	r3, #16
 800e872:	77fb      	strb	r3, [r7, #31]
 800e874:	e144      	b.n	800eb00 <UART_SetConfig+0x348>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a83      	ldr	r2, [pc, #524]	; (800ea88 <UART_SetConfig+0x2d0>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d132      	bne.n	800e8e6 <UART_SetConfig+0x12e>
 800e880:	4b80      	ldr	r3, [pc, #512]	; (800ea84 <UART_SetConfig+0x2cc>)
 800e882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e886:	f003 030c 	and.w	r3, r3, #12
 800e88a:	2b0c      	cmp	r3, #12
 800e88c:	d828      	bhi.n	800e8e0 <UART_SetConfig+0x128>
 800e88e:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <UART_SetConfig+0xdc>)
 800e890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e894:	0800e8c9 	.word	0x0800e8c9
 800e898:	0800e8e1 	.word	0x0800e8e1
 800e89c:	0800e8e1 	.word	0x0800e8e1
 800e8a0:	0800e8e1 	.word	0x0800e8e1
 800e8a4:	0800e8d5 	.word	0x0800e8d5
 800e8a8:	0800e8e1 	.word	0x0800e8e1
 800e8ac:	0800e8e1 	.word	0x0800e8e1
 800e8b0:	0800e8e1 	.word	0x0800e8e1
 800e8b4:	0800e8cf 	.word	0x0800e8cf
 800e8b8:	0800e8e1 	.word	0x0800e8e1
 800e8bc:	0800e8e1 	.word	0x0800e8e1
 800e8c0:	0800e8e1 	.word	0x0800e8e1
 800e8c4:	0800e8db 	.word	0x0800e8db
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	77fb      	strb	r3, [r7, #31]
 800e8cc:	e118      	b.n	800eb00 <UART_SetConfig+0x348>
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	77fb      	strb	r3, [r7, #31]
 800e8d2:	e115      	b.n	800eb00 <UART_SetConfig+0x348>
 800e8d4:	2304      	movs	r3, #4
 800e8d6:	77fb      	strb	r3, [r7, #31]
 800e8d8:	e112      	b.n	800eb00 <UART_SetConfig+0x348>
 800e8da:	2308      	movs	r3, #8
 800e8dc:	77fb      	strb	r3, [r7, #31]
 800e8de:	e10f      	b.n	800eb00 <UART_SetConfig+0x348>
 800e8e0:	2310      	movs	r3, #16
 800e8e2:	77fb      	strb	r3, [r7, #31]
 800e8e4:	e10c      	b.n	800eb00 <UART_SetConfig+0x348>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a68      	ldr	r2, [pc, #416]	; (800ea8c <UART_SetConfig+0x2d4>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d120      	bne.n	800e932 <UART_SetConfig+0x17a>
 800e8f0:	4b64      	ldr	r3, [pc, #400]	; (800ea84 <UART_SetConfig+0x2cc>)
 800e8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e8fa:	2b30      	cmp	r3, #48	; 0x30
 800e8fc:	d013      	beq.n	800e926 <UART_SetConfig+0x16e>
 800e8fe:	2b30      	cmp	r3, #48	; 0x30
 800e900:	d814      	bhi.n	800e92c <UART_SetConfig+0x174>
 800e902:	2b20      	cmp	r3, #32
 800e904:	d009      	beq.n	800e91a <UART_SetConfig+0x162>
 800e906:	2b20      	cmp	r3, #32
 800e908:	d810      	bhi.n	800e92c <UART_SetConfig+0x174>
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d002      	beq.n	800e914 <UART_SetConfig+0x15c>
 800e90e:	2b10      	cmp	r3, #16
 800e910:	d006      	beq.n	800e920 <UART_SetConfig+0x168>
 800e912:	e00b      	b.n	800e92c <UART_SetConfig+0x174>
 800e914:	2300      	movs	r3, #0
 800e916:	77fb      	strb	r3, [r7, #31]
 800e918:	e0f2      	b.n	800eb00 <UART_SetConfig+0x348>
 800e91a:	2302      	movs	r3, #2
 800e91c:	77fb      	strb	r3, [r7, #31]
 800e91e:	e0ef      	b.n	800eb00 <UART_SetConfig+0x348>
 800e920:	2304      	movs	r3, #4
 800e922:	77fb      	strb	r3, [r7, #31]
 800e924:	e0ec      	b.n	800eb00 <UART_SetConfig+0x348>
 800e926:	2308      	movs	r3, #8
 800e928:	77fb      	strb	r3, [r7, #31]
 800e92a:	e0e9      	b.n	800eb00 <UART_SetConfig+0x348>
 800e92c:	2310      	movs	r3, #16
 800e92e:	77fb      	strb	r3, [r7, #31]
 800e930:	e0e6      	b.n	800eb00 <UART_SetConfig+0x348>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a56      	ldr	r2, [pc, #344]	; (800ea90 <UART_SetConfig+0x2d8>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d120      	bne.n	800e97e <UART_SetConfig+0x1c6>
 800e93c:	4b51      	ldr	r3, [pc, #324]	; (800ea84 <UART_SetConfig+0x2cc>)
 800e93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e946:	2bc0      	cmp	r3, #192	; 0xc0
 800e948:	d013      	beq.n	800e972 <UART_SetConfig+0x1ba>
 800e94a:	2bc0      	cmp	r3, #192	; 0xc0
 800e94c:	d814      	bhi.n	800e978 <UART_SetConfig+0x1c0>
 800e94e:	2b80      	cmp	r3, #128	; 0x80
 800e950:	d009      	beq.n	800e966 <UART_SetConfig+0x1ae>
 800e952:	2b80      	cmp	r3, #128	; 0x80
 800e954:	d810      	bhi.n	800e978 <UART_SetConfig+0x1c0>
 800e956:	2b00      	cmp	r3, #0
 800e958:	d002      	beq.n	800e960 <UART_SetConfig+0x1a8>
 800e95a:	2b40      	cmp	r3, #64	; 0x40
 800e95c:	d006      	beq.n	800e96c <UART_SetConfig+0x1b4>
 800e95e:	e00b      	b.n	800e978 <UART_SetConfig+0x1c0>
 800e960:	2300      	movs	r3, #0
 800e962:	77fb      	strb	r3, [r7, #31]
 800e964:	e0cc      	b.n	800eb00 <UART_SetConfig+0x348>
 800e966:	2302      	movs	r3, #2
 800e968:	77fb      	strb	r3, [r7, #31]
 800e96a:	e0c9      	b.n	800eb00 <UART_SetConfig+0x348>
 800e96c:	2304      	movs	r3, #4
 800e96e:	77fb      	strb	r3, [r7, #31]
 800e970:	e0c6      	b.n	800eb00 <UART_SetConfig+0x348>
 800e972:	2308      	movs	r3, #8
 800e974:	77fb      	strb	r3, [r7, #31]
 800e976:	e0c3      	b.n	800eb00 <UART_SetConfig+0x348>
 800e978:	2310      	movs	r3, #16
 800e97a:	77fb      	strb	r3, [r7, #31]
 800e97c:	e0c0      	b.n	800eb00 <UART_SetConfig+0x348>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a44      	ldr	r2, [pc, #272]	; (800ea94 <UART_SetConfig+0x2dc>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d125      	bne.n	800e9d4 <UART_SetConfig+0x21c>
 800e988:	4b3e      	ldr	r3, [pc, #248]	; (800ea84 <UART_SetConfig+0x2cc>)
 800e98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e98e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e996:	d017      	beq.n	800e9c8 <UART_SetConfig+0x210>
 800e998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e99c:	d817      	bhi.n	800e9ce <UART_SetConfig+0x216>
 800e99e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9a2:	d00b      	beq.n	800e9bc <UART_SetConfig+0x204>
 800e9a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9a8:	d811      	bhi.n	800e9ce <UART_SetConfig+0x216>
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d003      	beq.n	800e9b6 <UART_SetConfig+0x1fe>
 800e9ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9b2:	d006      	beq.n	800e9c2 <UART_SetConfig+0x20a>
 800e9b4:	e00b      	b.n	800e9ce <UART_SetConfig+0x216>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	77fb      	strb	r3, [r7, #31]
 800e9ba:	e0a1      	b.n	800eb00 <UART_SetConfig+0x348>
 800e9bc:	2302      	movs	r3, #2
 800e9be:	77fb      	strb	r3, [r7, #31]
 800e9c0:	e09e      	b.n	800eb00 <UART_SetConfig+0x348>
 800e9c2:	2304      	movs	r3, #4
 800e9c4:	77fb      	strb	r3, [r7, #31]
 800e9c6:	e09b      	b.n	800eb00 <UART_SetConfig+0x348>
 800e9c8:	2308      	movs	r3, #8
 800e9ca:	77fb      	strb	r3, [r7, #31]
 800e9cc:	e098      	b.n	800eb00 <UART_SetConfig+0x348>
 800e9ce:	2310      	movs	r3, #16
 800e9d0:	77fb      	strb	r3, [r7, #31]
 800e9d2:	e095      	b.n	800eb00 <UART_SetConfig+0x348>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a2f      	ldr	r2, [pc, #188]	; (800ea98 <UART_SetConfig+0x2e0>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d125      	bne.n	800ea2a <UART_SetConfig+0x272>
 800e9de:	4b29      	ldr	r3, [pc, #164]	; (800ea84 <UART_SetConfig+0x2cc>)
 800e9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e9e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e9ec:	d017      	beq.n	800ea1e <UART_SetConfig+0x266>
 800e9ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e9f2:	d817      	bhi.n	800ea24 <UART_SetConfig+0x26c>
 800e9f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9f8:	d00b      	beq.n	800ea12 <UART_SetConfig+0x25a>
 800e9fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9fe:	d811      	bhi.n	800ea24 <UART_SetConfig+0x26c>
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d003      	beq.n	800ea0c <UART_SetConfig+0x254>
 800ea04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea08:	d006      	beq.n	800ea18 <UART_SetConfig+0x260>
 800ea0a:	e00b      	b.n	800ea24 <UART_SetConfig+0x26c>
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	77fb      	strb	r3, [r7, #31]
 800ea10:	e076      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea12:	2302      	movs	r3, #2
 800ea14:	77fb      	strb	r3, [r7, #31]
 800ea16:	e073      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea18:	2304      	movs	r3, #4
 800ea1a:	77fb      	strb	r3, [r7, #31]
 800ea1c:	e070      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea1e:	2308      	movs	r3, #8
 800ea20:	77fb      	strb	r3, [r7, #31]
 800ea22:	e06d      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea24:	2310      	movs	r3, #16
 800ea26:	77fb      	strb	r3, [r7, #31]
 800ea28:	e06a      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a1b      	ldr	r2, [pc, #108]	; (800ea9c <UART_SetConfig+0x2e4>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d138      	bne.n	800eaa6 <UART_SetConfig+0x2ee>
 800ea34:	4b13      	ldr	r3, [pc, #76]	; (800ea84 <UART_SetConfig+0x2cc>)
 800ea36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ea3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea42:	d017      	beq.n	800ea74 <UART_SetConfig+0x2bc>
 800ea44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea48:	d82a      	bhi.n	800eaa0 <UART_SetConfig+0x2e8>
 800ea4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea4e:	d00b      	beq.n	800ea68 <UART_SetConfig+0x2b0>
 800ea50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea54:	d824      	bhi.n	800eaa0 <UART_SetConfig+0x2e8>
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d003      	beq.n	800ea62 <UART_SetConfig+0x2aa>
 800ea5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea5e:	d006      	beq.n	800ea6e <UART_SetConfig+0x2b6>
 800ea60:	e01e      	b.n	800eaa0 <UART_SetConfig+0x2e8>
 800ea62:	2300      	movs	r3, #0
 800ea64:	77fb      	strb	r3, [r7, #31]
 800ea66:	e04b      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea68:	2302      	movs	r3, #2
 800ea6a:	77fb      	strb	r3, [r7, #31]
 800ea6c:	e048      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea6e:	2304      	movs	r3, #4
 800ea70:	77fb      	strb	r3, [r7, #31]
 800ea72:	e045      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea74:	2308      	movs	r3, #8
 800ea76:	77fb      	strb	r3, [r7, #31]
 800ea78:	e042      	b.n	800eb00 <UART_SetConfig+0x348>
 800ea7a:	bf00      	nop
 800ea7c:	efff69f3 	.word	0xefff69f3
 800ea80:	40011000 	.word	0x40011000
 800ea84:	40023800 	.word	0x40023800
 800ea88:	40004400 	.word	0x40004400
 800ea8c:	40004800 	.word	0x40004800
 800ea90:	40004c00 	.word	0x40004c00
 800ea94:	40005000 	.word	0x40005000
 800ea98:	40011400 	.word	0x40011400
 800ea9c:	40007800 	.word	0x40007800
 800eaa0:	2310      	movs	r3, #16
 800eaa2:	77fb      	strb	r3, [r7, #31]
 800eaa4:	e02c      	b.n	800eb00 <UART_SetConfig+0x348>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4a72      	ldr	r2, [pc, #456]	; (800ec74 <UART_SetConfig+0x4bc>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d125      	bne.n	800eafc <UART_SetConfig+0x344>
 800eab0:	4b71      	ldr	r3, [pc, #452]	; (800ec78 <UART_SetConfig+0x4c0>)
 800eab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eab6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800eaba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800eabe:	d017      	beq.n	800eaf0 <UART_SetConfig+0x338>
 800eac0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800eac4:	d817      	bhi.n	800eaf6 <UART_SetConfig+0x33e>
 800eac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaca:	d00b      	beq.n	800eae4 <UART_SetConfig+0x32c>
 800eacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ead0:	d811      	bhi.n	800eaf6 <UART_SetConfig+0x33e>
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d003      	beq.n	800eade <UART_SetConfig+0x326>
 800ead6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eada:	d006      	beq.n	800eaea <UART_SetConfig+0x332>
 800eadc:	e00b      	b.n	800eaf6 <UART_SetConfig+0x33e>
 800eade:	2300      	movs	r3, #0
 800eae0:	77fb      	strb	r3, [r7, #31]
 800eae2:	e00d      	b.n	800eb00 <UART_SetConfig+0x348>
 800eae4:	2302      	movs	r3, #2
 800eae6:	77fb      	strb	r3, [r7, #31]
 800eae8:	e00a      	b.n	800eb00 <UART_SetConfig+0x348>
 800eaea:	2304      	movs	r3, #4
 800eaec:	77fb      	strb	r3, [r7, #31]
 800eaee:	e007      	b.n	800eb00 <UART_SetConfig+0x348>
 800eaf0:	2308      	movs	r3, #8
 800eaf2:	77fb      	strb	r3, [r7, #31]
 800eaf4:	e004      	b.n	800eb00 <UART_SetConfig+0x348>
 800eaf6:	2310      	movs	r3, #16
 800eaf8:	77fb      	strb	r3, [r7, #31]
 800eafa:	e001      	b.n	800eb00 <UART_SetConfig+0x348>
 800eafc:	2310      	movs	r3, #16
 800eafe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	69db      	ldr	r3, [r3, #28]
 800eb04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb08:	d15b      	bne.n	800ebc2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800eb0a:	7ffb      	ldrb	r3, [r7, #31]
 800eb0c:	2b08      	cmp	r3, #8
 800eb0e:	d828      	bhi.n	800eb62 <UART_SetConfig+0x3aa>
 800eb10:	a201      	add	r2, pc, #4	; (adr r2, 800eb18 <UART_SetConfig+0x360>)
 800eb12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb16:	bf00      	nop
 800eb18:	0800eb3d 	.word	0x0800eb3d
 800eb1c:	0800eb45 	.word	0x0800eb45
 800eb20:	0800eb4d 	.word	0x0800eb4d
 800eb24:	0800eb63 	.word	0x0800eb63
 800eb28:	0800eb53 	.word	0x0800eb53
 800eb2c:	0800eb63 	.word	0x0800eb63
 800eb30:	0800eb63 	.word	0x0800eb63
 800eb34:	0800eb63 	.word	0x0800eb63
 800eb38:	0800eb5b 	.word	0x0800eb5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb3c:	f7fd fec8 	bl	800c8d0 <HAL_RCC_GetPCLK1Freq>
 800eb40:	61b8      	str	r0, [r7, #24]
        break;
 800eb42:	e013      	b.n	800eb6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb44:	f7fd fed8 	bl	800c8f8 <HAL_RCC_GetPCLK2Freq>
 800eb48:	61b8      	str	r0, [r7, #24]
        break;
 800eb4a:	e00f      	b.n	800eb6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb4c:	4b4b      	ldr	r3, [pc, #300]	; (800ec7c <UART_SetConfig+0x4c4>)
 800eb4e:	61bb      	str	r3, [r7, #24]
        break;
 800eb50:	e00c      	b.n	800eb6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb52:	f7fd fdeb 	bl	800c72c <HAL_RCC_GetSysClockFreq>
 800eb56:	61b8      	str	r0, [r7, #24]
        break;
 800eb58:	e008      	b.n	800eb6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb5e:	61bb      	str	r3, [r7, #24]
        break;
 800eb60:	e004      	b.n	800eb6c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800eb62:	2300      	movs	r3, #0
 800eb64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800eb66:	2301      	movs	r3, #1
 800eb68:	77bb      	strb	r3, [r7, #30]
        break;
 800eb6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d074      	beq.n	800ec5c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	005a      	lsls	r2, r3, #1
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	085b      	lsrs	r3, r3, #1
 800eb7c:	441a      	add	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	2b0f      	cmp	r3, #15
 800eb8c:	d916      	bls.n	800ebbc <UART_SetConfig+0x404>
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb94:	d212      	bcs.n	800ebbc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	f023 030f 	bic.w	r3, r3, #15
 800eb9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	085b      	lsrs	r3, r3, #1
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	f003 0307 	and.w	r3, r3, #7
 800ebaa:	b29a      	uxth	r2, r3
 800ebac:	89fb      	ldrh	r3, [r7, #14]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	89fa      	ldrh	r2, [r7, #14]
 800ebb8:	60da      	str	r2, [r3, #12]
 800ebba:	e04f      	b.n	800ec5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	77bb      	strb	r3, [r7, #30]
 800ebc0:	e04c      	b.n	800ec5c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ebc2:	7ffb      	ldrb	r3, [r7, #31]
 800ebc4:	2b08      	cmp	r3, #8
 800ebc6:	d828      	bhi.n	800ec1a <UART_SetConfig+0x462>
 800ebc8:	a201      	add	r2, pc, #4	; (adr r2, 800ebd0 <UART_SetConfig+0x418>)
 800ebca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebce:	bf00      	nop
 800ebd0:	0800ebf5 	.word	0x0800ebf5
 800ebd4:	0800ebfd 	.word	0x0800ebfd
 800ebd8:	0800ec05 	.word	0x0800ec05
 800ebdc:	0800ec1b 	.word	0x0800ec1b
 800ebe0:	0800ec0b 	.word	0x0800ec0b
 800ebe4:	0800ec1b 	.word	0x0800ec1b
 800ebe8:	0800ec1b 	.word	0x0800ec1b
 800ebec:	0800ec1b 	.word	0x0800ec1b
 800ebf0:	0800ec13 	.word	0x0800ec13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebf4:	f7fd fe6c 	bl	800c8d0 <HAL_RCC_GetPCLK1Freq>
 800ebf8:	61b8      	str	r0, [r7, #24]
        break;
 800ebfa:	e013      	b.n	800ec24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebfc:	f7fd fe7c 	bl	800c8f8 <HAL_RCC_GetPCLK2Freq>
 800ec00:	61b8      	str	r0, [r7, #24]
        break;
 800ec02:	e00f      	b.n	800ec24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec04:	4b1d      	ldr	r3, [pc, #116]	; (800ec7c <UART_SetConfig+0x4c4>)
 800ec06:	61bb      	str	r3, [r7, #24]
        break;
 800ec08:	e00c      	b.n	800ec24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec0a:	f7fd fd8f 	bl	800c72c <HAL_RCC_GetSysClockFreq>
 800ec0e:	61b8      	str	r0, [r7, #24]
        break;
 800ec10:	e008      	b.n	800ec24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec16:	61bb      	str	r3, [r7, #24]
        break;
 800ec18:	e004      	b.n	800ec24 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	77bb      	strb	r3, [r7, #30]
        break;
 800ec22:	bf00      	nop
    }

    if (pclk != 0U)
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d018      	beq.n	800ec5c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	085a      	lsrs	r2, r3, #1
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	441a      	add	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	2b0f      	cmp	r3, #15
 800ec42:	d909      	bls.n	800ec58 <UART_SetConfig+0x4a0>
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec4a:	d205      	bcs.n	800ec58 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	60da      	str	r2, [r3, #12]
 800ec56:	e001      	b.n	800ec5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2200      	movs	r2, #0
 800ec66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ec68:	7fbb      	ldrb	r3, [r7, #30]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3720      	adds	r7, #32
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	40007c00 	.word	0x40007c00
 800ec78:	40023800 	.word	0x40023800
 800ec7c:	00f42400 	.word	0x00f42400

0800ec80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8c:	f003 0301 	and.w	r3, r3, #1
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00a      	beq.n	800ecaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	430a      	orrs	r2, r1
 800eca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00a      	beq.n	800eccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	430a      	orrs	r2, r1
 800ecca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd0:	f003 0304 	and.w	r3, r3, #4
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00a      	beq.n	800ecee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	430a      	orrs	r2, r1
 800ecec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf2:	f003 0308 	and.w	r3, r3, #8
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00a      	beq.n	800ed10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	430a      	orrs	r2, r1
 800ed0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed14:	f003 0310 	and.w	r3, r3, #16
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00a      	beq.n	800ed32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed36:	f003 0320 	and.w	r3, r3, #32
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d01a      	beq.n	800ed96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	430a      	orrs	r2, r1
 800ed74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed7e:	d10a      	bne.n	800ed96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	430a      	orrs	r2, r1
 800ed94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d00a      	beq.n	800edb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	430a      	orrs	r2, r1
 800edb6:	605a      	str	r2, [r3, #4]
  }
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af02      	add	r7, sp, #8
 800edca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edd4:	f7f8 fbe4 	bl	80075a0 <HAL_GetTick>
 800edd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f003 0308 	and.w	r3, r3, #8
 800ede4:	2b08      	cmp	r3, #8
 800ede6:	d10e      	bne.n	800ee06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ede8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 f831 	bl	800ee5e <UART_WaitOnFlagUntilTimeout>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee02:	2303      	movs	r3, #3
 800ee04:	e027      	b.n	800ee56 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f003 0304 	and.w	r3, r3, #4
 800ee10:	2b04      	cmp	r3, #4
 800ee12:	d10e      	bne.n	800ee32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee18:	9300      	str	r3, [sp, #0]
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f81b 	bl	800ee5e <UART_WaitOnFlagUntilTimeout>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	e011      	b.n	800ee56 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2220      	movs	r2, #32
 800ee36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2220      	movs	r2, #32
 800ee3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b09c      	sub	sp, #112	; 0x70
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	60f8      	str	r0, [r7, #12]
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	603b      	str	r3, [r7, #0]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee6e:	e0a7      	b.n	800efc0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee76:	f000 80a3 	beq.w	800efc0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee7a:	f7f8 fb91 	bl	80075a0 <HAL_GetTick>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d302      	bcc.n	800ee90 <UART_WaitOnFlagUntilTimeout+0x32>
 800ee8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d13f      	bne.n	800ef10 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee98:	e853 3f00 	ldrex	r3, [r3]
 800ee9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eea4:	667b      	str	r3, [r7, #100]	; 0x64
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eeb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eeb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eeb6:	e841 2300 	strex	r3, r2, [r1]
 800eeba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1e6      	bne.n	800ee90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	3308      	adds	r3, #8
 800eec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eecc:	e853 3f00 	ldrex	r3, [r3]
 800eed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed4:	f023 0301 	bic.w	r3, r3, #1
 800eed8:	663b      	str	r3, [r7, #96]	; 0x60
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	3308      	adds	r3, #8
 800eee0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eee2:	64ba      	str	r2, [r7, #72]	; 0x48
 800eee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeea:	e841 2300 	strex	r3, r2, [r1]
 800eeee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1e5      	bne.n	800eec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2220      	movs	r2, #32
 800eefa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2220      	movs	r2, #32
 800ef00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ef0c:	2303      	movs	r3, #3
 800ef0e:	e068      	b.n	800efe2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f003 0304 	and.w	r3, r3, #4
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d050      	beq.n	800efc0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	69db      	ldr	r3, [r3, #28]
 800ef24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef2c:	d148      	bne.n	800efc0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef40:	e853 3f00 	ldrex	r3, [r3]
 800ef44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef56:	637b      	str	r3, [r7, #52]	; 0x34
 800ef58:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef5e:	e841 2300 	strex	r3, r2, [r1]
 800ef62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1e6      	bne.n	800ef38 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	3308      	adds	r3, #8
 800ef70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	e853 3f00 	ldrex	r3, [r3]
 800ef78:	613b      	str	r3, [r7, #16]
   return(result);
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	f023 0301 	bic.w	r3, r3, #1
 800ef80:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3308      	adds	r3, #8
 800ef88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ef8a:	623a      	str	r2, [r7, #32]
 800ef8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef8e:	69f9      	ldr	r1, [r7, #28]
 800ef90:	6a3a      	ldr	r2, [r7, #32]
 800ef92:	e841 2300 	strex	r3, r2, [r1]
 800ef96:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1e5      	bne.n	800ef6a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2220      	movs	r2, #32
 800efa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2220      	movs	r2, #32
 800efa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2220      	movs	r2, #32
 800efb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800efbc:	2303      	movs	r3, #3
 800efbe:	e010      	b.n	800efe2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	69da      	ldr	r2, [r3, #28]
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	4013      	ands	r3, r2
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	429a      	cmp	r2, r3
 800efce:	bf0c      	ite	eq
 800efd0:	2301      	moveq	r3, #1
 800efd2:	2300      	movne	r3, #0
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	461a      	mov	r2, r3
 800efd8:	79fb      	ldrb	r3, [r7, #7]
 800efda:	429a      	cmp	r2, r3
 800efdc:	f43f af48 	beq.w	800ee70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3770      	adds	r7, #112	; 0x70
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
	...

0800efec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d121      	bne.n	800f042 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	4b27      	ldr	r3, [pc, #156]	; (800f0a0 <FMC_SDRAM_Init+0xb4>)
 800f004:	4013      	ands	r3, r2
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	6851      	ldr	r1, [r2, #4]
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	6892      	ldr	r2, [r2, #8]
 800f00e:	4311      	orrs	r1, r2
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	68d2      	ldr	r2, [r2, #12]
 800f014:	4311      	orrs	r1, r2
 800f016:	683a      	ldr	r2, [r7, #0]
 800f018:	6912      	ldr	r2, [r2, #16]
 800f01a:	4311      	orrs	r1, r2
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	6952      	ldr	r2, [r2, #20]
 800f020:	4311      	orrs	r1, r2
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	6992      	ldr	r2, [r2, #24]
 800f026:	4311      	orrs	r1, r2
 800f028:	683a      	ldr	r2, [r7, #0]
 800f02a:	69d2      	ldr	r2, [r2, #28]
 800f02c:	4311      	orrs	r1, r2
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	6a12      	ldr	r2, [r2, #32]
 800f032:	4311      	orrs	r1, r2
 800f034:	683a      	ldr	r2, [r7, #0]
 800f036:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f038:	430a      	orrs	r2, r1
 800f03a:	431a      	orrs	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	e026      	b.n	800f090 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	69d9      	ldr	r1, [r3, #28]
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	4319      	orrs	r1, r3
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f058:	430b      	orrs	r3, r1
 800f05a:	431a      	orrs	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	4b0e      	ldr	r3, [pc, #56]	; (800f0a0 <FMC_SDRAM_Init+0xb4>)
 800f066:	4013      	ands	r3, r2
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	6851      	ldr	r1, [r2, #4]
 800f06c:	683a      	ldr	r2, [r7, #0]
 800f06e:	6892      	ldr	r2, [r2, #8]
 800f070:	4311      	orrs	r1, r2
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	68d2      	ldr	r2, [r2, #12]
 800f076:	4311      	orrs	r1, r2
 800f078:	683a      	ldr	r2, [r7, #0]
 800f07a:	6912      	ldr	r2, [r2, #16]
 800f07c:	4311      	orrs	r1, r2
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	6952      	ldr	r2, [r2, #20]
 800f082:	4311      	orrs	r1, r2
 800f084:	683a      	ldr	r2, [r7, #0]
 800f086:	6992      	ldr	r2, [r2, #24]
 800f088:	430a      	orrs	r2, r1
 800f08a:	431a      	orrs	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	ffff8000 	.word	0xffff8000

0800f0a4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d128      	bne.n	800f108 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	1e59      	subs	r1, r3, #1
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	3b01      	subs	r3, #1
 800f0ca:	011b      	lsls	r3, r3, #4
 800f0cc:	4319      	orrs	r1, r3
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	021b      	lsls	r3, r3, #8
 800f0d6:	4319      	orrs	r1, r3
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	031b      	lsls	r3, r3, #12
 800f0e0:	4319      	orrs	r1, r3
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	041b      	lsls	r3, r3, #16
 800f0ea:	4319      	orrs	r1, r3
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	051b      	lsls	r3, r3, #20
 800f0f4:	4319      	orrs	r1, r3
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	061b      	lsls	r3, r3, #24
 800f0fe:	430b      	orrs	r3, r1
 800f100:	431a      	orrs	r2, r3
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	609a      	str	r2, [r3, #8]
 800f106:	e02d      	b.n	800f164 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	689a      	ldr	r2, [r3, #8]
 800f10c:	4b19      	ldr	r3, [pc, #100]	; (800f174 <FMC_SDRAM_Timing_Init+0xd0>)
 800f10e:	4013      	ands	r3, r2
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	68d2      	ldr	r2, [r2, #12]
 800f114:	3a01      	subs	r2, #1
 800f116:	0311      	lsls	r1, r2, #12
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	6952      	ldr	r2, [r2, #20]
 800f11c:	3a01      	subs	r2, #1
 800f11e:	0512      	lsls	r2, r2, #20
 800f120:	430a      	orrs	r2, r1
 800f122:	431a      	orrs	r2, r3
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	1e59      	subs	r1, r3, #1
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	011b      	lsls	r3, r3, #4
 800f13e:	4319      	orrs	r1, r3
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	3b01      	subs	r3, #1
 800f146:	021b      	lsls	r3, r3, #8
 800f148:	4319      	orrs	r1, r3
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	3b01      	subs	r3, #1
 800f150:	041b      	lsls	r3, r3, #16
 800f152:	4319      	orrs	r1, r3
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	699b      	ldr	r3, [r3, #24]
 800f158:	3b01      	subs	r3, #1
 800f15a:	061b      	lsls	r3, r3, #24
 800f15c:	430b      	orrs	r3, r1
 800f15e:	431a      	orrs	r2, r3
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3714      	adds	r7, #20
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop
 800f174:	ff0f0fff 	.word	0xff0f0fff

0800f178 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	691a      	ldr	r2, [r3, #16]
 800f188:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <FMC_SDRAM_SendCommand+0x44>)
 800f18a:	4013      	ands	r3, r2
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	6811      	ldr	r1, [r2, #0]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	6852      	ldr	r2, [r2, #4]
 800f194:	4311      	orrs	r1, r2
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	6892      	ldr	r2, [r2, #8]
 800f19a:	3a01      	subs	r2, #1
 800f19c:	0152      	lsls	r2, r2, #5
 800f19e:	4311      	orrs	r1, r2
 800f1a0:	68ba      	ldr	r2, [r7, #8]
 800f1a2:	68d2      	ldr	r2, [r2, #12]
 800f1a4:	0252      	lsls	r2, r2, #9
 800f1a6:	430a      	orrs	r2, r1
 800f1a8:	431a      	orrs	r2, r3
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	ffc00000 	.word	0xffc00000

0800f1c0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	695a      	ldr	r2, [r3, #20]
 800f1ce:	4b07      	ldr	r3, [pc, #28]	; (800f1ec <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f1d0:	4013      	ands	r3, r2
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	0052      	lsls	r2, r2, #1
 800f1d6:	431a      	orrs	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	ffffc001 	.word	0xffffc001

0800f1f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f1fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f202:	2b84      	cmp	r3, #132	; 0x84
 800f204:	d005      	beq.n	800f212 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	4413      	add	r3, r2
 800f20e:	3303      	adds	r3, #3
 800f210:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f212:	68fb      	ldr	r3, [r7, #12]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f226:	f3ef 8305 	mrs	r3, IPSR
 800f22a:	607b      	str	r3, [r7, #4]
  return(result);
 800f22c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f22e:	2b00      	cmp	r3, #0
 800f230:	bf14      	ite	ne
 800f232:	2301      	movne	r3, #1
 800f234:	2300      	moveq	r3, #0
 800f236:	b2db      	uxtb	r3, r3
}
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f248:	f001 f94c 	bl	80104e4 <vTaskStartScheduler>
  
  return osOK;
 800f24c:	2300      	movs	r3, #0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	bd80      	pop	{r7, pc}

0800f252 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f252:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f254:	b089      	sub	sp, #36	; 0x24
 800f256:	af04      	add	r7, sp, #16
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	695b      	ldr	r3, [r3, #20]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d020      	beq.n	800f2a6 <osThreadCreate+0x54>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d01c      	beq.n	800f2a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	685c      	ldr	r4, [r3, #4]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	691e      	ldr	r6, [r3, #16]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff ffb6 	bl	800f1f0 <makeFreeRtosPriority>
 800f284:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f28e:	9202      	str	r2, [sp, #8]
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	9100      	str	r1, [sp, #0]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	4632      	mov	r2, r6
 800f298:	4629      	mov	r1, r5
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 ff3a 	bl	8010114 <xTaskCreateStatic>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	e01c      	b.n	800f2e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	685c      	ldr	r4, [r3, #4]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff ff98 	bl	800f1f0 <makeFreeRtosPriority>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	f107 030c 	add.w	r3, r7, #12
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	9200      	str	r2, [sp, #0]
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	4632      	mov	r2, r6
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 ff82 	bl	80101da <xTaskCreate>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d001      	beq.n	800f2e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e000      	b.n	800f2e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b084      	sub	sp, #16
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <osDelay+0x16>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	e000      	b.n	800f302 <osDelay+0x18>
 800f300:	2301      	movs	r3, #1
 800f302:	4618      	mov	r0, r3
 800f304:	f001 f8b8 	bl	8010478 <vTaskDelay>
  
  return osOK;
 800f308:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f312:	b590      	push	{r4, r7, lr}
 800f314:	b085      	sub	sp, #20
 800f316:	af02      	add	r7, sp, #8
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d011      	beq.n	800f348 <osMessageCreate+0x36>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00d      	beq.n	800f348 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6818      	ldr	r0, [r3, #0]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6859      	ldr	r1, [r3, #4]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	689a      	ldr	r2, [r3, #8]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	2400      	movs	r4, #0
 800f33e:	9400      	str	r4, [sp, #0]
 800f340:	f000 f9e2 	bl	800f708 <xQueueGenericCreateStatic>
 800f344:	4603      	mov	r3, r0
 800f346:	e008      	b.n	800f35a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	4619      	mov	r1, r3
 800f354:	f000 fa5a 	bl	800f80c <xQueueGenericCreate>
 800f358:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd90      	pop	{r4, r7, pc}
	...

0800f364 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f370:	2300      	movs	r3, #0
 800f372:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d101      	bne.n	800f382 <osMessagePut+0x1e>
    ticks = 1;
 800f37e:	2301      	movs	r3, #1
 800f380:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f382:	f7ff ff4d 	bl	800f220 <inHandlerMode>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d018      	beq.n	800f3be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f38c:	f107 0210 	add.w	r2, r7, #16
 800f390:	f107 0108 	add.w	r1, r7, #8
 800f394:	2300      	movs	r3, #0
 800f396:	68f8      	ldr	r0, [r7, #12]
 800f398:	f000 fba0 	bl	800fadc <xQueueGenericSendFromISR>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d001      	beq.n	800f3a6 <osMessagePut+0x42>
      return osErrorOS;
 800f3a2:	23ff      	movs	r3, #255	; 0xff
 800f3a4:	e018      	b.n	800f3d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d014      	beq.n	800f3d6 <osMessagePut+0x72>
 800f3ac:	4b0c      	ldr	r3, [pc, #48]	; (800f3e0 <osMessagePut+0x7c>)
 800f3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	f3bf 8f6f 	isb	sy
 800f3bc:	e00b      	b.n	800f3d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f3be:	f107 0108 	add.w	r1, r7, #8
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f000 fa82 	bl	800f8d0 <xQueueGenericSend>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d001      	beq.n	800f3d6 <osMessagePut+0x72>
      return osErrorOS;
 800f3d2:	23ff      	movs	r3, #255	; 0xff
 800f3d4:	e000      	b.n	800f3d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f3d6:	2300      	movs	r3, #0
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3718      	adds	r7, #24
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	e000ed04 	.word	0xe000ed04

0800f3e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f3e4:	b590      	push	{r4, r7, lr}
 800f3e6:	b08b      	sub	sp, #44	; 0x2c
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10a      	bne.n	800f414 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f3fe:	2380      	movs	r3, #128	; 0x80
 800f400:	617b      	str	r3, [r7, #20]
    return event;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	461c      	mov	r4, r3
 800f406:	f107 0314 	add.w	r3, r7, #20
 800f40a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f40e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f412:	e054      	b.n	800f4be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f414:	2300      	movs	r3, #0
 800f416:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f422:	d103      	bne.n	800f42c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f428:	627b      	str	r3, [r7, #36]	; 0x24
 800f42a:	e009      	b.n	800f440 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d006      	beq.n	800f440 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800f436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <osMessageGet+0x5c>
      ticks = 1;
 800f43c:	2301      	movs	r3, #1
 800f43e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f440:	f7ff feee 	bl	800f220 <inHandlerMode>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d01c      	beq.n	800f484 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f44a:	f107 0220 	add.w	r2, r7, #32
 800f44e:	f107 0314 	add.w	r3, r7, #20
 800f452:	3304      	adds	r3, #4
 800f454:	4619      	mov	r1, r3
 800f456:	68b8      	ldr	r0, [r7, #8]
 800f458:	f000 fcc6 	bl	800fde8 <xQueueReceiveFromISR>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d102      	bne.n	800f468 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f462:	2310      	movs	r3, #16
 800f464:	617b      	str	r3, [r7, #20]
 800f466:	e001      	b.n	800f46c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f468:	2300      	movs	r3, #0
 800f46a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d01d      	beq.n	800f4ae <osMessageGet+0xca>
 800f472:	4b15      	ldr	r3, [pc, #84]	; (800f4c8 <osMessageGet+0xe4>)
 800f474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f478:	601a      	str	r2, [r3, #0]
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	e014      	b.n	800f4ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f484:	f107 0314 	add.w	r3, r7, #20
 800f488:	3304      	adds	r3, #4
 800f48a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f48c:	4619      	mov	r1, r3
 800f48e:	68b8      	ldr	r0, [r7, #8]
 800f490:	f000 fbc4 	bl	800fc1c <xQueueReceive>
 800f494:	4603      	mov	r3, r0
 800f496:	2b01      	cmp	r3, #1
 800f498:	d102      	bne.n	800f4a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f49a:	2310      	movs	r3, #16
 800f49c:	617b      	str	r3, [r7, #20]
 800f49e:	e006      	b.n	800f4ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d101      	bne.n	800f4aa <osMessageGet+0xc6>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e000      	b.n	800f4ac <osMessageGet+0xc8>
 800f4aa:	2340      	movs	r3, #64	; 0x40
 800f4ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	461c      	mov	r4, r3
 800f4b2:	f107 0314 	add.w	r3, r7, #20
 800f4b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	372c      	adds	r7, #44	; 0x2c
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd90      	pop	{r4, r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	e000ed04 	.word	0xe000ed04

0800f4cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f103 0208 	add.w	r2, r3, #8
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f103 0208 	add.w	r2, r3, #8
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f103 0208 	add.w	r2, r3, #8
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f500:	bf00      	nop
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f51a:	bf00      	nop
 800f51c:	370c      	adds	r7, #12
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f526:	b480      	push	{r7}
 800f528:	b085      	sub	sp, #20
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	689a      	ldr	r2, [r3, #8]
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	683a      	ldr	r2, [r7, #0]
 800f550:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	1c5a      	adds	r2, r3, #1
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	601a      	str	r2, [r3, #0]
}
 800f562:	bf00      	nop
 800f564:	3714      	adds	r7, #20
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr

0800f56e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f56e:	b480      	push	{r7}
 800f570:	b085      	sub	sp, #20
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
 800f576:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f584:	d103      	bne.n	800f58e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	691b      	ldr	r3, [r3, #16]
 800f58a:	60fb      	str	r3, [r7, #12]
 800f58c:	e00c      	b.n	800f5a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	3308      	adds	r3, #8
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e002      	b.n	800f59c <vListInsert+0x2e>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	60fb      	str	r3, [r7, #12]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	68ba      	ldr	r2, [r7, #8]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d2f6      	bcs.n	800f596 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	685a      	ldr	r2, [r3, #4]
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	683a      	ldr	r2, [r7, #0]
 800f5c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	1c5a      	adds	r2, r3, #1
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	601a      	str	r2, [r3, #0]
}
 800f5d4:	bf00      	nop
 800f5d6:	3714      	adds	r7, #20
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b085      	sub	sp, #20
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	691b      	ldr	r3, [r3, #16]
 800f5ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	6892      	ldr	r2, [r2, #8]
 800f5f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	6852      	ldr	r2, [r2, #4]
 800f600:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	687a      	ldr	r2, [r7, #4]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d103      	bne.n	800f614 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	689a      	ldr	r2, [r3, #8]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	1e5a      	subs	r2, r3, #1
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3714      	adds	r7, #20
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10c      	bne.n	800f662 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64c:	b672      	cpsid	i
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	b662      	cpsie	i
 800f65c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f65e:	bf00      	nop
 800f660:	e7fe      	b.n	800f660 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f662:	f001 fd83 	bl	801116c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f66e:	68f9      	ldr	r1, [r7, #12]
 800f670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f672:	fb01 f303 	mul.w	r3, r1, r3
 800f676:	441a      	add	r2, r3
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f692:	3b01      	subs	r3, #1
 800f694:	68f9      	ldr	r1, [r7, #12]
 800f696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f698:	fb01 f303 	mul.w	r3, r1, r3
 800f69c:	441a      	add	r2, r3
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	22ff      	movs	r2, #255	; 0xff
 800f6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	22ff      	movs	r2, #255	; 0xff
 800f6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d114      	bne.n	800f6e2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d01a      	beq.n	800f6f6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	3310      	adds	r3, #16
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f001 f96b 	bl	80109a0 <xTaskRemoveFromEventList>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d012      	beq.n	800f6f6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f6d0:	4b0c      	ldr	r3, [pc, #48]	; (800f704 <xQueueGenericReset+0xd0>)
 800f6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	e009      	b.n	800f6f6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3310      	adds	r3, #16
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff fef0 	bl	800f4cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	3324      	adds	r3, #36	; 0x24
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7ff feeb 	bl	800f4cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f6f6:	f001 fd6d 	bl	80111d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f6fa:	2301      	movs	r3, #1
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3710      	adds	r7, #16
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	e000ed04 	.word	0xe000ed04

0800f708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b08e      	sub	sp, #56	; 0x38
 800f70c:	af02      	add	r7, sp, #8
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	607a      	str	r2, [r7, #4]
 800f714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10c      	bne.n	800f736 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f720:	b672      	cpsid	i
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	b662      	cpsie	i
 800f730:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f732:	bf00      	nop
 800f734:	e7fe      	b.n	800f734 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d10c      	bne.n	800f756 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f740:	b672      	cpsid	i
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	b662      	cpsie	i
 800f750:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f752:	bf00      	nop
 800f754:	e7fe      	b.n	800f754 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <xQueueGenericCreateStatic+0x5a>
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <xQueueGenericCreateStatic+0x5e>
 800f762:	2301      	movs	r3, #1
 800f764:	e000      	b.n	800f768 <xQueueGenericCreateStatic+0x60>
 800f766:	2300      	movs	r3, #0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d10c      	bne.n	800f786 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f770:	b672      	cpsid	i
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	b662      	cpsie	i
 800f780:	623b      	str	r3, [r7, #32]
}
 800f782:	bf00      	nop
 800f784:	e7fe      	b.n	800f784 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d102      	bne.n	800f792 <xQueueGenericCreateStatic+0x8a>
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <xQueueGenericCreateStatic+0x8e>
 800f792:	2301      	movs	r3, #1
 800f794:	e000      	b.n	800f798 <xQueueGenericCreateStatic+0x90>
 800f796:	2300      	movs	r3, #0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d10c      	bne.n	800f7b6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a0:	b672      	cpsid	i
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	b662      	cpsie	i
 800f7b0:	61fb      	str	r3, [r7, #28]
}
 800f7b2:	bf00      	nop
 800f7b4:	e7fe      	b.n	800f7b4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f7b6:	2348      	movs	r3, #72	; 0x48
 800f7b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2b48      	cmp	r3, #72	; 0x48
 800f7be:	d00c      	beq.n	800f7da <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c4:	b672      	cpsid	i
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	b662      	cpsie	i
 800f7d4:	61bb      	str	r3, [r7, #24]
}
 800f7d6:	bf00      	nop
 800f7d8:	e7fe      	b.n	800f7d8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f7da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00d      	beq.n	800f802 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f7ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	687a      	ldr	r2, [r7, #4]
 800f7fa:	68b9      	ldr	r1, [r7, #8]
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f000 f847 	bl	800f890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f804:	4618      	mov	r0, r3
 800f806:	3730      	adds	r7, #48	; 0x30
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b08a      	sub	sp, #40	; 0x28
 800f810:	af02      	add	r7, sp, #8
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	4613      	mov	r3, r2
 800f818:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d10c      	bne.n	800f83a <xQueueGenericCreate+0x2e>
	__asm volatile
 800f820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f824:	b672      	cpsid	i
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	b662      	cpsie	i
 800f834:	613b      	str	r3, [r7, #16]
}
 800f836:	bf00      	nop
 800f838:	e7fe      	b.n	800f838 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d102      	bne.n	800f846 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f840:	2300      	movs	r3, #0
 800f842:	61fb      	str	r3, [r7, #28]
 800f844:	e004      	b.n	800f850 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	fb02 f303 	mul.w	r3, r2, r3
 800f84e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	3348      	adds	r3, #72	; 0x48
 800f854:	4618      	mov	r0, r3
 800f856:	f001 fdb5 	bl	80113c4 <pvPortMalloc>
 800f85a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d011      	beq.n	800f886 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	3348      	adds	r3, #72	; 0x48
 800f86a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f874:	79fa      	ldrb	r2, [r7, #7]
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	4613      	mov	r3, r2
 800f87c:	697a      	ldr	r2, [r7, #20]
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 f805 	bl	800f890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f886:	69bb      	ldr	r3, [r7, #24]
	}
 800f888:	4618      	mov	r0, r3
 800f88a:	3720      	adds	r7, #32
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
 800f89c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	69ba      	ldr	r2, [r7, #24]
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	e002      	b.n	800f8b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f8be:	2101      	movs	r1, #1
 800f8c0:	69b8      	ldr	r0, [r7, #24]
 800f8c2:	f7ff feb7 	bl	800f634 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f8c6:	bf00      	nop
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
	...

0800f8d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b08e      	sub	sp, #56	; 0x38
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	607a      	str	r2, [r7, #4]
 800f8dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d10c      	bne.n	800f906 <xQueueGenericSend+0x36>
	__asm volatile
 800f8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f0:	b672      	cpsid	i
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	b662      	cpsie	i
 800f900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f902:	bf00      	nop
 800f904:	e7fe      	b.n	800f904 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d103      	bne.n	800f914 <xQueueGenericSend+0x44>
 800f90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f910:	2b00      	cmp	r3, #0
 800f912:	d101      	bne.n	800f918 <xQueueGenericSend+0x48>
 800f914:	2301      	movs	r3, #1
 800f916:	e000      	b.n	800f91a <xQueueGenericSend+0x4a>
 800f918:	2300      	movs	r3, #0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10c      	bne.n	800f938 <xQueueGenericSend+0x68>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	b672      	cpsid	i
 800f924:	f383 8811 	msr	BASEPRI, r3
 800f928:	f3bf 8f6f 	isb	sy
 800f92c:	f3bf 8f4f 	dsb	sy
 800f930:	b662      	cpsie	i
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f934:	bf00      	nop
 800f936:	e7fe      	b.n	800f936 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	d103      	bne.n	800f946 <xQueueGenericSend+0x76>
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f942:	2b01      	cmp	r3, #1
 800f944:	d101      	bne.n	800f94a <xQueueGenericSend+0x7a>
 800f946:	2301      	movs	r3, #1
 800f948:	e000      	b.n	800f94c <xQueueGenericSend+0x7c>
 800f94a:	2300      	movs	r3, #0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10c      	bne.n	800f96a <xQueueGenericSend+0x9a>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f954:	b672      	cpsid	i
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	b662      	cpsie	i
 800f964:	623b      	str	r3, [r7, #32]
}
 800f966:	bf00      	nop
 800f968:	e7fe      	b.n	800f968 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f96a:	f001 f9e1 	bl	8010d30 <xTaskGetSchedulerState>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d102      	bne.n	800f97a <xQueueGenericSend+0xaa>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d101      	bne.n	800f97e <xQueueGenericSend+0xae>
 800f97a:	2301      	movs	r3, #1
 800f97c:	e000      	b.n	800f980 <xQueueGenericSend+0xb0>
 800f97e:	2300      	movs	r3, #0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10c      	bne.n	800f99e <xQueueGenericSend+0xce>
	__asm volatile
 800f984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f988:	b672      	cpsid	i
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	b662      	cpsie	i
 800f998:	61fb      	str	r3, [r7, #28]
}
 800f99a:	bf00      	nop
 800f99c:	e7fe      	b.n	800f99c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f99e:	f001 fbe5 	bl	801116c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d302      	bcc.n	800f9b4 <xQueueGenericSend+0xe4>
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2b02      	cmp	r3, #2
 800f9b2:	d129      	bne.n	800fa08 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f9b4:	683a      	ldr	r2, [r7, #0]
 800f9b6:	68b9      	ldr	r1, [r7, #8]
 800f9b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9ba:	f000 fa9b 	bl	800fef4 <prvCopyDataToQueue>
 800f9be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d010      	beq.n	800f9ea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	3324      	adds	r3, #36	; 0x24
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f000 ffe7 	bl	80109a0 <xTaskRemoveFromEventList>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d013      	beq.n	800fa00 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f9d8:	4b3f      	ldr	r3, [pc, #252]	; (800fad8 <xQueueGenericSend+0x208>)
 800f9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9de:	601a      	str	r2, [r3, #0]
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	e00a      	b.n	800fa00 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d007      	beq.n	800fa00 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f9f0:	4b39      	ldr	r3, [pc, #228]	; (800fad8 <xQueueGenericSend+0x208>)
 800f9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9f6:	601a      	str	r2, [r3, #0]
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fa00:	f001 fbe8 	bl	80111d4 <vPortExitCritical>
				return pdPASS;
 800fa04:	2301      	movs	r3, #1
 800fa06:	e063      	b.n	800fad0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d103      	bne.n	800fa16 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa0e:	f001 fbe1 	bl	80111d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	e05c      	b.n	800fad0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d106      	bne.n	800fa2a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa1c:	f107 0314 	add.w	r3, r7, #20
 800fa20:	4618      	mov	r0, r3
 800fa22:	f001 f821 	bl	8010a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa26:	2301      	movs	r3, #1
 800fa28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa2a:	f001 fbd3 	bl	80111d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa2e:	f000 fdc7 	bl	80105c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa32:	f001 fb9b 	bl	801116c <vPortEnterCritical>
 800fa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa3c:	b25b      	sxtb	r3, r3
 800fa3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa42:	d103      	bne.n	800fa4c <xQueueGenericSend+0x17c>
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	2200      	movs	r2, #0
 800fa48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa52:	b25b      	sxtb	r3, r3
 800fa54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa58:	d103      	bne.n	800fa62 <xQueueGenericSend+0x192>
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa62:	f001 fbb7 	bl	80111d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa66:	1d3a      	adds	r2, r7, #4
 800fa68:	f107 0314 	add.w	r3, r7, #20
 800fa6c:	4611      	mov	r1, r2
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f001 f810 	bl	8010a94 <xTaskCheckForTimeOut>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d124      	bne.n	800fac4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fa7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa7c:	f000 fb32 	bl	80100e4 <prvIsQueueFull>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d018      	beq.n	800fab8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa88:	3310      	adds	r3, #16
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 ff60 	bl	8010954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fa94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa96:	f000 fabd 	bl	8010014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fa9a:	f000 fd9f 	bl	80105dc <xTaskResumeAll>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f47f af7c 	bne.w	800f99e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800faa6:	4b0c      	ldr	r3, [pc, #48]	; (800fad8 <xQueueGenericSend+0x208>)
 800faa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	f3bf 8f4f 	dsb	sy
 800fab2:	f3bf 8f6f 	isb	sy
 800fab6:	e772      	b.n	800f99e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800faba:	f000 faab 	bl	8010014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fabe:	f000 fd8d 	bl	80105dc <xTaskResumeAll>
 800fac2:	e76c      	b.n	800f99e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fac6:	f000 faa5 	bl	8010014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800faca:	f000 fd87 	bl	80105dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800face:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3738      	adds	r7, #56	; 0x38
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	e000ed04 	.word	0xe000ed04

0800fadc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b08e      	sub	sp, #56	; 0x38
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d10c      	bne.n	800fb0e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800faf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf8:	b672      	cpsid	i
 800fafa:	f383 8811 	msr	BASEPRI, r3
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	f3bf 8f4f 	dsb	sy
 800fb06:	b662      	cpsie	i
 800fb08:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb0a:	bf00      	nop
 800fb0c:	e7fe      	b.n	800fb0c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d103      	bne.n	800fb1c <xQueueGenericSendFromISR+0x40>
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d101      	bne.n	800fb20 <xQueueGenericSendFromISR+0x44>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e000      	b.n	800fb22 <xQueueGenericSendFromISR+0x46>
 800fb20:	2300      	movs	r3, #0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10c      	bne.n	800fb40 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2a:	b672      	cpsid	i
 800fb2c:	f383 8811 	msr	BASEPRI, r3
 800fb30:	f3bf 8f6f 	isb	sy
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	b662      	cpsie	i
 800fb3a:	623b      	str	r3, [r7, #32]
}
 800fb3c:	bf00      	nop
 800fb3e:	e7fe      	b.n	800fb3e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	d103      	bne.n	800fb4e <xQueueGenericSendFromISR+0x72>
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d101      	bne.n	800fb52 <xQueueGenericSendFromISR+0x76>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e000      	b.n	800fb54 <xQueueGenericSendFromISR+0x78>
 800fb52:	2300      	movs	r3, #0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10c      	bne.n	800fb72 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	b672      	cpsid	i
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	b662      	cpsie	i
 800fb6c:	61fb      	str	r3, [r7, #28]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb72:	f001 fbe3 	bl	801133c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fb76:	f3ef 8211 	mrs	r2, BASEPRI
 800fb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7e:	b672      	cpsid	i
 800fb80:	f383 8811 	msr	BASEPRI, r3
 800fb84:	f3bf 8f6f 	isb	sy
 800fb88:	f3bf 8f4f 	dsb	sy
 800fb8c:	b662      	cpsie	i
 800fb8e:	61ba      	str	r2, [r7, #24]
 800fb90:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fb92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d302      	bcc.n	800fba8 <xQueueGenericSendFromISR+0xcc>
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	d12c      	bne.n	800fc02 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	68b9      	ldr	r1, [r7, #8]
 800fbb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbb8:	f000 f99c 	bl	800fef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fbbc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fbc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbc4:	d112      	bne.n	800fbec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d016      	beq.n	800fbfc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd0:	3324      	adds	r3, #36	; 0x24
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 fee4 	bl	80109a0 <xTaskRemoveFromEventList>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00e      	beq.n	800fbfc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00b      	beq.n	800fbfc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	e007      	b.n	800fbfc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fbec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	b25a      	sxtb	r2, r3
 800fbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fc00:	e001      	b.n	800fc06 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc02:	2300      	movs	r3, #0
 800fc04:	637b      	str	r3, [r7, #52]	; 0x34
 800fc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc08:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fc10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3738      	adds	r7, #56	; 0x38
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08c      	sub	sp, #48	; 0x30
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d10c      	bne.n	800fc50 <xQueueReceive+0x34>
	__asm volatile
 800fc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3a:	b672      	cpsid	i
 800fc3c:	f383 8811 	msr	BASEPRI, r3
 800fc40:	f3bf 8f6f 	isb	sy
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	b662      	cpsie	i
 800fc4a:	623b      	str	r3, [r7, #32]
}
 800fc4c:	bf00      	nop
 800fc4e:	e7fe      	b.n	800fc4e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d103      	bne.n	800fc5e <xQueueReceive+0x42>
 800fc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <xQueueReceive+0x46>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e000      	b.n	800fc64 <xQueueReceive+0x48>
 800fc62:	2300      	movs	r3, #0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d10c      	bne.n	800fc82 <xQueueReceive+0x66>
	__asm volatile
 800fc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6c:	b672      	cpsid	i
 800fc6e:	f383 8811 	msr	BASEPRI, r3
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	f3bf 8f4f 	dsb	sy
 800fc7a:	b662      	cpsie	i
 800fc7c:	61fb      	str	r3, [r7, #28]
}
 800fc7e:	bf00      	nop
 800fc80:	e7fe      	b.n	800fc80 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc82:	f001 f855 	bl	8010d30 <xTaskGetSchedulerState>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d102      	bne.n	800fc92 <xQueueReceive+0x76>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d101      	bne.n	800fc96 <xQueueReceive+0x7a>
 800fc92:	2301      	movs	r3, #1
 800fc94:	e000      	b.n	800fc98 <xQueueReceive+0x7c>
 800fc96:	2300      	movs	r3, #0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10c      	bne.n	800fcb6 <xQueueReceive+0x9a>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca0:	b672      	cpsid	i
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	b662      	cpsie	i
 800fcb0:	61bb      	str	r3, [r7, #24]
}
 800fcb2:	bf00      	nop
 800fcb4:	e7fe      	b.n	800fcb4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcb6:	f001 fa59 	bl	801116c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d01f      	beq.n	800fd06 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcc6:	68b9      	ldr	r1, [r7, #8]
 800fcc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcca:	f000 f97d 	bl	800ffc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd0:	1e5a      	subs	r2, r3, #1
 800fcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd8:	691b      	ldr	r3, [r3, #16]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00f      	beq.n	800fcfe <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce0:	3310      	adds	r3, #16
 800fce2:	4618      	mov	r0, r3
 800fce4:	f000 fe5c 	bl	80109a0 <xTaskRemoveFromEventList>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d007      	beq.n	800fcfe <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fcee:	4b3d      	ldr	r3, [pc, #244]	; (800fde4 <xQueueReceive+0x1c8>)
 800fcf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf4:	601a      	str	r2, [r3, #0]
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fcfe:	f001 fa69 	bl	80111d4 <vPortExitCritical>
				return pdPASS;
 800fd02:	2301      	movs	r3, #1
 800fd04:	e069      	b.n	800fdda <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d103      	bne.n	800fd14 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd0c:	f001 fa62 	bl	80111d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd10:	2300      	movs	r3, #0
 800fd12:	e062      	b.n	800fdda <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd1a:	f107 0310 	add.w	r3, r7, #16
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f000 fea2 	bl	8010a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd24:	2301      	movs	r3, #1
 800fd26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd28:	f001 fa54 	bl	80111d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd2c:	f000 fc48 	bl	80105c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd30:	f001 fa1c 	bl	801116c <vPortEnterCritical>
 800fd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd3a:	b25b      	sxtb	r3, r3
 800fd3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd40:	d103      	bne.n	800fd4a <xQueueReceive+0x12e>
 800fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd50:	b25b      	sxtb	r3, r3
 800fd52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd56:	d103      	bne.n	800fd60 <xQueueReceive+0x144>
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd60:	f001 fa38 	bl	80111d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd64:	1d3a      	adds	r2, r7, #4
 800fd66:	f107 0310 	add.w	r3, r7, #16
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f000 fe91 	bl	8010a94 <xTaskCheckForTimeOut>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d123      	bne.n	800fdc0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd7a:	f000 f99d 	bl	80100b8 <prvIsQueueEmpty>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d017      	beq.n	800fdb4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd86:	3324      	adds	r3, #36	; 0x24
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f000 fde1 	bl	8010954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd94:	f000 f93e 	bl	8010014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd98:	f000 fc20 	bl	80105dc <xTaskResumeAll>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d189      	bne.n	800fcb6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800fda2:	4b10      	ldr	r3, [pc, #64]	; (800fde4 <xQueueReceive+0x1c8>)
 800fda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	f3bf 8f6f 	isb	sy
 800fdb2:	e780      	b.n	800fcb6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fdb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdb6:	f000 f92d 	bl	8010014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdba:	f000 fc0f 	bl	80105dc <xTaskResumeAll>
 800fdbe:	e77a      	b.n	800fcb6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fdc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdc2:	f000 f927 	bl	8010014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdc6:	f000 fc09 	bl	80105dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdcc:	f000 f974 	bl	80100b8 <prvIsQueueEmpty>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f43f af6f 	beq.w	800fcb6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fdd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3730      	adds	r7, #48	; 0x30
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	e000ed04 	.word	0xe000ed04

0800fde8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b08e      	sub	sp, #56	; 0x38
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10c      	bne.n	800fe18 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe02:	b672      	cpsid	i
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	b662      	cpsie	i
 800fe12:	623b      	str	r3, [r7, #32]
}
 800fe14:	bf00      	nop
 800fe16:	e7fe      	b.n	800fe16 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d103      	bne.n	800fe26 <xQueueReceiveFromISR+0x3e>
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d101      	bne.n	800fe2a <xQueueReceiveFromISR+0x42>
 800fe26:	2301      	movs	r3, #1
 800fe28:	e000      	b.n	800fe2c <xQueueReceiveFromISR+0x44>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d10c      	bne.n	800fe4a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800fe30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe34:	b672      	cpsid	i
 800fe36:	f383 8811 	msr	BASEPRI, r3
 800fe3a:	f3bf 8f6f 	isb	sy
 800fe3e:	f3bf 8f4f 	dsb	sy
 800fe42:	b662      	cpsie	i
 800fe44:	61fb      	str	r3, [r7, #28]
}
 800fe46:	bf00      	nop
 800fe48:	e7fe      	b.n	800fe48 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe4a:	f001 fa77 	bl	801133c <vPortValidateInterruptPriority>
	__asm volatile
 800fe4e:	f3ef 8211 	mrs	r2, BASEPRI
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	b672      	cpsid	i
 800fe58:	f383 8811 	msr	BASEPRI, r3
 800fe5c:	f3bf 8f6f 	isb	sy
 800fe60:	f3bf 8f4f 	dsb	sy
 800fe64:	b662      	cpsie	i
 800fe66:	61ba      	str	r2, [r7, #24]
 800fe68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fe6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d02f      	beq.n	800feda <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fe7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe84:	68b9      	ldr	r1, [r7, #8]
 800fe86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe88:	f000 f89e 	bl	800ffc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8e:	1e5a      	subs	r2, r3, #1
 800fe90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fe94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe9c:	d112      	bne.n	800fec4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d016      	beq.n	800fed4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea8:	3310      	adds	r3, #16
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 fd78 	bl	80109a0 <xTaskRemoveFromEventList>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00e      	beq.n	800fed4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d00b      	beq.n	800fed4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2201      	movs	r2, #1
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	e007      	b.n	800fed4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec8:	3301      	adds	r3, #1
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	b25a      	sxtb	r2, r3
 800fece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fed4:	2301      	movs	r3, #1
 800fed6:	637b      	str	r3, [r7, #52]	; 0x34
 800fed8:	e001      	b.n	800fede <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800feda:	2300      	movs	r3, #0
 800fedc:	637b      	str	r3, [r7, #52]	; 0x34
 800fede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	f383 8811 	msr	BASEPRI, r3
}
 800fee8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800feea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800feec:	4618      	mov	r0, r3
 800feee:	3738      	adds	r7, #56	; 0x38
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ff00:	2300      	movs	r3, #0
 800ff02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10d      	bne.n	800ff2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d14d      	bne.n	800ffb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 ff24 	bl	8010d6c <xTaskPriorityDisinherit>
 800ff24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	609a      	str	r2, [r3, #8]
 800ff2c:	e043      	b.n	800ffb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d119      	bne.n	800ff68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6858      	ldr	r0, [r3, #4]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	f002 fe4e 	bl	8012be0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff4c:	441a      	add	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	685a      	ldr	r2, [r3, #4]
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	689b      	ldr	r3, [r3, #8]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d32b      	bcc.n	800ffb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681a      	ldr	r2, [r3, #0]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	605a      	str	r2, [r3, #4]
 800ff66:	e026      	b.n	800ffb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	68d8      	ldr	r0, [r3, #12]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff70:	461a      	mov	r2, r3
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	f002 fe34 	bl	8012be0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	68da      	ldr	r2, [r3, #12]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff80:	425b      	negs	r3, r3
 800ff82:	441a      	add	r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	68da      	ldr	r2, [r3, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d207      	bcs.n	800ffa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9c:	425b      	negs	r3, r3
 800ff9e:	441a      	add	r2, r3
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d105      	bne.n	800ffb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ffbe:	697b      	ldr	r3, [r7, #20]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d018      	beq.n	801000c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	68da      	ldr	r2, [r3, #12]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe2:	441a      	add	r2, r3
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	68da      	ldr	r2, [r3, #12]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d303      	bcc.n	800fffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	68d9      	ldr	r1, [r3, #12]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010004:	461a      	mov	r2, r3
 8010006:	6838      	ldr	r0, [r7, #0]
 8010008:	f002 fdea 	bl	8012be0 <memcpy>
	}
}
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801001c:	f001 f8a6 	bl	801116c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010028:	e011      	b.n	801004e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002e:	2b00      	cmp	r3, #0
 8010030:	d012      	beq.n	8010058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	3324      	adds	r3, #36	; 0x24
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fcb2 	bl	80109a0 <xTaskRemoveFromEventList>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d001      	beq.n	8010046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010042:	f000 fd8d 	bl	8010b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	3b01      	subs	r3, #1
 801004a:	b2db      	uxtb	r3, r3
 801004c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801004e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010052:	2b00      	cmp	r3, #0
 8010054:	dce9      	bgt.n	801002a <prvUnlockQueue+0x16>
 8010056:	e000      	b.n	801005a <prvUnlockQueue+0x46>
					break;
 8010058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	22ff      	movs	r2, #255	; 0xff
 801005e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010062:	f001 f8b7 	bl	80111d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010066:	f001 f881 	bl	801116c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010072:	e011      	b.n	8010098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d012      	beq.n	80100a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	3310      	adds	r3, #16
 8010080:	4618      	mov	r0, r3
 8010082:	f000 fc8d 	bl	80109a0 <xTaskRemoveFromEventList>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d001      	beq.n	8010090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801008c:	f000 fd68 	bl	8010b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010090:	7bbb      	ldrb	r3, [r7, #14]
 8010092:	3b01      	subs	r3, #1
 8010094:	b2db      	uxtb	r3, r3
 8010096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801009c:	2b00      	cmp	r3, #0
 801009e:	dce9      	bgt.n	8010074 <prvUnlockQueue+0x60>
 80100a0:	e000      	b.n	80100a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80100a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	22ff      	movs	r2, #255	; 0xff
 80100a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80100ac:	f001 f892 	bl	80111d4 <vPortExitCritical>
}
 80100b0:	bf00      	nop
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100c0:	f001 f854 	bl	801116c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d102      	bne.n	80100d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100cc:	2301      	movs	r3, #1
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e001      	b.n	80100d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100d2:	2300      	movs	r3, #0
 80100d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100d6:	f001 f87d 	bl	80111d4 <vPortExitCritical>

	return xReturn;
 80100da:	68fb      	ldr	r3, [r7, #12]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100ec:	f001 f83e 	bl	801116c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d102      	bne.n	8010102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80100fc:	2301      	movs	r3, #1
 80100fe:	60fb      	str	r3, [r7, #12]
 8010100:	e001      	b.n	8010106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010102:	2300      	movs	r3, #0
 8010104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010106:	f001 f865 	bl	80111d4 <vPortExitCritical>

	return xReturn;
 801010a:	68fb      	ldr	r3, [r7, #12]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010114:	b580      	push	{r7, lr}
 8010116:	b08e      	sub	sp, #56	; 0x38
 8010118:	af04      	add	r7, sp, #16
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
 8010120:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010124:	2b00      	cmp	r3, #0
 8010126:	d10c      	bne.n	8010142 <xTaskCreateStatic+0x2e>
	__asm volatile
 8010128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012c:	b672      	cpsid	i
 801012e:	f383 8811 	msr	BASEPRI, r3
 8010132:	f3bf 8f6f 	isb	sy
 8010136:	f3bf 8f4f 	dsb	sy
 801013a:	b662      	cpsie	i
 801013c:	623b      	str	r3, [r7, #32]
}
 801013e:	bf00      	nop
 8010140:	e7fe      	b.n	8010140 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10c      	bne.n	8010162 <xTaskCreateStatic+0x4e>
	__asm volatile
 8010148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014c:	b672      	cpsid	i
 801014e:	f383 8811 	msr	BASEPRI, r3
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	f3bf 8f4f 	dsb	sy
 801015a:	b662      	cpsie	i
 801015c:	61fb      	str	r3, [r7, #28]
}
 801015e:	bf00      	nop
 8010160:	e7fe      	b.n	8010160 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010162:	23a0      	movs	r3, #160	; 0xa0
 8010164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	2ba0      	cmp	r3, #160	; 0xa0
 801016a:	d00c      	beq.n	8010186 <xTaskCreateStatic+0x72>
	__asm volatile
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	b672      	cpsid	i
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	b662      	cpsie	i
 8010180:	61bb      	str	r3, [r7, #24]
}
 8010182:	bf00      	nop
 8010184:	e7fe      	b.n	8010184 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010186:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018a:	2b00      	cmp	r3, #0
 801018c:	d01e      	beq.n	80101cc <xTaskCreateStatic+0xb8>
 801018e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010190:	2b00      	cmp	r3, #0
 8010192:	d01b      	beq.n	80101cc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801019c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801019e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a0:	2202      	movs	r2, #2
 80101a2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101a6:	2300      	movs	r3, #0
 80101a8:	9303      	str	r3, [sp, #12]
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	9302      	str	r3, [sp, #8]
 80101ae:	f107 0314 	add.w	r3, r7, #20
 80101b2:	9301      	str	r3, [sp, #4]
 80101b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b6:	9300      	str	r3, [sp, #0]
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	68b9      	ldr	r1, [r7, #8]
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 f850 	bl	8010264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101c6:	f000 f8ed 	bl	80103a4 <prvAddNewTaskToReadyList>
 80101ca:	e001      	b.n	80101d0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80101cc:	2300      	movs	r3, #0
 80101ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80101d0:	697b      	ldr	r3, [r7, #20]
	}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3728      	adds	r7, #40	; 0x28
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b08c      	sub	sp, #48	; 0x30
 80101de:	af04      	add	r7, sp, #16
 80101e0:	60f8      	str	r0, [r7, #12]
 80101e2:	60b9      	str	r1, [r7, #8]
 80101e4:	603b      	str	r3, [r7, #0]
 80101e6:	4613      	mov	r3, r2
 80101e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80101ea:	88fb      	ldrh	r3, [r7, #6]
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	4618      	mov	r0, r3
 80101f0:	f001 f8e8 	bl	80113c4 <pvPortMalloc>
 80101f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d00e      	beq.n	801021a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80101fc:	20a0      	movs	r0, #160	; 0xa0
 80101fe:	f001 f8e1 	bl	80113c4 <pvPortMalloc>
 8010202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d003      	beq.n	8010212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	631a      	str	r2, [r3, #48]	; 0x30
 8010210:	e005      	b.n	801021e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010212:	6978      	ldr	r0, [r7, #20]
 8010214:	f001 f9a0 	bl	8011558 <vPortFree>
 8010218:	e001      	b.n	801021e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d017      	beq.n	8010254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	2200      	movs	r2, #0
 8010228:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801022c:	88fa      	ldrh	r2, [r7, #6]
 801022e:	2300      	movs	r3, #0
 8010230:	9303      	str	r3, [sp, #12]
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	9302      	str	r3, [sp, #8]
 8010236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010238:	9301      	str	r3, [sp, #4]
 801023a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	68b9      	ldr	r1, [r7, #8]
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f000 f80e 	bl	8010264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010248:	69f8      	ldr	r0, [r7, #28]
 801024a:	f000 f8ab 	bl	80103a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801024e:	2301      	movs	r3, #1
 8010250:	61bb      	str	r3, [r7, #24]
 8010252:	e002      	b.n	801025a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801025a:	69bb      	ldr	r3, [r7, #24]
	}
 801025c:	4618      	mov	r0, r3
 801025e:	3720      	adds	r7, #32
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b088      	sub	sp, #32
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
 8010270:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010276:	6879      	ldr	r1, [r7, #4]
 8010278:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801027c:	440b      	add	r3, r1
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4413      	add	r3, r2
 8010282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	f023 0307 	bic.w	r3, r3, #7
 801028a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	f003 0307 	and.w	r3, r3, #7
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00c      	beq.n	80102b0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8010296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029a:	b672      	cpsid	i
 801029c:	f383 8811 	msr	BASEPRI, r3
 80102a0:	f3bf 8f6f 	isb	sy
 80102a4:	f3bf 8f4f 	dsb	sy
 80102a8:	b662      	cpsie	i
 80102aa:	617b      	str	r3, [r7, #20]
}
 80102ac:	bf00      	nop
 80102ae:	e7fe      	b.n	80102ae <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d01f      	beq.n	80102f6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102b6:	2300      	movs	r3, #0
 80102b8:	61fb      	str	r3, [r7, #28]
 80102ba:	e012      	b.n	80102e2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102bc:	68ba      	ldr	r2, [r7, #8]
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	4413      	add	r3, r2
 80102c2:	7819      	ldrb	r1, [r3, #0]
 80102c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	4413      	add	r3, r2
 80102ca:	3334      	adds	r3, #52	; 0x34
 80102cc:	460a      	mov	r2, r1
 80102ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	4413      	add	r3, r2
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d006      	beq.n	80102ea <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	3301      	adds	r3, #1
 80102e0:	61fb      	str	r3, [r7, #28]
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	2b0f      	cmp	r3, #15
 80102e6:	d9e9      	bls.n	80102bc <prvInitialiseNewTask+0x58>
 80102e8:	e000      	b.n	80102ec <prvInitialiseNewTask+0x88>
			{
				break;
 80102ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80102ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ee:	2200      	movs	r2, #0
 80102f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80102f4:	e003      	b.n	80102fe <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80102f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f8:	2200      	movs	r2, #0
 80102fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80102fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010300:	2b06      	cmp	r3, #6
 8010302:	d901      	bls.n	8010308 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010304:	2306      	movs	r3, #6
 8010306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801030c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010312:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	2200      	movs	r2, #0
 8010318:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801031a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031c:	3304      	adds	r3, #4
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff f8f4 	bl	800f50c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010326:	3318      	adds	r3, #24
 8010328:	4618      	mov	r0, r3
 801032a:	f7ff f8ef 	bl	800f50c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010336:	f1c3 0207 	rsb	r2, r3, #7
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	2200      	movs	r2, #0
 8010348:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801034c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034e:	2200      	movs	r2, #0
 8010350:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010356:	334c      	adds	r3, #76	; 0x4c
 8010358:	224c      	movs	r2, #76	; 0x4c
 801035a:	2100      	movs	r1, #0
 801035c:	4618      	mov	r0, r3
 801035e:	f002 fb61 	bl	8012a24 <memset>
 8010362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010364:	4a0c      	ldr	r2, [pc, #48]	; (8010398 <prvInitialiseNewTask+0x134>)
 8010366:	651a      	str	r2, [r3, #80]	; 0x50
 8010368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036a:	4a0c      	ldr	r2, [pc, #48]	; (801039c <prvInitialiseNewTask+0x138>)
 801036c:	655a      	str	r2, [r3, #84]	; 0x54
 801036e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010370:	4a0b      	ldr	r2, [pc, #44]	; (80103a0 <prvInitialiseNewTask+0x13c>)
 8010372:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	68f9      	ldr	r1, [r7, #12]
 8010378:	69b8      	ldr	r0, [r7, #24]
 801037a:	f000 fde7 	bl	8010f4c <pxPortInitialiseStack>
 801037e:	4602      	mov	r2, r0
 8010380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010382:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010386:	2b00      	cmp	r3, #0
 8010388:	d002      	beq.n	8010390 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801038e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010390:	bf00      	nop
 8010392:	3720      	adds	r7, #32
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	20006bb8 	.word	0x20006bb8
 801039c:	20006c20 	.word	0x20006c20
 80103a0:	20006c88 	.word	0x20006c88

080103a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80103ac:	f000 fede 	bl	801116c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80103b0:	4b2a      	ldr	r3, [pc, #168]	; (801045c <prvAddNewTaskToReadyList+0xb8>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	3301      	adds	r3, #1
 80103b6:	4a29      	ldr	r2, [pc, #164]	; (801045c <prvAddNewTaskToReadyList+0xb8>)
 80103b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80103ba:	4b29      	ldr	r3, [pc, #164]	; (8010460 <prvAddNewTaskToReadyList+0xbc>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d109      	bne.n	80103d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80103c2:	4a27      	ldr	r2, [pc, #156]	; (8010460 <prvAddNewTaskToReadyList+0xbc>)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103c8:	4b24      	ldr	r3, [pc, #144]	; (801045c <prvAddNewTaskToReadyList+0xb8>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d110      	bne.n	80103f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103d0:	f000 fbea 	bl	8010ba8 <prvInitialiseTaskLists>
 80103d4:	e00d      	b.n	80103f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103d6:	4b23      	ldr	r3, [pc, #140]	; (8010464 <prvAddNewTaskToReadyList+0xc0>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d109      	bne.n	80103f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103de:	4b20      	ldr	r3, [pc, #128]	; (8010460 <prvAddNewTaskToReadyList+0xbc>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d802      	bhi.n	80103f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80103ec:	4a1c      	ldr	r2, [pc, #112]	; (8010460 <prvAddNewTaskToReadyList+0xbc>)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80103f2:	4b1d      	ldr	r3, [pc, #116]	; (8010468 <prvAddNewTaskToReadyList+0xc4>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3301      	adds	r3, #1
 80103f8:	4a1b      	ldr	r2, [pc, #108]	; (8010468 <prvAddNewTaskToReadyList+0xc4>)
 80103fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010400:	2201      	movs	r2, #1
 8010402:	409a      	lsls	r2, r3
 8010404:	4b19      	ldr	r3, [pc, #100]	; (801046c <prvAddNewTaskToReadyList+0xc8>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4313      	orrs	r3, r2
 801040a:	4a18      	ldr	r2, [pc, #96]	; (801046c <prvAddNewTaskToReadyList+0xc8>)
 801040c:	6013      	str	r3, [r2, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010412:	4613      	mov	r3, r2
 8010414:	009b      	lsls	r3, r3, #2
 8010416:	4413      	add	r3, r2
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	4a15      	ldr	r2, [pc, #84]	; (8010470 <prvAddNewTaskToReadyList+0xcc>)
 801041c:	441a      	add	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	3304      	adds	r3, #4
 8010422:	4619      	mov	r1, r3
 8010424:	4610      	mov	r0, r2
 8010426:	f7ff f87e 	bl	800f526 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801042a:	f000 fed3 	bl	80111d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801042e:	4b0d      	ldr	r3, [pc, #52]	; (8010464 <prvAddNewTaskToReadyList+0xc0>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00e      	beq.n	8010454 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010436:	4b0a      	ldr	r3, [pc, #40]	; (8010460 <prvAddNewTaskToReadyList+0xbc>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010440:	429a      	cmp	r2, r3
 8010442:	d207      	bcs.n	8010454 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010444:	4b0b      	ldr	r3, [pc, #44]	; (8010474 <prvAddNewTaskToReadyList+0xd0>)
 8010446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010454:	bf00      	nop
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	20002f60 	.word	0x20002f60
 8010460:	20002e60 	.word	0x20002e60
 8010464:	20002f6c 	.word	0x20002f6c
 8010468:	20002f7c 	.word	0x20002f7c
 801046c:	20002f68 	.word	0x20002f68
 8010470:	20002e64 	.word	0x20002e64
 8010474:	e000ed04 	.word	0xe000ed04

08010478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010480:	2300      	movs	r3, #0
 8010482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d019      	beq.n	80104be <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801048a:	4b14      	ldr	r3, [pc, #80]	; (80104dc <vTaskDelay+0x64>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00c      	beq.n	80104ac <vTaskDelay+0x34>
	__asm volatile
 8010492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010496:	b672      	cpsid	i
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	b662      	cpsie	i
 80104a6:	60bb      	str	r3, [r7, #8]
}
 80104a8:	bf00      	nop
 80104aa:	e7fe      	b.n	80104aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80104ac:	f000 f888 	bl	80105c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80104b0:	2100      	movs	r1, #0
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 fce4 	bl	8010e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80104b8:	f000 f890 	bl	80105dc <xTaskResumeAll>
 80104bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d107      	bne.n	80104d4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80104c4:	4b06      	ldr	r3, [pc, #24]	; (80104e0 <vTaskDelay+0x68>)
 80104c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ca:	601a      	str	r2, [r3, #0]
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104d4:	bf00      	nop
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	20002f88 	.word	0x20002f88
 80104e0:	e000ed04 	.word	0xe000ed04

080104e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08a      	sub	sp, #40	; 0x28
 80104e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80104ea:	2300      	movs	r3, #0
 80104ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80104ee:	2300      	movs	r3, #0
 80104f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80104f2:	463a      	mov	r2, r7
 80104f4:	1d39      	adds	r1, r7, #4
 80104f6:	f107 0308 	add.w	r3, r7, #8
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7f1 f87c 	bl	80015f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	9202      	str	r2, [sp, #8]
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	2300      	movs	r3, #0
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	2300      	movs	r3, #0
 8010510:	460a      	mov	r2, r1
 8010512:	4923      	ldr	r1, [pc, #140]	; (80105a0 <vTaskStartScheduler+0xbc>)
 8010514:	4823      	ldr	r0, [pc, #140]	; (80105a4 <vTaskStartScheduler+0xc0>)
 8010516:	f7ff fdfd 	bl	8010114 <xTaskCreateStatic>
 801051a:	4603      	mov	r3, r0
 801051c:	4a22      	ldr	r2, [pc, #136]	; (80105a8 <vTaskStartScheduler+0xc4>)
 801051e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010520:	4b21      	ldr	r3, [pc, #132]	; (80105a8 <vTaskStartScheduler+0xc4>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010528:	2301      	movs	r3, #1
 801052a:	617b      	str	r3, [r7, #20]
 801052c:	e001      	b.n	8010532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801052e:	2300      	movs	r3, #0
 8010530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d11d      	bne.n	8010574 <vTaskStartScheduler+0x90>
	__asm volatile
 8010538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053c:	b672      	cpsid	i
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	b662      	cpsie	i
 801054c:	613b      	str	r3, [r7, #16]
}
 801054e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010550:	4b16      	ldr	r3, [pc, #88]	; (80105ac <vTaskStartScheduler+0xc8>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	334c      	adds	r3, #76	; 0x4c
 8010556:	4a16      	ldr	r2, [pc, #88]	; (80105b0 <vTaskStartScheduler+0xcc>)
 8010558:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801055a:	4b16      	ldr	r3, [pc, #88]	; (80105b4 <vTaskStartScheduler+0xd0>)
 801055c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010560:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010562:	4b15      	ldr	r3, [pc, #84]	; (80105b8 <vTaskStartScheduler+0xd4>)
 8010564:	2201      	movs	r2, #1
 8010566:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010568:	4b14      	ldr	r3, [pc, #80]	; (80105bc <vTaskStartScheduler+0xd8>)
 801056a:	2200      	movs	r2, #0
 801056c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801056e:	f000 fd7f 	bl	8011070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010572:	e010      	b.n	8010596 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801057a:	d10c      	bne.n	8010596 <vTaskStartScheduler+0xb2>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	b672      	cpsid	i
 8010582:	f383 8811 	msr	BASEPRI, r3
 8010586:	f3bf 8f6f 	isb	sy
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	b662      	cpsie	i
 8010590:	60fb      	str	r3, [r7, #12]
}
 8010592:	bf00      	nop
 8010594:	e7fe      	b.n	8010594 <vTaskStartScheduler+0xb0>
}
 8010596:	bf00      	nop
 8010598:	3718      	adds	r7, #24
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	0801392c 	.word	0x0801392c
 80105a4:	08010b79 	.word	0x08010b79
 80105a8:	20002f84 	.word	0x20002f84
 80105ac:	20002e60 	.word	0x20002e60
 80105b0:	20000110 	.word	0x20000110
 80105b4:	20002f80 	.word	0x20002f80
 80105b8:	20002f6c 	.word	0x20002f6c
 80105bc:	20002f64 	.word	0x20002f64

080105c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80105c0:	b480      	push	{r7}
 80105c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80105c4:	4b04      	ldr	r3, [pc, #16]	; (80105d8 <vTaskSuspendAll+0x18>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	3301      	adds	r3, #1
 80105ca:	4a03      	ldr	r2, [pc, #12]	; (80105d8 <vTaskSuspendAll+0x18>)
 80105cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80105ce:	bf00      	nop
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr
 80105d8:	20002f88 	.word	0x20002f88

080105dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80105e2:	2300      	movs	r3, #0
 80105e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80105ea:	4b42      	ldr	r3, [pc, #264]	; (80106f4 <xTaskResumeAll+0x118>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d10c      	bne.n	801060c <xTaskResumeAll+0x30>
	__asm volatile
 80105f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f6:	b672      	cpsid	i
 80105f8:	f383 8811 	msr	BASEPRI, r3
 80105fc:	f3bf 8f6f 	isb	sy
 8010600:	f3bf 8f4f 	dsb	sy
 8010604:	b662      	cpsie	i
 8010606:	603b      	str	r3, [r7, #0]
}
 8010608:	bf00      	nop
 801060a:	e7fe      	b.n	801060a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801060c:	f000 fdae 	bl	801116c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010610:	4b38      	ldr	r3, [pc, #224]	; (80106f4 <xTaskResumeAll+0x118>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	3b01      	subs	r3, #1
 8010616:	4a37      	ldr	r2, [pc, #220]	; (80106f4 <xTaskResumeAll+0x118>)
 8010618:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801061a:	4b36      	ldr	r3, [pc, #216]	; (80106f4 <xTaskResumeAll+0x118>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d161      	bne.n	80106e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010622:	4b35      	ldr	r3, [pc, #212]	; (80106f8 <xTaskResumeAll+0x11c>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d05d      	beq.n	80106e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801062a:	e02e      	b.n	801068a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801062c:	4b33      	ldr	r3, [pc, #204]	; (80106fc <xTaskResumeAll+0x120>)
 801062e:	68db      	ldr	r3, [r3, #12]
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	3318      	adds	r3, #24
 8010638:	4618      	mov	r0, r3
 801063a:	f7fe ffd1 	bl	800f5e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	3304      	adds	r3, #4
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe ffcc 	bl	800f5e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064c:	2201      	movs	r2, #1
 801064e:	409a      	lsls	r2, r3
 8010650:	4b2b      	ldr	r3, [pc, #172]	; (8010700 <xTaskResumeAll+0x124>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4313      	orrs	r3, r2
 8010656:	4a2a      	ldr	r2, [pc, #168]	; (8010700 <xTaskResumeAll+0x124>)
 8010658:	6013      	str	r3, [r2, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801065e:	4613      	mov	r3, r2
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	4413      	add	r3, r2
 8010664:	009b      	lsls	r3, r3, #2
 8010666:	4a27      	ldr	r2, [pc, #156]	; (8010704 <xTaskResumeAll+0x128>)
 8010668:	441a      	add	r2, r3
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	3304      	adds	r3, #4
 801066e:	4619      	mov	r1, r3
 8010670:	4610      	mov	r0, r2
 8010672:	f7fe ff58 	bl	800f526 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801067a:	4b23      	ldr	r3, [pc, #140]	; (8010708 <xTaskResumeAll+0x12c>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010680:	429a      	cmp	r2, r3
 8010682:	d302      	bcc.n	801068a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010684:	4b21      	ldr	r3, [pc, #132]	; (801070c <xTaskResumeAll+0x130>)
 8010686:	2201      	movs	r2, #1
 8010688:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801068a:	4b1c      	ldr	r3, [pc, #112]	; (80106fc <xTaskResumeAll+0x120>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1cc      	bne.n	801062c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010698:	f000 fb2a 	bl	8010cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801069c:	4b1c      	ldr	r3, [pc, #112]	; (8010710 <xTaskResumeAll+0x134>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d010      	beq.n	80106ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80106a8:	f000 f836 	bl	8010718 <xTaskIncrementTick>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d002      	beq.n	80106b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80106b2:	4b16      	ldr	r3, [pc, #88]	; (801070c <xTaskResumeAll+0x130>)
 80106b4:	2201      	movs	r2, #1
 80106b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	3b01      	subs	r3, #1
 80106bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d1f1      	bne.n	80106a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80106c4:	4b12      	ldr	r3, [pc, #72]	; (8010710 <xTaskResumeAll+0x134>)
 80106c6:	2200      	movs	r2, #0
 80106c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80106ca:	4b10      	ldr	r3, [pc, #64]	; (801070c <xTaskResumeAll+0x130>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d009      	beq.n	80106e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80106d2:	2301      	movs	r3, #1
 80106d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80106d6:	4b0f      	ldr	r3, [pc, #60]	; (8010714 <xTaskResumeAll+0x138>)
 80106d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106dc:	601a      	str	r2, [r3, #0]
 80106de:	f3bf 8f4f 	dsb	sy
 80106e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106e6:	f000 fd75 	bl	80111d4 <vPortExitCritical>

	return xAlreadyYielded;
 80106ea:	68bb      	ldr	r3, [r7, #8]
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3710      	adds	r7, #16
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}
 80106f4:	20002f88 	.word	0x20002f88
 80106f8:	20002f60 	.word	0x20002f60
 80106fc:	20002f20 	.word	0x20002f20
 8010700:	20002f68 	.word	0x20002f68
 8010704:	20002e64 	.word	0x20002e64
 8010708:	20002e60 	.word	0x20002e60
 801070c:	20002f74 	.word	0x20002f74
 8010710:	20002f70 	.word	0x20002f70
 8010714:	e000ed04 	.word	0xe000ed04

08010718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801071e:	2300      	movs	r3, #0
 8010720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010722:	4b4f      	ldr	r3, [pc, #316]	; (8010860 <xTaskIncrementTick+0x148>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	f040 808a 	bne.w	8010840 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801072c:	4b4d      	ldr	r3, [pc, #308]	; (8010864 <xTaskIncrementTick+0x14c>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	3301      	adds	r3, #1
 8010732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010734:	4a4b      	ldr	r2, [pc, #300]	; (8010864 <xTaskIncrementTick+0x14c>)
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d122      	bne.n	8010786 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8010740:	4b49      	ldr	r3, [pc, #292]	; (8010868 <xTaskIncrementTick+0x150>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00c      	beq.n	8010764 <xTaskIncrementTick+0x4c>
	__asm volatile
 801074a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074e:	b672      	cpsid	i
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	b662      	cpsie	i
 801075e:	603b      	str	r3, [r7, #0]
}
 8010760:	bf00      	nop
 8010762:	e7fe      	b.n	8010762 <xTaskIncrementTick+0x4a>
 8010764:	4b40      	ldr	r3, [pc, #256]	; (8010868 <xTaskIncrementTick+0x150>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	4b40      	ldr	r3, [pc, #256]	; (801086c <xTaskIncrementTick+0x154>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4a3e      	ldr	r2, [pc, #248]	; (8010868 <xTaskIncrementTick+0x150>)
 8010770:	6013      	str	r3, [r2, #0]
 8010772:	4a3e      	ldr	r2, [pc, #248]	; (801086c <xTaskIncrementTick+0x154>)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	6013      	str	r3, [r2, #0]
 8010778:	4b3d      	ldr	r3, [pc, #244]	; (8010870 <xTaskIncrementTick+0x158>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	3301      	adds	r3, #1
 801077e:	4a3c      	ldr	r2, [pc, #240]	; (8010870 <xTaskIncrementTick+0x158>)
 8010780:	6013      	str	r3, [r2, #0]
 8010782:	f000 fab5 	bl	8010cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010786:	4b3b      	ldr	r3, [pc, #236]	; (8010874 <xTaskIncrementTick+0x15c>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	693a      	ldr	r2, [r7, #16]
 801078c:	429a      	cmp	r2, r3
 801078e:	d348      	bcc.n	8010822 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010790:	4b35      	ldr	r3, [pc, #212]	; (8010868 <xTaskIncrementTick+0x150>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d104      	bne.n	80107a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801079a:	4b36      	ldr	r3, [pc, #216]	; (8010874 <xTaskIncrementTick+0x15c>)
 801079c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107a0:	601a      	str	r2, [r3, #0]
					break;
 80107a2:	e03e      	b.n	8010822 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107a4:	4b30      	ldr	r3, [pc, #192]	; (8010868 <xTaskIncrementTick+0x150>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80107b4:	693a      	ldr	r2, [r7, #16]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d203      	bcs.n	80107c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80107bc:	4a2d      	ldr	r2, [pc, #180]	; (8010874 <xTaskIncrementTick+0x15c>)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80107c2:	e02e      	b.n	8010822 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	3304      	adds	r3, #4
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fe ff09 	bl	800f5e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d004      	beq.n	80107e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	3318      	adds	r3, #24
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fe ff00 	bl	800f5e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107e4:	2201      	movs	r2, #1
 80107e6:	409a      	lsls	r2, r3
 80107e8:	4b23      	ldr	r3, [pc, #140]	; (8010878 <xTaskIncrementTick+0x160>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	4a22      	ldr	r2, [pc, #136]	; (8010878 <xTaskIncrementTick+0x160>)
 80107f0:	6013      	str	r3, [r2, #0]
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f6:	4613      	mov	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	4413      	add	r3, r2
 80107fc:	009b      	lsls	r3, r3, #2
 80107fe:	4a1f      	ldr	r2, [pc, #124]	; (801087c <xTaskIncrementTick+0x164>)
 8010800:	441a      	add	r2, r3
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	3304      	adds	r3, #4
 8010806:	4619      	mov	r1, r3
 8010808:	4610      	mov	r0, r2
 801080a:	f7fe fe8c 	bl	800f526 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010812:	4b1b      	ldr	r3, [pc, #108]	; (8010880 <xTaskIncrementTick+0x168>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010818:	429a      	cmp	r2, r3
 801081a:	d3b9      	bcc.n	8010790 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801081c:	2301      	movs	r3, #1
 801081e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010820:	e7b6      	b.n	8010790 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010822:	4b17      	ldr	r3, [pc, #92]	; (8010880 <xTaskIncrementTick+0x168>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010828:	4914      	ldr	r1, [pc, #80]	; (801087c <xTaskIncrementTick+0x164>)
 801082a:	4613      	mov	r3, r2
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	4413      	add	r3, r2
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	440b      	add	r3, r1
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d907      	bls.n	801084a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801083a:	2301      	movs	r3, #1
 801083c:	617b      	str	r3, [r7, #20]
 801083e:	e004      	b.n	801084a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010840:	4b10      	ldr	r3, [pc, #64]	; (8010884 <xTaskIncrementTick+0x16c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	3301      	adds	r3, #1
 8010846:	4a0f      	ldr	r2, [pc, #60]	; (8010884 <xTaskIncrementTick+0x16c>)
 8010848:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801084a:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <xTaskIncrementTick+0x170>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d001      	beq.n	8010856 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8010852:	2301      	movs	r3, #1
 8010854:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010856:	697b      	ldr	r3, [r7, #20]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20002f88 	.word	0x20002f88
 8010864:	20002f64 	.word	0x20002f64
 8010868:	20002f18 	.word	0x20002f18
 801086c:	20002f1c 	.word	0x20002f1c
 8010870:	20002f78 	.word	0x20002f78
 8010874:	20002f80 	.word	0x20002f80
 8010878:	20002f68 	.word	0x20002f68
 801087c:	20002e64 	.word	0x20002e64
 8010880:	20002e60 	.word	0x20002e60
 8010884:	20002f70 	.word	0x20002f70
 8010888:	20002f74 	.word	0x20002f74

0801088c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801088c:	b480      	push	{r7}
 801088e:	b087      	sub	sp, #28
 8010890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010892:	4b2a      	ldr	r3, [pc, #168]	; (801093c <vTaskSwitchContext+0xb0>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d003      	beq.n	80108a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801089a:	4b29      	ldr	r3, [pc, #164]	; (8010940 <vTaskSwitchContext+0xb4>)
 801089c:	2201      	movs	r2, #1
 801089e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80108a0:	e046      	b.n	8010930 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80108a2:	4b27      	ldr	r3, [pc, #156]	; (8010940 <vTaskSwitchContext+0xb4>)
 80108a4:	2200      	movs	r2, #0
 80108a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108a8:	4b26      	ldr	r3, [pc, #152]	; (8010944 <vTaskSwitchContext+0xb8>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	fab3 f383 	clz	r3, r3
 80108b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80108b6:	7afb      	ldrb	r3, [r7, #11]
 80108b8:	f1c3 031f 	rsb	r3, r3, #31
 80108bc:	617b      	str	r3, [r7, #20]
 80108be:	4922      	ldr	r1, [pc, #136]	; (8010948 <vTaskSwitchContext+0xbc>)
 80108c0:	697a      	ldr	r2, [r7, #20]
 80108c2:	4613      	mov	r3, r2
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	4413      	add	r3, r2
 80108c8:	009b      	lsls	r3, r3, #2
 80108ca:	440b      	add	r3, r1
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10c      	bne.n	80108ec <vTaskSwitchContext+0x60>
	__asm volatile
 80108d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d6:	b672      	cpsid	i
 80108d8:	f383 8811 	msr	BASEPRI, r3
 80108dc:	f3bf 8f6f 	isb	sy
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	b662      	cpsie	i
 80108e6:	607b      	str	r3, [r7, #4]
}
 80108e8:	bf00      	nop
 80108ea:	e7fe      	b.n	80108ea <vTaskSwitchContext+0x5e>
 80108ec:	697a      	ldr	r2, [r7, #20]
 80108ee:	4613      	mov	r3, r2
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	4413      	add	r3, r2
 80108f4:	009b      	lsls	r3, r3, #2
 80108f6:	4a14      	ldr	r2, [pc, #80]	; (8010948 <vTaskSwitchContext+0xbc>)
 80108f8:	4413      	add	r3, r2
 80108fa:	613b      	str	r3, [r7, #16]
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	685a      	ldr	r2, [r3, #4]
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	605a      	str	r2, [r3, #4]
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	685a      	ldr	r2, [r3, #4]
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	3308      	adds	r3, #8
 801090e:	429a      	cmp	r2, r3
 8010910:	d104      	bne.n	801091c <vTaskSwitchContext+0x90>
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	685a      	ldr	r2, [r3, #4]
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	605a      	str	r2, [r3, #4]
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	4a0a      	ldr	r2, [pc, #40]	; (801094c <vTaskSwitchContext+0xc0>)
 8010924:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010926:	4b09      	ldr	r3, [pc, #36]	; (801094c <vTaskSwitchContext+0xc0>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	334c      	adds	r3, #76	; 0x4c
 801092c:	4a08      	ldr	r2, [pc, #32]	; (8010950 <vTaskSwitchContext+0xc4>)
 801092e:	6013      	str	r3, [r2, #0]
}
 8010930:	bf00      	nop
 8010932:	371c      	adds	r7, #28
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	20002f88 	.word	0x20002f88
 8010940:	20002f74 	.word	0x20002f74
 8010944:	20002f68 	.word	0x20002f68
 8010948:	20002e64 	.word	0x20002e64
 801094c:	20002e60 	.word	0x20002e60
 8010950:	20000110 	.word	0x20000110

08010954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d10c      	bne.n	801097e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010968:	b672      	cpsid	i
 801096a:	f383 8811 	msr	BASEPRI, r3
 801096e:	f3bf 8f6f 	isb	sy
 8010972:	f3bf 8f4f 	dsb	sy
 8010976:	b662      	cpsie	i
 8010978:	60fb      	str	r3, [r7, #12]
}
 801097a:	bf00      	nop
 801097c:	e7fe      	b.n	801097c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801097e:	4b07      	ldr	r3, [pc, #28]	; (801099c <vTaskPlaceOnEventList+0x48>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	3318      	adds	r3, #24
 8010984:	4619      	mov	r1, r3
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7fe fdf1 	bl	800f56e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801098c:	2101      	movs	r1, #1
 801098e:	6838      	ldr	r0, [r7, #0]
 8010990:	f000 fa76 	bl	8010e80 <prvAddCurrentTaskToDelayedList>
}
 8010994:	bf00      	nop
 8010996:	3710      	adds	r7, #16
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}
 801099c:	20002e60 	.word	0x20002e60

080109a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	68db      	ldr	r3, [r3, #12]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d10c      	bne.n	80109d0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80109b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ba:	b672      	cpsid	i
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	b662      	cpsie	i
 80109ca:	60fb      	str	r3, [r7, #12]
}
 80109cc:	bf00      	nop
 80109ce:	e7fe      	b.n	80109ce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	3318      	adds	r3, #24
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fe fe03 	bl	800f5e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109da:	4b1d      	ldr	r3, [pc, #116]	; (8010a50 <xTaskRemoveFromEventList+0xb0>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d11c      	bne.n	8010a1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	3304      	adds	r3, #4
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe fdfa 	bl	800f5e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f0:	2201      	movs	r2, #1
 80109f2:	409a      	lsls	r2, r3
 80109f4:	4b17      	ldr	r3, [pc, #92]	; (8010a54 <xTaskRemoveFromEventList+0xb4>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	4a16      	ldr	r2, [pc, #88]	; (8010a54 <xTaskRemoveFromEventList+0xb4>)
 80109fc:	6013      	str	r3, [r2, #0]
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a02:	4613      	mov	r3, r2
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	4413      	add	r3, r2
 8010a08:	009b      	lsls	r3, r3, #2
 8010a0a:	4a13      	ldr	r2, [pc, #76]	; (8010a58 <xTaskRemoveFromEventList+0xb8>)
 8010a0c:	441a      	add	r2, r3
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	3304      	adds	r3, #4
 8010a12:	4619      	mov	r1, r3
 8010a14:	4610      	mov	r0, r2
 8010a16:	f7fe fd86 	bl	800f526 <vListInsertEnd>
 8010a1a:	e005      	b.n	8010a28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	3318      	adds	r3, #24
 8010a20:	4619      	mov	r1, r3
 8010a22:	480e      	ldr	r0, [pc, #56]	; (8010a5c <xTaskRemoveFromEventList+0xbc>)
 8010a24:	f7fe fd7f 	bl	800f526 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a2c:	4b0c      	ldr	r3, [pc, #48]	; (8010a60 <xTaskRemoveFromEventList+0xc0>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d905      	bls.n	8010a42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a36:	2301      	movs	r3, #1
 8010a38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a3a:	4b0a      	ldr	r3, [pc, #40]	; (8010a64 <xTaskRemoveFromEventList+0xc4>)
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	601a      	str	r2, [r3, #0]
 8010a40:	e001      	b.n	8010a46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010a42:	2300      	movs	r3, #0
 8010a44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a46:	697b      	ldr	r3, [r7, #20]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3718      	adds	r7, #24
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	20002f88 	.word	0x20002f88
 8010a54:	20002f68 	.word	0x20002f68
 8010a58:	20002e64 	.word	0x20002e64
 8010a5c:	20002f20 	.word	0x20002f20
 8010a60:	20002e60 	.word	0x20002e60
 8010a64:	20002f74 	.word	0x20002f74

08010a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010a70:	4b06      	ldr	r3, [pc, #24]	; (8010a8c <vTaskInternalSetTimeOutState+0x24>)
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010a78:	4b05      	ldr	r3, [pc, #20]	; (8010a90 <vTaskInternalSetTimeOutState+0x28>)
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	605a      	str	r2, [r3, #4]
}
 8010a80:	bf00      	nop
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr
 8010a8c:	20002f78 	.word	0x20002f78
 8010a90:	20002f64 	.word	0x20002f64

08010a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b088      	sub	sp, #32
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10c      	bne.n	8010abe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa8:	b672      	cpsid	i
 8010aaa:	f383 8811 	msr	BASEPRI, r3
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	b662      	cpsie	i
 8010ab8:	613b      	str	r3, [r7, #16]
}
 8010aba:	bf00      	nop
 8010abc:	e7fe      	b.n	8010abc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10c      	bne.n	8010ade <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac8:	b672      	cpsid	i
 8010aca:	f383 8811 	msr	BASEPRI, r3
 8010ace:	f3bf 8f6f 	isb	sy
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	b662      	cpsie	i
 8010ad8:	60fb      	str	r3, [r7, #12]
}
 8010ada:	bf00      	nop
 8010adc:	e7fe      	b.n	8010adc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010ade:	f000 fb45 	bl	801116c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010ae2:	4b1d      	ldr	r3, [pc, #116]	; (8010b58 <xTaskCheckForTimeOut+0xc4>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	69ba      	ldr	r2, [r7, #24]
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010afa:	d102      	bne.n	8010b02 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010afc:	2300      	movs	r3, #0
 8010afe:	61fb      	str	r3, [r7, #28]
 8010b00:	e023      	b.n	8010b4a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	4b15      	ldr	r3, [pc, #84]	; (8010b5c <xTaskCheckForTimeOut+0xc8>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d007      	beq.n	8010b1e <xTaskCheckForTimeOut+0x8a>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	69ba      	ldr	r2, [r7, #24]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d302      	bcc.n	8010b1e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	61fb      	str	r3, [r7, #28]
 8010b1c:	e015      	b.n	8010b4a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	697a      	ldr	r2, [r7, #20]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d20b      	bcs.n	8010b40 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	1ad2      	subs	r2, r2, r3
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f7ff ff97 	bl	8010a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	61fb      	str	r3, [r7, #28]
 8010b3e:	e004      	b.n	8010b4a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	2200      	movs	r2, #0
 8010b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b46:	2301      	movs	r3, #1
 8010b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b4a:	f000 fb43 	bl	80111d4 <vPortExitCritical>

	return xReturn;
 8010b4e:	69fb      	ldr	r3, [r7, #28]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3720      	adds	r7, #32
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	20002f64 	.word	0x20002f64
 8010b5c:	20002f78 	.word	0x20002f78

08010b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010b60:	b480      	push	{r7}
 8010b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010b64:	4b03      	ldr	r3, [pc, #12]	; (8010b74 <vTaskMissedYield+0x14>)
 8010b66:	2201      	movs	r2, #1
 8010b68:	601a      	str	r2, [r3, #0]
}
 8010b6a:	bf00      	nop
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr
 8010b74:	20002f74 	.word	0x20002f74

08010b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010b80:	f000 f852 	bl	8010c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010b84:	4b06      	ldr	r3, [pc, #24]	; (8010ba0 <prvIdleTask+0x28>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d9f9      	bls.n	8010b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010b8c:	4b05      	ldr	r3, [pc, #20]	; (8010ba4 <prvIdleTask+0x2c>)
 8010b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b92:	601a      	str	r2, [r3, #0]
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010b9c:	e7f0      	b.n	8010b80 <prvIdleTask+0x8>
 8010b9e:	bf00      	nop
 8010ba0:	20002e64 	.word	0x20002e64
 8010ba4:	e000ed04 	.word	0xe000ed04

08010ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bae:	2300      	movs	r3, #0
 8010bb0:	607b      	str	r3, [r7, #4]
 8010bb2:	e00c      	b.n	8010bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	4413      	add	r3, r2
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	4a12      	ldr	r2, [pc, #72]	; (8010c08 <prvInitialiseTaskLists+0x60>)
 8010bc0:	4413      	add	r3, r2
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fe fc82 	bl	800f4cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	607b      	str	r3, [r7, #4]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2b06      	cmp	r3, #6
 8010bd2:	d9ef      	bls.n	8010bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010bd4:	480d      	ldr	r0, [pc, #52]	; (8010c0c <prvInitialiseTaskLists+0x64>)
 8010bd6:	f7fe fc79 	bl	800f4cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010bda:	480d      	ldr	r0, [pc, #52]	; (8010c10 <prvInitialiseTaskLists+0x68>)
 8010bdc:	f7fe fc76 	bl	800f4cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010be0:	480c      	ldr	r0, [pc, #48]	; (8010c14 <prvInitialiseTaskLists+0x6c>)
 8010be2:	f7fe fc73 	bl	800f4cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010be6:	480c      	ldr	r0, [pc, #48]	; (8010c18 <prvInitialiseTaskLists+0x70>)
 8010be8:	f7fe fc70 	bl	800f4cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010bec:	480b      	ldr	r0, [pc, #44]	; (8010c1c <prvInitialiseTaskLists+0x74>)
 8010bee:	f7fe fc6d 	bl	800f4cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010bf2:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <prvInitialiseTaskLists+0x78>)
 8010bf4:	4a05      	ldr	r2, [pc, #20]	; (8010c0c <prvInitialiseTaskLists+0x64>)
 8010bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010bf8:	4b0a      	ldr	r3, [pc, #40]	; (8010c24 <prvInitialiseTaskLists+0x7c>)
 8010bfa:	4a05      	ldr	r2, [pc, #20]	; (8010c10 <prvInitialiseTaskLists+0x68>)
 8010bfc:	601a      	str	r2, [r3, #0]
}
 8010bfe:	bf00      	nop
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	20002e64 	.word	0x20002e64
 8010c0c:	20002ef0 	.word	0x20002ef0
 8010c10:	20002f04 	.word	0x20002f04
 8010c14:	20002f20 	.word	0x20002f20
 8010c18:	20002f34 	.word	0x20002f34
 8010c1c:	20002f4c 	.word	0x20002f4c
 8010c20:	20002f18 	.word	0x20002f18
 8010c24:	20002f1c 	.word	0x20002f1c

08010c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c2e:	e019      	b.n	8010c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c30:	f000 fa9c 	bl	801116c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c34:	4b10      	ldr	r3, [pc, #64]	; (8010c78 <prvCheckTasksWaitingTermination+0x50>)
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	3304      	adds	r3, #4
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fe fccd 	bl	800f5e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c46:	4b0d      	ldr	r3, [pc, #52]	; (8010c7c <prvCheckTasksWaitingTermination+0x54>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	3b01      	subs	r3, #1
 8010c4c:	4a0b      	ldr	r2, [pc, #44]	; (8010c7c <prvCheckTasksWaitingTermination+0x54>)
 8010c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c50:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <prvCheckTasksWaitingTermination+0x58>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	3b01      	subs	r3, #1
 8010c56:	4a0a      	ldr	r2, [pc, #40]	; (8010c80 <prvCheckTasksWaitingTermination+0x58>)
 8010c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c5a:	f000 fabb 	bl	80111d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 f810 	bl	8010c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c64:	4b06      	ldr	r3, [pc, #24]	; (8010c80 <prvCheckTasksWaitingTermination+0x58>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1e1      	bne.n	8010c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010c6c:	bf00      	nop
 8010c6e:	bf00      	nop
 8010c70:	3708      	adds	r7, #8
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	20002f34 	.word	0x20002f34
 8010c7c:	20002f60 	.word	0x20002f60
 8010c80:	20002f48 	.word	0x20002f48

08010c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	334c      	adds	r3, #76	; 0x4c
 8010c90:	4618      	mov	r0, r3
 8010c92:	f001 fecf 	bl	8012a34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d108      	bne.n	8010cb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f000 fc57 	bl	8011558 <vPortFree>
				vPortFree( pxTCB );
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fc54 	bl	8011558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010cb0:	e01a      	b.n	8010ce8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d103      	bne.n	8010cc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 fc4b 	bl	8011558 <vPortFree>
	}
 8010cc2:	e011      	b.n	8010ce8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010cca:	2b02      	cmp	r3, #2
 8010ccc:	d00c      	beq.n	8010ce8 <prvDeleteTCB+0x64>
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	b672      	cpsid	i
 8010cd4:	f383 8811 	msr	BASEPRI, r3
 8010cd8:	f3bf 8f6f 	isb	sy
 8010cdc:	f3bf 8f4f 	dsb	sy
 8010ce0:	b662      	cpsie	i
 8010ce2:	60fb      	str	r3, [r7, #12]
}
 8010ce4:	bf00      	nop
 8010ce6:	e7fe      	b.n	8010ce6 <prvDeleteTCB+0x62>
	}
 8010ce8:	bf00      	nop
 8010cea:	3710      	adds	r7, #16
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cf6:	4b0c      	ldr	r3, [pc, #48]	; (8010d28 <prvResetNextTaskUnblockTime+0x38>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d104      	bne.n	8010d0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010d00:	4b0a      	ldr	r3, [pc, #40]	; (8010d2c <prvResetNextTaskUnblockTime+0x3c>)
 8010d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010d08:	e008      	b.n	8010d1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d0a:	4b07      	ldr	r3, [pc, #28]	; (8010d28 <prvResetNextTaskUnblockTime+0x38>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	4a04      	ldr	r2, [pc, #16]	; (8010d2c <prvResetNextTaskUnblockTime+0x3c>)
 8010d1a:	6013      	str	r3, [r2, #0]
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	20002f18 	.word	0x20002f18
 8010d2c:	20002f80 	.word	0x20002f80

08010d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010d36:	4b0b      	ldr	r3, [pc, #44]	; (8010d64 <xTaskGetSchedulerState+0x34>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d102      	bne.n	8010d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	607b      	str	r3, [r7, #4]
 8010d42:	e008      	b.n	8010d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d44:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <xTaskGetSchedulerState+0x38>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d102      	bne.n	8010d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	607b      	str	r3, [r7, #4]
 8010d50:	e001      	b.n	8010d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010d52:	2300      	movs	r3, #0
 8010d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010d56:	687b      	ldr	r3, [r7, #4]
	}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	370c      	adds	r7, #12
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr
 8010d64:	20002f6c 	.word	0x20002f6c
 8010d68:	20002f88 	.word	0x20002f88

08010d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d072      	beq.n	8010e68 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010d82:	4b3c      	ldr	r3, [pc, #240]	; (8010e74 <xTaskPriorityDisinherit+0x108>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	693a      	ldr	r2, [r7, #16]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d00c      	beq.n	8010da6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	b672      	cpsid	i
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	b662      	cpsie	i
 8010da0:	60fb      	str	r3, [r7, #12]
}
 8010da2:	bf00      	nop
 8010da4:	e7fe      	b.n	8010da4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d10c      	bne.n	8010dc8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	b672      	cpsid	i
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	b662      	cpsie	i
 8010dc2:	60bb      	str	r3, [r7, #8]
}
 8010dc4:	bf00      	nop
 8010dc6:	e7fe      	b.n	8010dc6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dcc:	1e5a      	subs	r2, r3, #1
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d044      	beq.n	8010e68 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d140      	bne.n	8010e68 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	3304      	adds	r3, #4
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fe fbf8 	bl	800f5e0 <uxListRemove>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d115      	bne.n	8010e22 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dfa:	491f      	ldr	r1, [pc, #124]	; (8010e78 <xTaskPriorityDisinherit+0x10c>)
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	4413      	add	r3, r2
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	440b      	add	r3, r1
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d10a      	bne.n	8010e22 <xTaskPriorityDisinherit+0xb6>
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e10:	2201      	movs	r2, #1
 8010e12:	fa02 f303 	lsl.w	r3, r2, r3
 8010e16:	43da      	mvns	r2, r3
 8010e18:	4b18      	ldr	r3, [pc, #96]	; (8010e7c <xTaskPriorityDisinherit+0x110>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	4a17      	ldr	r2, [pc, #92]	; (8010e7c <xTaskPriorityDisinherit+0x110>)
 8010e20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e2e:	f1c3 0207 	rsb	r2, r3, #7
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	409a      	lsls	r2, r3
 8010e3e:	4b0f      	ldr	r3, [pc, #60]	; (8010e7c <xTaskPriorityDisinherit+0x110>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4313      	orrs	r3, r2
 8010e44:	4a0d      	ldr	r2, [pc, #52]	; (8010e7c <xTaskPriorityDisinherit+0x110>)
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4413      	add	r3, r2
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4a08      	ldr	r2, [pc, #32]	; (8010e78 <xTaskPriorityDisinherit+0x10c>)
 8010e56:	441a      	add	r2, r3
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	3304      	adds	r3, #4
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	4610      	mov	r0, r2
 8010e60:	f7fe fb61 	bl	800f526 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010e64:	2301      	movs	r3, #1
 8010e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e68:	697b      	ldr	r3, [r7, #20]
	}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3718      	adds	r7, #24
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	20002e60 	.word	0x20002e60
 8010e78:	20002e64 	.word	0x20002e64
 8010e7c:	20002f68 	.word	0x20002f68

08010e80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010e8a:	4b29      	ldr	r3, [pc, #164]	; (8010f30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e90:	4b28      	ldr	r3, [pc, #160]	; (8010f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	3304      	adds	r3, #4
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fe fba2 	bl	800f5e0 <uxListRemove>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d10b      	bne.n	8010eba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010ea2:	4b24      	ldr	r3, [pc, #144]	; (8010f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8010eae:	43da      	mvns	r2, r3
 8010eb0:	4b21      	ldr	r3, [pc, #132]	; (8010f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4013      	ands	r3, r2
 8010eb6:	4a20      	ldr	r2, [pc, #128]	; (8010f38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010eb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ec0:	d10a      	bne.n	8010ed8 <prvAddCurrentTaskToDelayedList+0x58>
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d007      	beq.n	8010ed8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ec8:	4b1a      	ldr	r3, [pc, #104]	; (8010f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	3304      	adds	r3, #4
 8010ece:	4619      	mov	r1, r3
 8010ed0:	481a      	ldr	r0, [pc, #104]	; (8010f3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010ed2:	f7fe fb28 	bl	800f526 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ed6:	e026      	b.n	8010f26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4413      	add	r3, r2
 8010ede:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ee0:	4b14      	ldr	r3, [pc, #80]	; (8010f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	68ba      	ldr	r2, [r7, #8]
 8010ee6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d209      	bcs.n	8010f04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ef0:	4b13      	ldr	r3, [pc, #76]	; (8010f40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	4b0f      	ldr	r3, [pc, #60]	; (8010f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	3304      	adds	r3, #4
 8010efa:	4619      	mov	r1, r3
 8010efc:	4610      	mov	r0, r2
 8010efe:	f7fe fb36 	bl	800f56e <vListInsert>
}
 8010f02:	e010      	b.n	8010f26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f04:	4b0f      	ldr	r3, [pc, #60]	; (8010f44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	4b0a      	ldr	r3, [pc, #40]	; (8010f34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	4619      	mov	r1, r3
 8010f10:	4610      	mov	r0, r2
 8010f12:	f7fe fb2c 	bl	800f56e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f16:	4b0c      	ldr	r3, [pc, #48]	; (8010f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d202      	bcs.n	8010f26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010f20:	4a09      	ldr	r2, [pc, #36]	; (8010f48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	6013      	str	r3, [r2, #0]
}
 8010f26:	bf00      	nop
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	20002f64 	.word	0x20002f64
 8010f34:	20002e60 	.word	0x20002e60
 8010f38:	20002f68 	.word	0x20002f68
 8010f3c:	20002f4c 	.word	0x20002f4c
 8010f40:	20002f1c 	.word	0x20002f1c
 8010f44:	20002f18 	.word	0x20002f18
 8010f48:	20002f80 	.word	0x20002f80

08010f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	3b04      	subs	r3, #4
 8010f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	3b04      	subs	r3, #4
 8010f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	f023 0201 	bic.w	r2, r3, #1
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	3b04      	subs	r3, #4
 8010f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f7c:	4a0c      	ldr	r2, [pc, #48]	; (8010fb0 <pxPortInitialiseStack+0x64>)
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	3b14      	subs	r3, #20
 8010f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	3b04      	subs	r3, #4
 8010f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f06f 0202 	mvn.w	r2, #2
 8010f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	3b20      	subs	r3, #32
 8010fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3714      	adds	r7, #20
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr
 8010fb0:	08010fb5 	.word	0x08010fb5

08010fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010fbe:	4b14      	ldr	r3, [pc, #80]	; (8011010 <prvTaskExitError+0x5c>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fc6:	d00c      	beq.n	8010fe2 <prvTaskExitError+0x2e>
	__asm volatile
 8010fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fcc:	b672      	cpsid	i
 8010fce:	f383 8811 	msr	BASEPRI, r3
 8010fd2:	f3bf 8f6f 	isb	sy
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	b662      	cpsie	i
 8010fdc:	60fb      	str	r3, [r7, #12]
}
 8010fde:	bf00      	nop
 8010fe0:	e7fe      	b.n	8010fe0 <prvTaskExitError+0x2c>
	__asm volatile
 8010fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe6:	b672      	cpsid	i
 8010fe8:	f383 8811 	msr	BASEPRI, r3
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	b662      	cpsie	i
 8010ff6:	60bb      	str	r3, [r7, #8]
}
 8010ff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010ffa:	bf00      	nop
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d0fc      	beq.n	8010ffc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011002:	bf00      	nop
 8011004:	bf00      	nop
 8011006:	3714      	adds	r7, #20
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr
 8011010:	200000b4 	.word	0x200000b4
	...

08011020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011020:	4b07      	ldr	r3, [pc, #28]	; (8011040 <pxCurrentTCBConst2>)
 8011022:	6819      	ldr	r1, [r3, #0]
 8011024:	6808      	ldr	r0, [r1, #0]
 8011026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102a:	f380 8809 	msr	PSP, r0
 801102e:	f3bf 8f6f 	isb	sy
 8011032:	f04f 0000 	mov.w	r0, #0
 8011036:	f380 8811 	msr	BASEPRI, r0
 801103a:	4770      	bx	lr
 801103c:	f3af 8000 	nop.w

08011040 <pxCurrentTCBConst2>:
 8011040:	20002e60 	.word	0x20002e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011044:	bf00      	nop
 8011046:	bf00      	nop

08011048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011048:	4808      	ldr	r0, [pc, #32]	; (801106c <prvPortStartFirstTask+0x24>)
 801104a:	6800      	ldr	r0, [r0, #0]
 801104c:	6800      	ldr	r0, [r0, #0]
 801104e:	f380 8808 	msr	MSP, r0
 8011052:	f04f 0000 	mov.w	r0, #0
 8011056:	f380 8814 	msr	CONTROL, r0
 801105a:	b662      	cpsie	i
 801105c:	b661      	cpsie	f
 801105e:	f3bf 8f4f 	dsb	sy
 8011062:	f3bf 8f6f 	isb	sy
 8011066:	df00      	svc	0
 8011068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801106a:	bf00      	nop
 801106c:	e000ed08 	.word	0xe000ed08

08011070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011076:	4b37      	ldr	r3, [pc, #220]	; (8011154 <xPortStartScheduler+0xe4>)
 8011078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	b2db      	uxtb	r3, r3
 8011080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	22ff      	movs	r2, #255	; 0xff
 8011086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	b2db      	uxtb	r3, r3
 801108e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011090:	78fb      	ldrb	r3, [r7, #3]
 8011092:	b2db      	uxtb	r3, r3
 8011094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011098:	b2da      	uxtb	r2, r3
 801109a:	4b2f      	ldr	r3, [pc, #188]	; (8011158 <xPortStartScheduler+0xe8>)
 801109c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801109e:	4b2f      	ldr	r3, [pc, #188]	; (801115c <xPortStartScheduler+0xec>)
 80110a0:	2207      	movs	r2, #7
 80110a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110a4:	e009      	b.n	80110ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80110a6:	4b2d      	ldr	r3, [pc, #180]	; (801115c <xPortStartScheduler+0xec>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	3b01      	subs	r3, #1
 80110ac:	4a2b      	ldr	r2, [pc, #172]	; (801115c <xPortStartScheduler+0xec>)
 80110ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80110b0:	78fb      	ldrb	r3, [r7, #3]
 80110b2:	b2db      	uxtb	r3, r3
 80110b4:	005b      	lsls	r3, r3, #1
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110ba:	78fb      	ldrb	r3, [r7, #3]
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110c2:	2b80      	cmp	r3, #128	; 0x80
 80110c4:	d0ef      	beq.n	80110a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80110c6:	4b25      	ldr	r3, [pc, #148]	; (801115c <xPortStartScheduler+0xec>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f1c3 0307 	rsb	r3, r3, #7
 80110ce:	2b04      	cmp	r3, #4
 80110d0:	d00c      	beq.n	80110ec <xPortStartScheduler+0x7c>
	__asm volatile
 80110d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d6:	b672      	cpsid	i
 80110d8:	f383 8811 	msr	BASEPRI, r3
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	b662      	cpsie	i
 80110e6:	60bb      	str	r3, [r7, #8]
}
 80110e8:	bf00      	nop
 80110ea:	e7fe      	b.n	80110ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80110ec:	4b1b      	ldr	r3, [pc, #108]	; (801115c <xPortStartScheduler+0xec>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	021b      	lsls	r3, r3, #8
 80110f2:	4a1a      	ldr	r2, [pc, #104]	; (801115c <xPortStartScheduler+0xec>)
 80110f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80110f6:	4b19      	ldr	r3, [pc, #100]	; (801115c <xPortStartScheduler+0xec>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80110fe:	4a17      	ldr	r2, [pc, #92]	; (801115c <xPortStartScheduler+0xec>)
 8011100:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	b2da      	uxtb	r2, r3
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801110a:	4b15      	ldr	r3, [pc, #84]	; (8011160 <xPortStartScheduler+0xf0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4a14      	ldr	r2, [pc, #80]	; (8011160 <xPortStartScheduler+0xf0>)
 8011110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011114:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011116:	4b12      	ldr	r3, [pc, #72]	; (8011160 <xPortStartScheduler+0xf0>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4a11      	ldr	r2, [pc, #68]	; (8011160 <xPortStartScheduler+0xf0>)
 801111c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011120:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011122:	f000 f8dd 	bl	80112e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011126:	4b0f      	ldr	r3, [pc, #60]	; (8011164 <xPortStartScheduler+0xf4>)
 8011128:	2200      	movs	r2, #0
 801112a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801112c:	f000 f8fc 	bl	8011328 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011130:	4b0d      	ldr	r3, [pc, #52]	; (8011168 <xPortStartScheduler+0xf8>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a0c      	ldr	r2, [pc, #48]	; (8011168 <xPortStartScheduler+0xf8>)
 8011136:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801113a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801113c:	f7ff ff84 	bl	8011048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011140:	f7ff fba4 	bl	801088c <vTaskSwitchContext>
	prvTaskExitError();
 8011144:	f7ff ff36 	bl	8010fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011148:	2300      	movs	r3, #0
}
 801114a:	4618      	mov	r0, r3
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	e000e400 	.word	0xe000e400
 8011158:	20002f8c 	.word	0x20002f8c
 801115c:	20002f90 	.word	0x20002f90
 8011160:	e000ed20 	.word	0xe000ed20
 8011164:	200000b4 	.word	0x200000b4
 8011168:	e000ef34 	.word	0xe000ef34

0801116c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
	__asm volatile
 8011172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011176:	b672      	cpsid	i
 8011178:	f383 8811 	msr	BASEPRI, r3
 801117c:	f3bf 8f6f 	isb	sy
 8011180:	f3bf 8f4f 	dsb	sy
 8011184:	b662      	cpsie	i
 8011186:	607b      	str	r3, [r7, #4]
}
 8011188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801118a:	4b10      	ldr	r3, [pc, #64]	; (80111cc <vPortEnterCritical+0x60>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	3301      	adds	r3, #1
 8011190:	4a0e      	ldr	r2, [pc, #56]	; (80111cc <vPortEnterCritical+0x60>)
 8011192:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011194:	4b0d      	ldr	r3, [pc, #52]	; (80111cc <vPortEnterCritical+0x60>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d111      	bne.n	80111c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801119c:	4b0c      	ldr	r3, [pc, #48]	; (80111d0 <vPortEnterCritical+0x64>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00c      	beq.n	80111c0 <vPortEnterCritical+0x54>
	__asm volatile
 80111a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111aa:	b672      	cpsid	i
 80111ac:	f383 8811 	msr	BASEPRI, r3
 80111b0:	f3bf 8f6f 	isb	sy
 80111b4:	f3bf 8f4f 	dsb	sy
 80111b8:	b662      	cpsie	i
 80111ba:	603b      	str	r3, [r7, #0]
}
 80111bc:	bf00      	nop
 80111be:	e7fe      	b.n	80111be <vPortEnterCritical+0x52>
	}
}
 80111c0:	bf00      	nop
 80111c2:	370c      	adds	r7, #12
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr
 80111cc:	200000b4 	.word	0x200000b4
 80111d0:	e000ed04 	.word	0xe000ed04

080111d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80111da:	4b13      	ldr	r3, [pc, #76]	; (8011228 <vPortExitCritical+0x54>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10c      	bne.n	80111fc <vPortExitCritical+0x28>
	__asm volatile
 80111e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e6:	b672      	cpsid	i
 80111e8:	f383 8811 	msr	BASEPRI, r3
 80111ec:	f3bf 8f6f 	isb	sy
 80111f0:	f3bf 8f4f 	dsb	sy
 80111f4:	b662      	cpsie	i
 80111f6:	607b      	str	r3, [r7, #4]
}
 80111f8:	bf00      	nop
 80111fa:	e7fe      	b.n	80111fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80111fc:	4b0a      	ldr	r3, [pc, #40]	; (8011228 <vPortExitCritical+0x54>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	3b01      	subs	r3, #1
 8011202:	4a09      	ldr	r2, [pc, #36]	; (8011228 <vPortExitCritical+0x54>)
 8011204:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011206:	4b08      	ldr	r3, [pc, #32]	; (8011228 <vPortExitCritical+0x54>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d105      	bne.n	801121a <vPortExitCritical+0x46>
 801120e:	2300      	movs	r3, #0
 8011210:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	f383 8811 	msr	BASEPRI, r3
}
 8011218:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801121a:	bf00      	nop
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	200000b4 	.word	0x200000b4
 801122c:	00000000 	.word	0x00000000

08011230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011230:	f3ef 8009 	mrs	r0, PSP
 8011234:	f3bf 8f6f 	isb	sy
 8011238:	4b15      	ldr	r3, [pc, #84]	; (8011290 <pxCurrentTCBConst>)
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	f01e 0f10 	tst.w	lr, #16
 8011240:	bf08      	it	eq
 8011242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124a:	6010      	str	r0, [r2, #0]
 801124c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011254:	b672      	cpsid	i
 8011256:	f380 8811 	msr	BASEPRI, r0
 801125a:	f3bf 8f4f 	dsb	sy
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	b662      	cpsie	i
 8011264:	f7ff fb12 	bl	801088c <vTaskSwitchContext>
 8011268:	f04f 0000 	mov.w	r0, #0
 801126c:	f380 8811 	msr	BASEPRI, r0
 8011270:	bc09      	pop	{r0, r3}
 8011272:	6819      	ldr	r1, [r3, #0]
 8011274:	6808      	ldr	r0, [r1, #0]
 8011276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127a:	f01e 0f10 	tst.w	lr, #16
 801127e:	bf08      	it	eq
 8011280:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011284:	f380 8809 	msr	PSP, r0
 8011288:	f3bf 8f6f 	isb	sy
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop

08011290 <pxCurrentTCBConst>:
 8011290:	20002e60 	.word	0x20002e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011294:	bf00      	nop
 8011296:	bf00      	nop

08011298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
	__asm volatile
 801129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a2:	b672      	cpsid	i
 80112a4:	f383 8811 	msr	BASEPRI, r3
 80112a8:	f3bf 8f6f 	isb	sy
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	b662      	cpsie	i
 80112b2:	607b      	str	r3, [r7, #4]
}
 80112b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80112b6:	f7ff fa2f 	bl	8010718 <xTaskIncrementTick>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d003      	beq.n	80112c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80112c0:	4b06      	ldr	r3, [pc, #24]	; (80112dc <SysTick_Handler+0x44>)
 80112c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112c6:	601a      	str	r2, [r3, #0]
 80112c8:	2300      	movs	r3, #0
 80112ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	f383 8811 	msr	BASEPRI, r3
}
 80112d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80112d4:	bf00      	nop
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	e000ed04 	.word	0xe000ed04

080112e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80112e0:	b480      	push	{r7}
 80112e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80112e4:	4b0b      	ldr	r3, [pc, #44]	; (8011314 <vPortSetupTimerInterrupt+0x34>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80112ea:	4b0b      	ldr	r3, [pc, #44]	; (8011318 <vPortSetupTimerInterrupt+0x38>)
 80112ec:	2200      	movs	r2, #0
 80112ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80112f0:	4b0a      	ldr	r3, [pc, #40]	; (801131c <vPortSetupTimerInterrupt+0x3c>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4a0a      	ldr	r2, [pc, #40]	; (8011320 <vPortSetupTimerInterrupt+0x40>)
 80112f6:	fba2 2303 	umull	r2, r3, r2, r3
 80112fa:	099b      	lsrs	r3, r3, #6
 80112fc:	4a09      	ldr	r2, [pc, #36]	; (8011324 <vPortSetupTimerInterrupt+0x44>)
 80112fe:	3b01      	subs	r3, #1
 8011300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011302:	4b04      	ldr	r3, [pc, #16]	; (8011314 <vPortSetupTimerInterrupt+0x34>)
 8011304:	2207      	movs	r2, #7
 8011306:	601a      	str	r2, [r3, #0]
}
 8011308:	bf00      	nop
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	e000e010 	.word	0xe000e010
 8011318:	e000e018 	.word	0xe000e018
 801131c:	20000028 	.word	0x20000028
 8011320:	10624dd3 	.word	0x10624dd3
 8011324:	e000e014 	.word	0xe000e014

08011328 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011328:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011338 <vPortEnableVFP+0x10>
 801132c:	6801      	ldr	r1, [r0, #0]
 801132e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011332:	6001      	str	r1, [r0, #0]
 8011334:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011336:	bf00      	nop
 8011338:	e000ed88 	.word	0xe000ed88

0801133c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011342:	f3ef 8305 	mrs	r3, IPSR
 8011346:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2b0f      	cmp	r3, #15
 801134c:	d916      	bls.n	801137c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801134e:	4a19      	ldr	r2, [pc, #100]	; (80113b4 <vPortValidateInterruptPriority+0x78>)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	4413      	add	r3, r2
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011358:	4b17      	ldr	r3, [pc, #92]	; (80113b8 <vPortValidateInterruptPriority+0x7c>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	7afa      	ldrb	r2, [r7, #11]
 801135e:	429a      	cmp	r2, r3
 8011360:	d20c      	bcs.n	801137c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	b672      	cpsid	i
 8011368:	f383 8811 	msr	BASEPRI, r3
 801136c:	f3bf 8f6f 	isb	sy
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	b662      	cpsie	i
 8011376:	607b      	str	r3, [r7, #4]
}
 8011378:	bf00      	nop
 801137a:	e7fe      	b.n	801137a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801137c:	4b0f      	ldr	r3, [pc, #60]	; (80113bc <vPortValidateInterruptPriority+0x80>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011384:	4b0e      	ldr	r3, [pc, #56]	; (80113c0 <vPortValidateInterruptPriority+0x84>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	429a      	cmp	r2, r3
 801138a:	d90c      	bls.n	80113a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801138c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011390:	b672      	cpsid	i
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	b662      	cpsie	i
 80113a0:	603b      	str	r3, [r7, #0]
}
 80113a2:	bf00      	nop
 80113a4:	e7fe      	b.n	80113a4 <vPortValidateInterruptPriority+0x68>
	}
 80113a6:	bf00      	nop
 80113a8:	3714      	adds	r7, #20
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop
 80113b4:	e000e3f0 	.word	0xe000e3f0
 80113b8:	20002f8c 	.word	0x20002f8c
 80113bc:	e000ed0c 	.word	0xe000ed0c
 80113c0:	20002f90 	.word	0x20002f90

080113c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08a      	sub	sp, #40	; 0x28
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80113d0:	f7ff f8f6 	bl	80105c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80113d4:	4b5b      	ldr	r3, [pc, #364]	; (8011544 <pvPortMalloc+0x180>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d101      	bne.n	80113e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80113dc:	f000 f91a 	bl	8011614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80113e0:	4b59      	ldr	r3, [pc, #356]	; (8011548 <pvPortMalloc+0x184>)
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4013      	ands	r3, r2
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f040 8092 	bne.w	8011512 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d01f      	beq.n	8011434 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80113f4:	2208      	movs	r2, #8
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	4413      	add	r3, r2
 80113fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f003 0307 	and.w	r3, r3, #7
 8011402:	2b00      	cmp	r3, #0
 8011404:	d016      	beq.n	8011434 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f023 0307 	bic.w	r3, r3, #7
 801140c:	3308      	adds	r3, #8
 801140e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f003 0307 	and.w	r3, r3, #7
 8011416:	2b00      	cmp	r3, #0
 8011418:	d00c      	beq.n	8011434 <pvPortMalloc+0x70>
	__asm volatile
 801141a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141e:	b672      	cpsid	i
 8011420:	f383 8811 	msr	BASEPRI, r3
 8011424:	f3bf 8f6f 	isb	sy
 8011428:	f3bf 8f4f 	dsb	sy
 801142c:	b662      	cpsie	i
 801142e:	617b      	str	r3, [r7, #20]
}
 8011430:	bf00      	nop
 8011432:	e7fe      	b.n	8011432 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d06b      	beq.n	8011512 <pvPortMalloc+0x14e>
 801143a:	4b44      	ldr	r3, [pc, #272]	; (801154c <pvPortMalloc+0x188>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	429a      	cmp	r2, r3
 8011442:	d866      	bhi.n	8011512 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011444:	4b42      	ldr	r3, [pc, #264]	; (8011550 <pvPortMalloc+0x18c>)
 8011446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011448:	4b41      	ldr	r3, [pc, #260]	; (8011550 <pvPortMalloc+0x18c>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801144e:	e004      	b.n	801145a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	429a      	cmp	r2, r3
 8011462:	d903      	bls.n	801146c <pvPortMalloc+0xa8>
 8011464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d1f1      	bne.n	8011450 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801146c:	4b35      	ldr	r3, [pc, #212]	; (8011544 <pvPortMalloc+0x180>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011472:	429a      	cmp	r2, r3
 8011474:	d04d      	beq.n	8011512 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2208      	movs	r2, #8
 801147c:	4413      	add	r3, r2
 801147e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	6a3b      	ldr	r3, [r7, #32]
 8011486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148a:	685a      	ldr	r2, [r3, #4]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	1ad2      	subs	r2, r2, r3
 8011490:	2308      	movs	r3, #8
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	429a      	cmp	r2, r3
 8011496:	d921      	bls.n	80114dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4413      	add	r3, r2
 801149e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114a0:	69bb      	ldr	r3, [r7, #24]
 80114a2:	f003 0307 	and.w	r3, r3, #7
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00c      	beq.n	80114c4 <pvPortMalloc+0x100>
	__asm volatile
 80114aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ae:	b672      	cpsid	i
 80114b0:	f383 8811 	msr	BASEPRI, r3
 80114b4:	f3bf 8f6f 	isb	sy
 80114b8:	f3bf 8f4f 	dsb	sy
 80114bc:	b662      	cpsie	i
 80114be:	613b      	str	r3, [r7, #16]
}
 80114c0:	bf00      	nop
 80114c2:	e7fe      	b.n	80114c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c6:	685a      	ldr	r2, [r3, #4]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	1ad2      	subs	r2, r2, r3
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80114d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80114d6:	69b8      	ldr	r0, [r7, #24]
 80114d8:	f000 f8fe 	bl	80116d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114dc:	4b1b      	ldr	r3, [pc, #108]	; (801154c <pvPortMalloc+0x188>)
 80114de:	681a      	ldr	r2, [r3, #0]
 80114e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	1ad3      	subs	r3, r2, r3
 80114e6:	4a19      	ldr	r2, [pc, #100]	; (801154c <pvPortMalloc+0x188>)
 80114e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114ea:	4b18      	ldr	r3, [pc, #96]	; (801154c <pvPortMalloc+0x188>)
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	4b19      	ldr	r3, [pc, #100]	; (8011554 <pvPortMalloc+0x190>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d203      	bcs.n	80114fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80114f6:	4b15      	ldr	r3, [pc, #84]	; (801154c <pvPortMalloc+0x188>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4a16      	ldr	r2, [pc, #88]	; (8011554 <pvPortMalloc+0x190>)
 80114fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80114fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011500:	685a      	ldr	r2, [r3, #4]
 8011502:	4b11      	ldr	r3, [pc, #68]	; (8011548 <pvPortMalloc+0x184>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	431a      	orrs	r2, r3
 8011508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150e:	2200      	movs	r2, #0
 8011510:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011512:	f7ff f863 	bl	80105dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	f003 0307 	and.w	r3, r3, #7
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00c      	beq.n	801153a <pvPortMalloc+0x176>
	__asm volatile
 8011520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011524:	b672      	cpsid	i
 8011526:	f383 8811 	msr	BASEPRI, r3
 801152a:	f3bf 8f6f 	isb	sy
 801152e:	f3bf 8f4f 	dsb	sy
 8011532:	b662      	cpsie	i
 8011534:	60fb      	str	r3, [r7, #12]
}
 8011536:	bf00      	nop
 8011538:	e7fe      	b.n	8011538 <pvPortMalloc+0x174>
	return pvReturn;
 801153a:	69fb      	ldr	r3, [r7, #28]
}
 801153c:	4618      	mov	r0, r3
 801153e:	3728      	adds	r7, #40	; 0x28
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	20006b9c 	.word	0x20006b9c
 8011548:	20006ba8 	.word	0x20006ba8
 801154c:	20006ba0 	.word	0x20006ba0
 8011550:	20006b94 	.word	0x20006b94
 8011554:	20006ba4 	.word	0x20006ba4

08011558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b086      	sub	sp, #24
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d04c      	beq.n	8011604 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801156a:	2308      	movs	r3, #8
 801156c:	425b      	negs	r3, r3
 801156e:	697a      	ldr	r2, [r7, #20]
 8011570:	4413      	add	r3, r2
 8011572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	685a      	ldr	r2, [r3, #4]
 801157c:	4b23      	ldr	r3, [pc, #140]	; (801160c <vPortFree+0xb4>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	4013      	ands	r3, r2
 8011582:	2b00      	cmp	r3, #0
 8011584:	d10c      	bne.n	80115a0 <vPortFree+0x48>
	__asm volatile
 8011586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158a:	b672      	cpsid	i
 801158c:	f383 8811 	msr	BASEPRI, r3
 8011590:	f3bf 8f6f 	isb	sy
 8011594:	f3bf 8f4f 	dsb	sy
 8011598:	b662      	cpsie	i
 801159a:	60fb      	str	r3, [r7, #12]
}
 801159c:	bf00      	nop
 801159e:	e7fe      	b.n	801159e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d00c      	beq.n	80115c2 <vPortFree+0x6a>
	__asm volatile
 80115a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ac:	b672      	cpsid	i
 80115ae:	f383 8811 	msr	BASEPRI, r3
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	f3bf 8f4f 	dsb	sy
 80115ba:	b662      	cpsie	i
 80115bc:	60bb      	str	r3, [r7, #8]
}
 80115be:	bf00      	nop
 80115c0:	e7fe      	b.n	80115c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	685a      	ldr	r2, [r3, #4]
 80115c6:	4b11      	ldr	r3, [pc, #68]	; (801160c <vPortFree+0xb4>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4013      	ands	r3, r2
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d019      	beq.n	8011604 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d115      	bne.n	8011604 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	685a      	ldr	r2, [r3, #4]
 80115dc:	4b0b      	ldr	r3, [pc, #44]	; (801160c <vPortFree+0xb4>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	43db      	mvns	r3, r3
 80115e2:	401a      	ands	r2, r3
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80115e8:	f7fe ffea 	bl	80105c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	685a      	ldr	r2, [r3, #4]
 80115f0:	4b07      	ldr	r3, [pc, #28]	; (8011610 <vPortFree+0xb8>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4413      	add	r3, r2
 80115f6:	4a06      	ldr	r2, [pc, #24]	; (8011610 <vPortFree+0xb8>)
 80115f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80115fa:	6938      	ldr	r0, [r7, #16]
 80115fc:	f000 f86c 	bl	80116d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011600:	f7fe ffec 	bl	80105dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011604:	bf00      	nop
 8011606:	3718      	adds	r7, #24
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	20006ba8 	.word	0x20006ba8
 8011610:	20006ba0 	.word	0x20006ba0

08011614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011614:	b480      	push	{r7}
 8011616:	b085      	sub	sp, #20
 8011618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801161a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801161e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011620:	4b27      	ldr	r3, [pc, #156]	; (80116c0 <prvHeapInit+0xac>)
 8011622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f003 0307 	and.w	r3, r3, #7
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00c      	beq.n	8011648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	3307      	adds	r3, #7
 8011632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f023 0307 	bic.w	r3, r3, #7
 801163a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801163c:	68ba      	ldr	r2, [r7, #8]
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	4a1f      	ldr	r2, [pc, #124]	; (80116c0 <prvHeapInit+0xac>)
 8011644:	4413      	add	r3, r2
 8011646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801164c:	4a1d      	ldr	r2, [pc, #116]	; (80116c4 <prvHeapInit+0xb0>)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011652:	4b1c      	ldr	r3, [pc, #112]	; (80116c4 <prvHeapInit+0xb0>)
 8011654:	2200      	movs	r2, #0
 8011656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	68ba      	ldr	r2, [r7, #8]
 801165c:	4413      	add	r3, r2
 801165e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011660:	2208      	movs	r2, #8
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	1a9b      	subs	r3, r3, r2
 8011666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f023 0307 	bic.w	r3, r3, #7
 801166e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	4a15      	ldr	r2, [pc, #84]	; (80116c8 <prvHeapInit+0xb4>)
 8011674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011676:	4b14      	ldr	r3, [pc, #80]	; (80116c8 <prvHeapInit+0xb4>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	2200      	movs	r2, #0
 801167c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801167e:	4b12      	ldr	r3, [pc, #72]	; (80116c8 <prvHeapInit+0xb4>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2200      	movs	r2, #0
 8011684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	68fa      	ldr	r2, [r7, #12]
 801168e:	1ad2      	subs	r2, r2, r3
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011694:	4b0c      	ldr	r3, [pc, #48]	; (80116c8 <prvHeapInit+0xb4>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	4a0a      	ldr	r2, [pc, #40]	; (80116cc <prvHeapInit+0xb8>)
 80116a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	4a09      	ldr	r2, [pc, #36]	; (80116d0 <prvHeapInit+0xbc>)
 80116aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80116ac:	4b09      	ldr	r3, [pc, #36]	; (80116d4 <prvHeapInit+0xc0>)
 80116ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80116b2:	601a      	str	r2, [r3, #0]
}
 80116b4:	bf00      	nop
 80116b6:	3714      	adds	r7, #20
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr
 80116c0:	20002f94 	.word	0x20002f94
 80116c4:	20006b94 	.word	0x20006b94
 80116c8:	20006b9c 	.word	0x20006b9c
 80116cc:	20006ba4 	.word	0x20006ba4
 80116d0:	20006ba0 	.word	0x20006ba0
 80116d4:	20006ba8 	.word	0x20006ba8

080116d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80116d8:	b480      	push	{r7}
 80116da:	b085      	sub	sp, #20
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80116e0:	4b28      	ldr	r3, [pc, #160]	; (8011784 <prvInsertBlockIntoFreeList+0xac>)
 80116e2:	60fb      	str	r3, [r7, #12]
 80116e4:	e002      	b.n	80116ec <prvInsertBlockIntoFreeList+0x14>
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	60fb      	str	r3, [r7, #12]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d8f7      	bhi.n	80116e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	4413      	add	r3, r2
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	429a      	cmp	r2, r3
 8011706:	d108      	bne.n	801171a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	685a      	ldr	r2, [r3, #4]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	441a      	add	r2, r3
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	68ba      	ldr	r2, [r7, #8]
 8011724:	441a      	add	r2, r3
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	429a      	cmp	r2, r3
 801172c:	d118      	bne.n	8011760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	4b15      	ldr	r3, [pc, #84]	; (8011788 <prvInsertBlockIntoFreeList+0xb0>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	429a      	cmp	r2, r3
 8011738:	d00d      	beq.n	8011756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	685a      	ldr	r2, [r3, #4]
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	441a      	add	r2, r3
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	601a      	str	r2, [r3, #0]
 8011754:	e008      	b.n	8011768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011756:	4b0c      	ldr	r3, [pc, #48]	; (8011788 <prvInsertBlockIntoFreeList+0xb0>)
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	601a      	str	r2, [r3, #0]
 801175e:	e003      	b.n	8011768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011768:	68fa      	ldr	r2, [r7, #12]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	429a      	cmp	r2, r3
 801176e:	d002      	beq.n	8011776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	687a      	ldr	r2, [r7, #4]
 8011774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011776:	bf00      	nop
 8011778:	3714      	adds	r7, #20
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	20006b94 	.word	0x20006b94
 8011788:	20006b9c 	.word	0x20006b9c

0801178c <arm_biquad_cascade_df1_init_f32>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	4604      	mov	r4, r0
 8011790:	4608      	mov	r0, r1
 8011792:	461d      	mov	r5, r3
 8011794:	2100      	movs	r1, #0
 8011796:	60a2      	str	r2, [r4, #8]
 8011798:	0102      	lsls	r2, r0, #4
 801179a:	6020      	str	r0, [r4, #0]
 801179c:	4618      	mov	r0, r3
 801179e:	f001 f941 	bl	8012a24 <memset>
 80117a2:	6065      	str	r5, [r4, #4]
 80117a4:	bd38      	pop	{r3, r4, r5, pc}
 80117a6:	bf00      	nop

080117a8 <_ZdaPv>:
 80117a8:	f000 b802 	b.w	80117b0 <_ZdlPv>

080117ac <_Znaj>:
 80117ac:	f000 b802 	b.w	80117b4 <_Znwj>

080117b0 <_ZdlPv>:
 80117b0:	f000 bf66 	b.w	8012680 <free>

080117b4 <_Znwj>:
 80117b4:	2801      	cmp	r0, #1
 80117b6:	bf38      	it	cc
 80117b8:	2001      	movcc	r0, #1
 80117ba:	b510      	push	{r4, lr}
 80117bc:	4604      	mov	r4, r0
 80117be:	4620      	mov	r0, r4
 80117c0:	f000 ff56 	bl	8012670 <malloc>
 80117c4:	b100      	cbz	r0, 80117c8 <_Znwj+0x14>
 80117c6:	bd10      	pop	{r4, pc}
 80117c8:	f000 f806 	bl	80117d8 <_ZSt15get_new_handlerv>
 80117cc:	b908      	cbnz	r0, 80117d2 <_Znwj+0x1e>
 80117ce:	f000 ff47 	bl	8012660 <abort>
 80117d2:	4780      	blx	r0
 80117d4:	e7f3      	b.n	80117be <_Znwj+0xa>
	...

080117d8 <_ZSt15get_new_handlerv>:
 80117d8:	4b02      	ldr	r3, [pc, #8]	; (80117e4 <_ZSt15get_new_handlerv+0xc>)
 80117da:	6818      	ldr	r0, [r3, #0]
 80117dc:	f3bf 8f5b 	dmb	ish
 80117e0:	4770      	bx	lr
 80117e2:	bf00      	nop
 80117e4:	20006bac 	.word	0x20006bac

080117e8 <sin>:
 80117e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117ea:	eeb0 7b40 	vmov.f64	d7, d0
 80117ee:	ee17 3a90 	vmov	r3, s15
 80117f2:	4a21      	ldr	r2, [pc, #132]	; (8011878 <sin+0x90>)
 80117f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117f8:	4293      	cmp	r3, r2
 80117fa:	dc07      	bgt.n	801180c <sin+0x24>
 80117fc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011870 <sin+0x88>
 8011800:	2000      	movs	r0, #0
 8011802:	b005      	add	sp, #20
 8011804:	f85d eb04 	ldr.w	lr, [sp], #4
 8011808:	f000 bcb2 	b.w	8012170 <__kernel_sin>
 801180c:	4a1b      	ldr	r2, [pc, #108]	; (801187c <sin+0x94>)
 801180e:	4293      	cmp	r3, r2
 8011810:	dd04      	ble.n	801181c <sin+0x34>
 8011812:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011816:	b005      	add	sp, #20
 8011818:	f85d fb04 	ldr.w	pc, [sp], #4
 801181c:	4668      	mov	r0, sp
 801181e:	f000 f863 	bl	80118e8 <__ieee754_rem_pio2>
 8011822:	f000 0003 	and.w	r0, r0, #3
 8011826:	2801      	cmp	r0, #1
 8011828:	d00a      	beq.n	8011840 <sin+0x58>
 801182a:	2802      	cmp	r0, #2
 801182c:	d00f      	beq.n	801184e <sin+0x66>
 801182e:	b9c0      	cbnz	r0, 8011862 <sin+0x7a>
 8011830:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011834:	ed9d 0b00 	vldr	d0, [sp]
 8011838:	2001      	movs	r0, #1
 801183a:	f000 fc99 	bl	8012170 <__kernel_sin>
 801183e:	e7ea      	b.n	8011816 <sin+0x2e>
 8011840:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011844:	ed9d 0b00 	vldr	d0, [sp]
 8011848:	f000 fc26 	bl	8012098 <__kernel_cos>
 801184c:	e7e3      	b.n	8011816 <sin+0x2e>
 801184e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011852:	ed9d 0b00 	vldr	d0, [sp]
 8011856:	2001      	movs	r0, #1
 8011858:	f000 fc8a 	bl	8012170 <__kernel_sin>
 801185c:	eeb1 0b40 	vneg.f64	d0, d0
 8011860:	e7d9      	b.n	8011816 <sin+0x2e>
 8011862:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011866:	ed9d 0b00 	vldr	d0, [sp]
 801186a:	f000 fc15 	bl	8012098 <__kernel_cos>
 801186e:	e7f5      	b.n	801185c <sin+0x74>
	...
 8011878:	3fe921fb 	.word	0x3fe921fb
 801187c:	7fefffff 	.word	0x7fefffff

08011880 <tan>:
 8011880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011882:	eeb0 7b40 	vmov.f64	d7, d0
 8011886:	ee17 3a90 	vmov	r3, s15
 801188a:	4a15      	ldr	r2, [pc, #84]	; (80118e0 <tan+0x60>)
 801188c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011890:	4293      	cmp	r3, r2
 8011892:	dc07      	bgt.n	80118a4 <tan+0x24>
 8011894:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80118d8 <tan+0x58>
 8011898:	2001      	movs	r0, #1
 801189a:	b005      	add	sp, #20
 801189c:	f85d eb04 	ldr.w	lr, [sp], #4
 80118a0:	f000 bcbe 	b.w	8012220 <__kernel_tan>
 80118a4:	4a0f      	ldr	r2, [pc, #60]	; (80118e4 <tan+0x64>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	dd04      	ble.n	80118b4 <tan+0x34>
 80118aa:	ee30 0b40 	vsub.f64	d0, d0, d0
 80118ae:	b005      	add	sp, #20
 80118b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80118b4:	4668      	mov	r0, sp
 80118b6:	f000 f817 	bl	80118e8 <__ieee754_rem_pio2>
 80118ba:	0040      	lsls	r0, r0, #1
 80118bc:	f000 0002 	and.w	r0, r0, #2
 80118c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118c4:	ed9d 0b00 	vldr	d0, [sp]
 80118c8:	f1c0 0001 	rsb	r0, r0, #1
 80118cc:	f000 fca8 	bl	8012220 <__kernel_tan>
 80118d0:	e7ed      	b.n	80118ae <tan+0x2e>
 80118d2:	bf00      	nop
 80118d4:	f3af 8000 	nop.w
	...
 80118e0:	3fe921fb 	.word	0x3fe921fb
 80118e4:	7fefffff 	.word	0x7fefffff

080118e8 <__ieee754_rem_pio2>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	eeb0 7b40 	vmov.f64	d7, d0
 80118ee:	ee17 5a90 	vmov	r5, s15
 80118f2:	4b99      	ldr	r3, [pc, #612]	; (8011b58 <__ieee754_rem_pio2+0x270>)
 80118f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80118f8:	429e      	cmp	r6, r3
 80118fa:	b088      	sub	sp, #32
 80118fc:	4604      	mov	r4, r0
 80118fe:	dc07      	bgt.n	8011910 <__ieee754_rem_pio2+0x28>
 8011900:	2200      	movs	r2, #0
 8011902:	2300      	movs	r3, #0
 8011904:	ed84 0b00 	vstr	d0, [r4]
 8011908:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801190c:	2000      	movs	r0, #0
 801190e:	e01b      	b.n	8011948 <__ieee754_rem_pio2+0x60>
 8011910:	4b92      	ldr	r3, [pc, #584]	; (8011b5c <__ieee754_rem_pio2+0x274>)
 8011912:	429e      	cmp	r6, r3
 8011914:	dc3b      	bgt.n	801198e <__ieee754_rem_pio2+0xa6>
 8011916:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801191a:	2d00      	cmp	r5, #0
 801191c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011b18 <__ieee754_rem_pio2+0x230>
 8011920:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011924:	dd19      	ble.n	801195a <__ieee754_rem_pio2+0x72>
 8011926:	ee30 7b46 	vsub.f64	d7, d0, d6
 801192a:	429e      	cmp	r6, r3
 801192c:	d00e      	beq.n	801194c <__ieee754_rem_pio2+0x64>
 801192e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011b20 <__ieee754_rem_pio2+0x238>
 8011932:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011936:	ee37 7b45 	vsub.f64	d7, d7, d5
 801193a:	ed84 5b00 	vstr	d5, [r4]
 801193e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011942:	ed84 7b02 	vstr	d7, [r4, #8]
 8011946:	2001      	movs	r0, #1
 8011948:	b008      	add	sp, #32
 801194a:	bd70      	pop	{r4, r5, r6, pc}
 801194c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011b28 <__ieee754_rem_pio2+0x240>
 8011950:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011954:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011b30 <__ieee754_rem_pio2+0x248>
 8011958:	e7eb      	b.n	8011932 <__ieee754_rem_pio2+0x4a>
 801195a:	429e      	cmp	r6, r3
 801195c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011960:	d00e      	beq.n	8011980 <__ieee754_rem_pio2+0x98>
 8011962:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011b20 <__ieee754_rem_pio2+0x238>
 8011966:	ee37 5b06 	vadd.f64	d5, d7, d6
 801196a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801196e:	ed84 5b00 	vstr	d5, [r4]
 8011972:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801197a:	ed84 7b02 	vstr	d7, [r4, #8]
 801197e:	e7e3      	b.n	8011948 <__ieee754_rem_pio2+0x60>
 8011980:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011b28 <__ieee754_rem_pio2+0x240>
 8011984:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011988:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011b30 <__ieee754_rem_pio2+0x248>
 801198c:	e7eb      	b.n	8011966 <__ieee754_rem_pio2+0x7e>
 801198e:	4b74      	ldr	r3, [pc, #464]	; (8011b60 <__ieee754_rem_pio2+0x278>)
 8011990:	429e      	cmp	r6, r3
 8011992:	dc70      	bgt.n	8011a76 <__ieee754_rem_pio2+0x18e>
 8011994:	f000 fd60 	bl	8012458 <fabs>
 8011998:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801199c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011b38 <__ieee754_rem_pio2+0x250>
 80119a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80119a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80119a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80119ac:	ee17 0a90 	vmov	r0, s15
 80119b0:	eeb1 4b45 	vneg.f64	d4, d5
 80119b4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011b18 <__ieee754_rem_pio2+0x230>
 80119b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80119bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011b20 <__ieee754_rem_pio2+0x238>
 80119c0:	281f      	cmp	r0, #31
 80119c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80119c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80119ca:	dc08      	bgt.n	80119de <__ieee754_rem_pio2+0xf6>
 80119cc:	4b65      	ldr	r3, [pc, #404]	; (8011b64 <__ieee754_rem_pio2+0x27c>)
 80119ce:	1e42      	subs	r2, r0, #1
 80119d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119d4:	42b3      	cmp	r3, r6
 80119d6:	d002      	beq.n	80119de <__ieee754_rem_pio2+0xf6>
 80119d8:	ed84 6b00 	vstr	d6, [r4]
 80119dc:	e024      	b.n	8011a28 <__ieee754_rem_pio2+0x140>
 80119de:	ee16 3a90 	vmov	r3, s13
 80119e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80119e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80119ea:	2b10      	cmp	r3, #16
 80119ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 80119f0:	ddf2      	ble.n	80119d8 <__ieee754_rem_pio2+0xf0>
 80119f2:	eeb0 6b40 	vmov.f64	d6, d0
 80119f6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8011b28 <__ieee754_rem_pio2+0x240>
 80119fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80119fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011a02:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011a06:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011b30 <__ieee754_rem_pio2+0x248>
 8011a0a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011a0e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011a12:	ee13 3a90 	vmov	r3, s7
 8011a16:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	2b31      	cmp	r3, #49	; 0x31
 8011a1e:	dc17      	bgt.n	8011a50 <__ieee754_rem_pio2+0x168>
 8011a20:	eeb0 0b46 	vmov.f64	d0, d6
 8011a24:	ed84 3b00 	vstr	d3, [r4]
 8011a28:	ed94 6b00 	vldr	d6, [r4]
 8011a2c:	2d00      	cmp	r5, #0
 8011a2e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011a32:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011a36:	ed84 0b02 	vstr	d0, [r4, #8]
 8011a3a:	da85      	bge.n	8011948 <__ieee754_rem_pio2+0x60>
 8011a3c:	eeb1 6b46 	vneg.f64	d6, d6
 8011a40:	eeb1 0b40 	vneg.f64	d0, d0
 8011a44:	ed84 6b00 	vstr	d6, [r4]
 8011a48:	ed84 0b02 	vstr	d0, [r4, #8]
 8011a4c:	4240      	negs	r0, r0
 8011a4e:	e77b      	b.n	8011948 <__ieee754_rem_pio2+0x60>
 8011a50:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8011b40 <__ieee754_rem_pio2+0x258>
 8011a54:	eeb0 0b46 	vmov.f64	d0, d6
 8011a58:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011a5c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8011a60:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011a64:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8011b48 <__ieee754_rem_pio2+0x260>
 8011a68:	eeb0 7b46 	vmov.f64	d7, d6
 8011a6c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8011a70:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011a74:	e7b0      	b.n	80119d8 <__ieee754_rem_pio2+0xf0>
 8011a76:	4b3c      	ldr	r3, [pc, #240]	; (8011b68 <__ieee754_rem_pio2+0x280>)
 8011a78:	429e      	cmp	r6, r3
 8011a7a:	dd06      	ble.n	8011a8a <__ieee754_rem_pio2+0x1a2>
 8011a7c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011a80:	ed80 7b02 	vstr	d7, [r0, #8]
 8011a84:	ed80 7b00 	vstr	d7, [r0]
 8011a88:	e740      	b.n	801190c <__ieee754_rem_pio2+0x24>
 8011a8a:	1532      	asrs	r2, r6, #20
 8011a8c:	ee10 0a10 	vmov	r0, s0
 8011a90:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011a94:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011a98:	ec41 0b17 	vmov	d7, r0, r1
 8011a9c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011aa0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011b50 <__ieee754_rem_pio2+0x268>
 8011aa4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011aa8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011aac:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011ab0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011ab4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011ab8:	a808      	add	r0, sp, #32
 8011aba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011abe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011ac2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011ac6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011aca:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011ace:	2103      	movs	r1, #3
 8011ad0:	ed30 7b02 	vldmdb	r0!, {d7}
 8011ad4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011adc:	460b      	mov	r3, r1
 8011ade:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8011ae2:	d0f5      	beq.n	8011ad0 <__ieee754_rem_pio2+0x1e8>
 8011ae4:	4921      	ldr	r1, [pc, #132]	; (8011b6c <__ieee754_rem_pio2+0x284>)
 8011ae6:	9101      	str	r1, [sp, #4]
 8011ae8:	2102      	movs	r1, #2
 8011aea:	9100      	str	r1, [sp, #0]
 8011aec:	a802      	add	r0, sp, #8
 8011aee:	4621      	mov	r1, r4
 8011af0:	f000 f83e 	bl	8011b70 <__kernel_rem_pio2>
 8011af4:	2d00      	cmp	r5, #0
 8011af6:	f6bf af27 	bge.w	8011948 <__ieee754_rem_pio2+0x60>
 8011afa:	ed94 7b00 	vldr	d7, [r4]
 8011afe:	eeb1 7b47 	vneg.f64	d7, d7
 8011b02:	ed84 7b00 	vstr	d7, [r4]
 8011b06:	ed94 7b02 	vldr	d7, [r4, #8]
 8011b0a:	eeb1 7b47 	vneg.f64	d7, d7
 8011b0e:	ed84 7b02 	vstr	d7, [r4, #8]
 8011b12:	e79b      	b.n	8011a4c <__ieee754_rem_pio2+0x164>
 8011b14:	f3af 8000 	nop.w
 8011b18:	54400000 	.word	0x54400000
 8011b1c:	3ff921fb 	.word	0x3ff921fb
 8011b20:	1a626331 	.word	0x1a626331
 8011b24:	3dd0b461 	.word	0x3dd0b461
 8011b28:	1a600000 	.word	0x1a600000
 8011b2c:	3dd0b461 	.word	0x3dd0b461
 8011b30:	2e037073 	.word	0x2e037073
 8011b34:	3ba3198a 	.word	0x3ba3198a
 8011b38:	6dc9c883 	.word	0x6dc9c883
 8011b3c:	3fe45f30 	.word	0x3fe45f30
 8011b40:	2e000000 	.word	0x2e000000
 8011b44:	3ba3198a 	.word	0x3ba3198a
 8011b48:	252049c1 	.word	0x252049c1
 8011b4c:	397b839a 	.word	0x397b839a
 8011b50:	00000000 	.word	0x00000000
 8011b54:	41700000 	.word	0x41700000
 8011b58:	3fe921fb 	.word	0x3fe921fb
 8011b5c:	4002d97b 	.word	0x4002d97b
 8011b60:	413921fb 	.word	0x413921fb
 8011b64:	0801540c 	.word	0x0801540c
 8011b68:	7fefffff 	.word	0x7fefffff
 8011b6c:	0801548c 	.word	0x0801548c

08011b70 <__kernel_rem_pio2>:
 8011b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b74:	ed2d 8b06 	vpush	{d8-d10}
 8011b78:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011b7c:	460f      	mov	r7, r1
 8011b7e:	9002      	str	r0, [sp, #8]
 8011b80:	49c3      	ldr	r1, [pc, #780]	; (8011e90 <__kernel_rem_pio2+0x320>)
 8011b82:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011b8a:	9901      	ldr	r1, [sp, #4]
 8011b8c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8011b8e:	f112 0f14 	cmn.w	r2, #20
 8011b92:	bfa8      	it	ge
 8011b94:	1ed0      	subge	r0, r2, #3
 8011b96:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8011b9a:	bfaa      	itet	ge
 8011b9c:	2418      	movge	r4, #24
 8011b9e:	2000      	movlt	r0, #0
 8011ba0:	fb90 f0f4 	sdivge	r0, r0, r4
 8011ba4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8011e78 <__kernel_rem_pio2+0x308>
 8011ba8:	f06f 0417 	mvn.w	r4, #23
 8011bac:	fb00 4404 	mla	r4, r0, r4, r4
 8011bb0:	eba0 060a 	sub.w	r6, r0, sl
 8011bb4:	4414      	add	r4, r2
 8011bb6:	eb09 0c0a 	add.w	ip, r9, sl
 8011bba:	ad1a      	add	r5, sp, #104	; 0x68
 8011bbc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	4562      	cmp	r2, ip
 8011bc4:	dd10      	ble.n	8011be8 <__kernel_rem_pio2+0x78>
 8011bc6:	9a01      	ldr	r2, [sp, #4]
 8011bc8:	a91a      	add	r1, sp, #104	; 0x68
 8011bca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011bce:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8011bd2:	f04f 0c00 	mov.w	ip, #0
 8011bd6:	45cc      	cmp	ip, r9
 8011bd8:	dc26      	bgt.n	8011c28 <__kernel_rem_pio2+0xb8>
 8011bda:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8011e78 <__kernel_rem_pio2+0x308>
 8011bde:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011be2:	4616      	mov	r6, r2
 8011be4:	2500      	movs	r5, #0
 8011be6:	e015      	b.n	8011c14 <__kernel_rem_pio2+0xa4>
 8011be8:	42d6      	cmn	r6, r2
 8011bea:	d409      	bmi.n	8011c00 <__kernel_rem_pio2+0x90>
 8011bec:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8011bf0:	ee07 1a90 	vmov	s15, r1
 8011bf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011bf8:	eca5 7b02 	vstmia	r5!, {d7}
 8011bfc:	3201      	adds	r2, #1
 8011bfe:	e7e0      	b.n	8011bc2 <__kernel_rem_pio2+0x52>
 8011c00:	eeb0 7b46 	vmov.f64	d7, d6
 8011c04:	e7f8      	b.n	8011bf8 <__kernel_rem_pio2+0x88>
 8011c06:	ecbe 5b02 	vldmia	lr!, {d5}
 8011c0a:	ed96 6b00 	vldr	d6, [r6]
 8011c0e:	3501      	adds	r5, #1
 8011c10:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011c14:	4555      	cmp	r5, sl
 8011c16:	f1a6 0608 	sub.w	r6, r6, #8
 8011c1a:	ddf4      	ble.n	8011c06 <__kernel_rem_pio2+0x96>
 8011c1c:	eca8 7b02 	vstmia	r8!, {d7}
 8011c20:	f10c 0c01 	add.w	ip, ip, #1
 8011c24:	3208      	adds	r2, #8
 8011c26:	e7d6      	b.n	8011bd6 <__kernel_rem_pio2+0x66>
 8011c28:	aa06      	add	r2, sp, #24
 8011c2a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8011e80 <__kernel_rem_pio2+0x310>
 8011c2e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011e88 <__kernel_rem_pio2+0x318>
 8011c32:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8011c36:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8011c3a:	9204      	str	r2, [sp, #16]
 8011c3c:	9303      	str	r3, [sp, #12]
 8011c3e:	464d      	mov	r5, r9
 8011c40:	00eb      	lsls	r3, r5, #3
 8011c42:	9305      	str	r3, [sp, #20]
 8011c44:	ab92      	add	r3, sp, #584	; 0x248
 8011c46:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011c4a:	f10d 0b18 	add.w	fp, sp, #24
 8011c4e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011c50:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011c54:	465e      	mov	r6, fp
 8011c56:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	f1a2 0208 	sub.w	r2, r2, #8
 8011c62:	dc48      	bgt.n	8011cf6 <__kernel_rem_pio2+0x186>
 8011c64:	4620      	mov	r0, r4
 8011c66:	f000 fc03 	bl	8012470 <scalbn>
 8011c6a:	eeb0 8b40 	vmov.f64	d8, d0
 8011c6e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011c72:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011c76:	f000 fc7b 	bl	8012570 <floor>
 8011c7a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011c7e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011c82:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011c86:	2c00      	cmp	r4, #0
 8011c88:	ee17 8a90 	vmov	r8, s15
 8011c8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011c90:	ee38 8b47 	vsub.f64	d8, d8, d7
 8011c94:	dd41      	ble.n	8011d1a <__kernel_rem_pio2+0x1aa>
 8011c96:	1e68      	subs	r0, r5, #1
 8011c98:	ab06      	add	r3, sp, #24
 8011c9a:	f1c4 0c18 	rsb	ip, r4, #24
 8011c9e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011ca2:	fa46 f20c 	asr.w	r2, r6, ip
 8011ca6:	4490      	add	r8, r2
 8011ca8:	fa02 f20c 	lsl.w	r2, r2, ip
 8011cac:	1ab6      	subs	r6, r6, r2
 8011cae:	f1c4 0217 	rsb	r2, r4, #23
 8011cb2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011cb6:	4116      	asrs	r6, r2
 8011cb8:	2e00      	cmp	r6, #0
 8011cba:	dd3d      	ble.n	8011d38 <__kernel_rem_pio2+0x1c8>
 8011cbc:	f04f 0c00 	mov.w	ip, #0
 8011cc0:	f108 0801 	add.w	r8, r8, #1
 8011cc4:	4660      	mov	r0, ip
 8011cc6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011cca:	4565      	cmp	r5, ip
 8011ccc:	dc6a      	bgt.n	8011da4 <__kernel_rem_pio2+0x234>
 8011cce:	2c00      	cmp	r4, #0
 8011cd0:	dd04      	ble.n	8011cdc <__kernel_rem_pio2+0x16c>
 8011cd2:	2c01      	cmp	r4, #1
 8011cd4:	d07b      	beq.n	8011dce <__kernel_rem_pio2+0x25e>
 8011cd6:	2c02      	cmp	r4, #2
 8011cd8:	f000 8083 	beq.w	8011de2 <__kernel_rem_pio2+0x272>
 8011cdc:	2e02      	cmp	r6, #2
 8011cde:	d12b      	bne.n	8011d38 <__kernel_rem_pio2+0x1c8>
 8011ce0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011ce4:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011ce8:	b330      	cbz	r0, 8011d38 <__kernel_rem_pio2+0x1c8>
 8011cea:	4620      	mov	r0, r4
 8011cec:	f000 fbc0 	bl	8012470 <scalbn>
 8011cf0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011cf4:	e020      	b.n	8011d38 <__kernel_rem_pio2+0x1c8>
 8011cf6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011cfa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011cfe:	3801      	subs	r0, #1
 8011d00:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011d04:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011d08:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011d0c:	eca6 0a01 	vstmia	r6!, {s0}
 8011d10:	ed92 0b00 	vldr	d0, [r2]
 8011d14:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011d18:	e7a0      	b.n	8011c5c <__kernel_rem_pio2+0xec>
 8011d1a:	d105      	bne.n	8011d28 <__kernel_rem_pio2+0x1b8>
 8011d1c:	1e6a      	subs	r2, r5, #1
 8011d1e:	ab06      	add	r3, sp, #24
 8011d20:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011d24:	15f6      	asrs	r6, r6, #23
 8011d26:	e7c7      	b.n	8011cb8 <__kernel_rem_pio2+0x148>
 8011d28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011d2c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d34:	da34      	bge.n	8011da0 <__kernel_rem_pio2+0x230>
 8011d36:	2600      	movs	r6, #0
 8011d38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d40:	f040 80aa 	bne.w	8011e98 <__kernel_rem_pio2+0x328>
 8011d44:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011d48:	4658      	mov	r0, fp
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	4548      	cmp	r0, r9
 8011d4e:	da50      	bge.n	8011df2 <__kernel_rem_pio2+0x282>
 8011d50:	2a00      	cmp	r2, #0
 8011d52:	d06b      	beq.n	8011e2c <__kernel_rem_pio2+0x2bc>
 8011d54:	ab06      	add	r3, sp, #24
 8011d56:	3c18      	subs	r4, #24
 8011d58:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	f000 8087 	beq.w	8011e70 <__kernel_rem_pio2+0x300>
 8011d62:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011d66:	4620      	mov	r0, r4
 8011d68:	f000 fb82 	bl	8012470 <scalbn>
 8011d6c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8011e80 <__kernel_rem_pio2+0x310>
 8011d70:	f10b 0201 	add.w	r2, fp, #1
 8011d74:	a96a      	add	r1, sp, #424	; 0x1a8
 8011d76:	00d3      	lsls	r3, r2, #3
 8011d78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011d7c:	465a      	mov	r2, fp
 8011d7e:	2a00      	cmp	r2, #0
 8011d80:	f280 80b8 	bge.w	8011ef4 <__kernel_rem_pio2+0x384>
 8011d84:	465a      	mov	r2, fp
 8011d86:	2a00      	cmp	r2, #0
 8011d88:	f2c0 80d6 	blt.w	8011f38 <__kernel_rem_pio2+0x3c8>
 8011d8c:	a96a      	add	r1, sp, #424	; 0x1a8
 8011d8e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8011d92:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8011e78 <__kernel_rem_pio2+0x308>
 8011d96:	4d3f      	ldr	r5, [pc, #252]	; (8011e94 <__kernel_rem_pio2+0x324>)
 8011d98:	2000      	movs	r0, #0
 8011d9a:	ebab 0102 	sub.w	r1, fp, r2
 8011d9e:	e0c0      	b.n	8011f22 <__kernel_rem_pio2+0x3b2>
 8011da0:	2602      	movs	r6, #2
 8011da2:	e78b      	b.n	8011cbc <__kernel_rem_pio2+0x14c>
 8011da4:	f8db 2000 	ldr.w	r2, [fp]
 8011da8:	b958      	cbnz	r0, 8011dc2 <__kernel_rem_pio2+0x252>
 8011daa:	b122      	cbz	r2, 8011db6 <__kernel_rem_pio2+0x246>
 8011dac:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011db0:	f8cb 2000 	str.w	r2, [fp]
 8011db4:	2201      	movs	r2, #1
 8011db6:	f10c 0c01 	add.w	ip, ip, #1
 8011dba:	f10b 0b04 	add.w	fp, fp, #4
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	e783      	b.n	8011cca <__kernel_rem_pio2+0x15a>
 8011dc2:	ebae 0202 	sub.w	r2, lr, r2
 8011dc6:	f8cb 2000 	str.w	r2, [fp]
 8011dca:	4602      	mov	r2, r0
 8011dcc:	e7f3      	b.n	8011db6 <__kernel_rem_pio2+0x246>
 8011dce:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011dd2:	ab06      	add	r3, sp, #24
 8011dd4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011dd8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011ddc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011de0:	e77c      	b.n	8011cdc <__kernel_rem_pio2+0x16c>
 8011de2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011de6:	ab06      	add	r3, sp, #24
 8011de8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011dec:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011df0:	e7f4      	b.n	8011ddc <__kernel_rem_pio2+0x26c>
 8011df2:	ab06      	add	r3, sp, #24
 8011df4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011df8:	3801      	subs	r0, #1
 8011dfa:	431a      	orrs	r2, r3
 8011dfc:	e7a6      	b.n	8011d4c <__kernel_rem_pio2+0x1dc>
 8011dfe:	3201      	adds	r2, #1
 8011e00:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011e04:	2e00      	cmp	r6, #0
 8011e06:	d0fa      	beq.n	8011dfe <__kernel_rem_pio2+0x28e>
 8011e08:	9b05      	ldr	r3, [sp, #20]
 8011e0a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011e0e:	eb0d 0003 	add.w	r0, sp, r3
 8011e12:	9b01      	ldr	r3, [sp, #4]
 8011e14:	18ee      	adds	r6, r5, r3
 8011e16:	ab1a      	add	r3, sp, #104	; 0x68
 8011e18:	f105 0c01 	add.w	ip, r5, #1
 8011e1c:	3898      	subs	r0, #152	; 0x98
 8011e1e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011e22:	442a      	add	r2, r5
 8011e24:	4562      	cmp	r2, ip
 8011e26:	da04      	bge.n	8011e32 <__kernel_rem_pio2+0x2c2>
 8011e28:	4615      	mov	r5, r2
 8011e2a:	e709      	b.n	8011c40 <__kernel_rem_pio2+0xd0>
 8011e2c:	9804      	ldr	r0, [sp, #16]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	e7e6      	b.n	8011e00 <__kernel_rem_pio2+0x290>
 8011e32:	9b03      	ldr	r3, [sp, #12]
 8011e34:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011e38:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8011e3c:	9305      	str	r3, [sp, #20]
 8011e3e:	ee07 3a90 	vmov	s15, r3
 8011e42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011e46:	2500      	movs	r5, #0
 8011e48:	eca6 7b02 	vstmia	r6!, {d7}
 8011e4c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8011e78 <__kernel_rem_pio2+0x308>
 8011e50:	46b0      	mov	r8, r6
 8011e52:	4555      	cmp	r5, sl
 8011e54:	dd04      	ble.n	8011e60 <__kernel_rem_pio2+0x2f0>
 8011e56:	eca0 7b02 	vstmia	r0!, {d7}
 8011e5a:	f10c 0c01 	add.w	ip, ip, #1
 8011e5e:	e7e1      	b.n	8011e24 <__kernel_rem_pio2+0x2b4>
 8011e60:	ecbe 5b02 	vldmia	lr!, {d5}
 8011e64:	ed38 6b02 	vldmdb	r8!, {d6}
 8011e68:	3501      	adds	r5, #1
 8011e6a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011e6e:	e7f0      	b.n	8011e52 <__kernel_rem_pio2+0x2e2>
 8011e70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011e74:	e76e      	b.n	8011d54 <__kernel_rem_pio2+0x1e4>
 8011e76:	bf00      	nop
	...
 8011e84:	3e700000 	.word	0x3e700000
 8011e88:	00000000 	.word	0x00000000
 8011e8c:	41700000 	.word	0x41700000
 8011e90:	080155d8 	.word	0x080155d8
 8011e94:	08015598 	.word	0x08015598
 8011e98:	4260      	negs	r0, r4
 8011e9a:	eeb0 0b48 	vmov.f64	d0, d8
 8011e9e:	f000 fae7 	bl	8012470 <scalbn>
 8011ea2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012080 <__kernel_rem_pio2+0x510>
 8011ea6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eae:	db18      	blt.n	8011ee2 <__kernel_rem_pio2+0x372>
 8011eb0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012088 <__kernel_rem_pio2+0x518>
 8011eb4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011eb8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011ebc:	aa06      	add	r2, sp, #24
 8011ebe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011ec2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011ec6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011eca:	f105 0b01 	add.w	fp, r5, #1
 8011ece:	ee10 3a10 	vmov	r3, s0
 8011ed2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011ed6:	ee17 3a10 	vmov	r3, s14
 8011eda:	3418      	adds	r4, #24
 8011edc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011ee0:	e73f      	b.n	8011d62 <__kernel_rem_pio2+0x1f2>
 8011ee2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011ee6:	aa06      	add	r2, sp, #24
 8011ee8:	ee10 3a10 	vmov	r3, s0
 8011eec:	46ab      	mov	fp, r5
 8011eee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011ef2:	e736      	b.n	8011d62 <__kernel_rem_pio2+0x1f2>
 8011ef4:	a806      	add	r0, sp, #24
 8011ef6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011efa:	9001      	str	r0, [sp, #4]
 8011efc:	ee07 0a90 	vmov	s15, r0
 8011f00:	3a01      	subs	r2, #1
 8011f02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011f06:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011f0a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011f0e:	ed21 7b02 	vstmdb	r1!, {d7}
 8011f12:	e734      	b.n	8011d7e <__kernel_rem_pio2+0x20e>
 8011f14:	ecb5 5b02 	vldmia	r5!, {d5}
 8011f18:	ecb4 6b02 	vldmia	r4!, {d6}
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011f22:	4548      	cmp	r0, r9
 8011f24:	dc01      	bgt.n	8011f2a <__kernel_rem_pio2+0x3ba>
 8011f26:	4288      	cmp	r0, r1
 8011f28:	ddf4      	ble.n	8011f14 <__kernel_rem_pio2+0x3a4>
 8011f2a:	a842      	add	r0, sp, #264	; 0x108
 8011f2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011f30:	ed81 7b00 	vstr	d7, [r1]
 8011f34:	3a01      	subs	r2, #1
 8011f36:	e726      	b.n	8011d86 <__kernel_rem_pio2+0x216>
 8011f38:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011f3a:	2a02      	cmp	r2, #2
 8011f3c:	dc0a      	bgt.n	8011f54 <__kernel_rem_pio2+0x3e4>
 8011f3e:	2a00      	cmp	r2, #0
 8011f40:	dc2e      	bgt.n	8011fa0 <__kernel_rem_pio2+0x430>
 8011f42:	d047      	beq.n	8011fd4 <__kernel_rem_pio2+0x464>
 8011f44:	f008 0007 	and.w	r0, r8, #7
 8011f48:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011f4c:	ecbd 8b06 	vpop	{d8-d10}
 8011f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f54:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011f56:	2a03      	cmp	r2, #3
 8011f58:	d1f4      	bne.n	8011f44 <__kernel_rem_pio2+0x3d4>
 8011f5a:	a942      	add	r1, sp, #264	; 0x108
 8011f5c:	f1a3 0208 	sub.w	r2, r3, #8
 8011f60:	440a      	add	r2, r1
 8011f62:	4611      	mov	r1, r2
 8011f64:	4658      	mov	r0, fp
 8011f66:	2800      	cmp	r0, #0
 8011f68:	f1a1 0108 	sub.w	r1, r1, #8
 8011f6c:	dc55      	bgt.n	801201a <__kernel_rem_pio2+0x4aa>
 8011f6e:	4659      	mov	r1, fp
 8011f70:	2901      	cmp	r1, #1
 8011f72:	f1a2 0208 	sub.w	r2, r2, #8
 8011f76:	dc60      	bgt.n	801203a <__kernel_rem_pio2+0x4ca>
 8011f78:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8012090 <__kernel_rem_pio2+0x520>
 8011f7c:	aa42      	add	r2, sp, #264	; 0x108
 8011f7e:	4413      	add	r3, r2
 8011f80:	f1bb 0f01 	cmp.w	fp, #1
 8011f84:	dc69      	bgt.n	801205a <__kernel_rem_pio2+0x4ea>
 8011f86:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011f8a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011f8e:	2e00      	cmp	r6, #0
 8011f90:	d16a      	bne.n	8012068 <__kernel_rem_pio2+0x4f8>
 8011f92:	ed87 5b00 	vstr	d5, [r7]
 8011f96:	ed87 6b02 	vstr	d6, [r7, #8]
 8011f9a:	ed87 7b04 	vstr	d7, [r7, #16]
 8011f9e:	e7d1      	b.n	8011f44 <__kernel_rem_pio2+0x3d4>
 8011fa0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012090 <__kernel_rem_pio2+0x520>
 8011fa4:	aa42      	add	r2, sp, #264	; 0x108
 8011fa6:	4413      	add	r3, r2
 8011fa8:	465a      	mov	r2, fp
 8011faa:	2a00      	cmp	r2, #0
 8011fac:	da26      	bge.n	8011ffc <__kernel_rem_pio2+0x48c>
 8011fae:	b35e      	cbz	r6, 8012008 <__kernel_rem_pio2+0x498>
 8011fb0:	eeb1 7b46 	vneg.f64	d7, d6
 8011fb4:	ed87 7b00 	vstr	d7, [r7]
 8011fb8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011fbc:	aa44      	add	r2, sp, #272	; 0x110
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011fc4:	459b      	cmp	fp, r3
 8011fc6:	da22      	bge.n	801200e <__kernel_rem_pio2+0x49e>
 8011fc8:	b10e      	cbz	r6, 8011fce <__kernel_rem_pio2+0x45e>
 8011fca:	eeb1 7b47 	vneg.f64	d7, d7
 8011fce:	ed87 7b02 	vstr	d7, [r7, #8]
 8011fd2:	e7b7      	b.n	8011f44 <__kernel_rem_pio2+0x3d4>
 8011fd4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012090 <__kernel_rem_pio2+0x520>
 8011fd8:	aa42      	add	r2, sp, #264	; 0x108
 8011fda:	4413      	add	r3, r2
 8011fdc:	f1bb 0f00 	cmp.w	fp, #0
 8011fe0:	da05      	bge.n	8011fee <__kernel_rem_pio2+0x47e>
 8011fe2:	b10e      	cbz	r6, 8011fe8 <__kernel_rem_pio2+0x478>
 8011fe4:	eeb1 7b47 	vneg.f64	d7, d7
 8011fe8:	ed87 7b00 	vstr	d7, [r7]
 8011fec:	e7aa      	b.n	8011f44 <__kernel_rem_pio2+0x3d4>
 8011fee:	ed33 6b02 	vldmdb	r3!, {d6}
 8011ff2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011ff6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011ffa:	e7ef      	b.n	8011fdc <__kernel_rem_pio2+0x46c>
 8011ffc:	ed33 7b02 	vldmdb	r3!, {d7}
 8012000:	3a01      	subs	r2, #1
 8012002:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012006:	e7d0      	b.n	8011faa <__kernel_rem_pio2+0x43a>
 8012008:	eeb0 7b46 	vmov.f64	d7, d6
 801200c:	e7d2      	b.n	8011fb4 <__kernel_rem_pio2+0x444>
 801200e:	ecb2 6b02 	vldmia	r2!, {d6}
 8012012:	3301      	adds	r3, #1
 8012014:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012018:	e7d4      	b.n	8011fc4 <__kernel_rem_pio2+0x454>
 801201a:	ed91 7b00 	vldr	d7, [r1]
 801201e:	ed91 5b02 	vldr	d5, [r1, #8]
 8012022:	3801      	subs	r0, #1
 8012024:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012028:	ee37 7b46 	vsub.f64	d7, d7, d6
 801202c:	ed81 6b00 	vstr	d6, [r1]
 8012030:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012034:	ed81 7b02 	vstr	d7, [r1, #8]
 8012038:	e795      	b.n	8011f66 <__kernel_rem_pio2+0x3f6>
 801203a:	ed92 7b00 	vldr	d7, [r2]
 801203e:	ed92 5b02 	vldr	d5, [r2, #8]
 8012042:	3901      	subs	r1, #1
 8012044:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012048:	ee37 7b46 	vsub.f64	d7, d7, d6
 801204c:	ed82 6b00 	vstr	d6, [r2]
 8012050:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012054:	ed82 7b02 	vstr	d7, [r2, #8]
 8012058:	e78a      	b.n	8011f70 <__kernel_rem_pio2+0x400>
 801205a:	ed33 6b02 	vldmdb	r3!, {d6}
 801205e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012062:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012066:	e78b      	b.n	8011f80 <__kernel_rem_pio2+0x410>
 8012068:	eeb1 5b45 	vneg.f64	d5, d5
 801206c:	eeb1 6b46 	vneg.f64	d6, d6
 8012070:	ed87 5b00 	vstr	d5, [r7]
 8012074:	eeb1 7b47 	vneg.f64	d7, d7
 8012078:	ed87 6b02 	vstr	d6, [r7, #8]
 801207c:	e78d      	b.n	8011f9a <__kernel_rem_pio2+0x42a>
 801207e:	bf00      	nop
 8012080:	00000000 	.word	0x00000000
 8012084:	41700000 	.word	0x41700000
 8012088:	00000000 	.word	0x00000000
 801208c:	3e700000 	.word	0x3e700000
	...

08012098 <__kernel_cos>:
 8012098:	ee10 1a90 	vmov	r1, s1
 801209c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80120a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80120a4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80120a8:	da05      	bge.n	80120b6 <__kernel_cos+0x1e>
 80120aa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80120ae:	ee17 3a90 	vmov	r3, s15
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d03d      	beq.n	8012132 <__kernel_cos+0x9a>
 80120b6:	ee20 5b00 	vmul.f64	d5, d0, d0
 80120ba:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80120be:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8012138 <__kernel_cos+0xa0>
 80120c2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8012140 <__kernel_cos+0xa8>
 80120c6:	eea5 4b07 	vfma.f64	d4, d5, d7
 80120ca:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012148 <__kernel_cos+0xb0>
 80120ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80120d2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8012150 <__kernel_cos+0xb8>
 80120d6:	eea7 4b05 	vfma.f64	d4, d7, d5
 80120da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012158 <__kernel_cos+0xc0>
 80120de:	4b22      	ldr	r3, [pc, #136]	; (8012168 <__kernel_cos+0xd0>)
 80120e0:	eea4 7b05 	vfma.f64	d7, d4, d5
 80120e4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8012160 <__kernel_cos+0xc8>
 80120e8:	4299      	cmp	r1, r3
 80120ea:	eea7 4b05 	vfma.f64	d4, d7, d5
 80120ee:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80120f2:	ee24 4b05 	vmul.f64	d4, d4, d5
 80120f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80120fa:	eea5 1b04 	vfma.f64	d1, d5, d4
 80120fe:	dc04      	bgt.n	801210a <__kernel_cos+0x72>
 8012100:	ee37 7b41 	vsub.f64	d7, d7, d1
 8012104:	ee36 0b47 	vsub.f64	d0, d6, d7
 8012108:	4770      	bx	lr
 801210a:	4b18      	ldr	r3, [pc, #96]	; (801216c <__kernel_cos+0xd4>)
 801210c:	4299      	cmp	r1, r3
 801210e:	dc0d      	bgt.n	801212c <__kernel_cos+0x94>
 8012110:	2200      	movs	r2, #0
 8012112:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8012116:	ec43 2b15 	vmov	d5, r2, r3
 801211a:	ee36 0b45 	vsub.f64	d0, d6, d5
 801211e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012122:	ee37 7b41 	vsub.f64	d7, d7, d1
 8012126:	ee30 0b47 	vsub.f64	d0, d0, d7
 801212a:	4770      	bx	lr
 801212c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8012130:	e7f3      	b.n	801211a <__kernel_cos+0x82>
 8012132:	eeb0 0b46 	vmov.f64	d0, d6
 8012136:	4770      	bx	lr
 8012138:	be8838d4 	.word	0xbe8838d4
 801213c:	bda8fae9 	.word	0xbda8fae9
 8012140:	bdb4b1c4 	.word	0xbdb4b1c4
 8012144:	3e21ee9e 	.word	0x3e21ee9e
 8012148:	809c52ad 	.word	0x809c52ad
 801214c:	be927e4f 	.word	0xbe927e4f
 8012150:	19cb1590 	.word	0x19cb1590
 8012154:	3efa01a0 	.word	0x3efa01a0
 8012158:	16c15177 	.word	0x16c15177
 801215c:	bf56c16c 	.word	0xbf56c16c
 8012160:	5555554c 	.word	0x5555554c
 8012164:	3fa55555 	.word	0x3fa55555
 8012168:	3fd33332 	.word	0x3fd33332
 801216c:	3fe90000 	.word	0x3fe90000

08012170 <__kernel_sin>:
 8012170:	ee10 3a90 	vmov	r3, s1
 8012174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012178:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801217c:	da04      	bge.n	8012188 <__kernel_sin+0x18>
 801217e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012182:	ee17 3a90 	vmov	r3, s15
 8012186:	b35b      	cbz	r3, 80121e0 <__kernel_sin+0x70>
 8012188:	ee20 6b00 	vmul.f64	d6, d0, d0
 801218c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012190:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80121e8 <__kernel_sin+0x78>
 8012194:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80121f0 <__kernel_sin+0x80>
 8012198:	eea6 4b07 	vfma.f64	d4, d6, d7
 801219c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80121f8 <__kernel_sin+0x88>
 80121a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80121a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012200 <__kernel_sin+0x90>
 80121a8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80121ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012208 <__kernel_sin+0x98>
 80121b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80121b4:	b930      	cbnz	r0, 80121c4 <__kernel_sin+0x54>
 80121b6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012210 <__kernel_sin+0xa0>
 80121ba:	eea6 4b07 	vfma.f64	d4, d6, d7
 80121be:	eea4 0b05 	vfma.f64	d0, d4, d5
 80121c2:	4770      	bx	lr
 80121c4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80121c8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80121cc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80121d0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80121d4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012218 <__kernel_sin+0xa8>
 80121d8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80121dc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	f3af 8000 	nop.w
 80121e8:	5acfd57c 	.word	0x5acfd57c
 80121ec:	3de5d93a 	.word	0x3de5d93a
 80121f0:	8a2b9ceb 	.word	0x8a2b9ceb
 80121f4:	be5ae5e6 	.word	0xbe5ae5e6
 80121f8:	57b1fe7d 	.word	0x57b1fe7d
 80121fc:	3ec71de3 	.word	0x3ec71de3
 8012200:	19c161d5 	.word	0x19c161d5
 8012204:	bf2a01a0 	.word	0xbf2a01a0
 8012208:	1110f8a6 	.word	0x1110f8a6
 801220c:	3f811111 	.word	0x3f811111
 8012210:	55555549 	.word	0x55555549
 8012214:	bfc55555 	.word	0xbfc55555
 8012218:	55555549 	.word	0x55555549
 801221c:	3fc55555 	.word	0x3fc55555

08012220 <__kernel_tan>:
 8012220:	eeb0 7b40 	vmov.f64	d7, d0
 8012224:	ee17 3a90 	vmov	r3, s15
 8012228:	4989      	ldr	r1, [pc, #548]	; (8012450 <__kernel_tan+0x230>)
 801222a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801222e:	428a      	cmp	r2, r1
 8012230:	b510      	push	{r4, lr}
 8012232:	dc33      	bgt.n	801229c <__kernel_tan+0x7c>
 8012234:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8012238:	ee16 1a90 	vmov	r1, s13
 801223c:	2900      	cmp	r1, #0
 801223e:	d143      	bne.n	80122c8 <__kernel_tan+0xa8>
 8012240:	ee10 4a10 	vmov	r4, s0
 8012244:	1c43      	adds	r3, r0, #1
 8012246:	4323      	orrs	r3, r4
 8012248:	4313      	orrs	r3, r2
 801224a:	d108      	bne.n	801225e <__kernel_tan+0x3e>
 801224c:	f000 f904 	bl	8012458 <fabs>
 8012250:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012254:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012258:	eeb0 0b47 	vmov.f64	d0, d7
 801225c:	bd10      	pop	{r4, pc}
 801225e:	2801      	cmp	r0, #1
 8012260:	d0fa      	beq.n	8012258 <__kernel_tan+0x38>
 8012262:	ee30 6b01 	vadd.f64	d6, d0, d1
 8012266:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801226a:	ec53 2b16 	vmov	r2, r3, d6
 801226e:	ee87 3b06 	vdiv.f64	d3, d7, d6
 8012272:	460a      	mov	r2, r1
 8012274:	ec43 2b15 	vmov	d5, r2, r3
 8012278:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801227c:	ec53 2b13 	vmov	r2, r3, d3
 8012280:	ee35 4b40 	vsub.f64	d4, d5, d0
 8012284:	460a      	mov	r2, r1
 8012286:	ec43 2b17 	vmov	d7, r2, r3
 801228a:	ee31 4b44 	vsub.f64	d4, d1, d4
 801228e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012292:	eea4 6b07 	vfma.f64	d6, d4, d7
 8012296:	eea6 7b03 	vfma.f64	d7, d6, d3
 801229a:	e7dd      	b.n	8012258 <__kernel_tan+0x38>
 801229c:	496d      	ldr	r1, [pc, #436]	; (8012454 <__kernel_tan+0x234>)
 801229e:	428a      	cmp	r2, r1
 80122a0:	dd12      	ble.n	80122c8 <__kernel_tan+0xa8>
 80122a2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80123d0 <__kernel_tan+0x1b0>
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	bfb8      	it	lt
 80122aa:	eeb1 7b40 	vneglt.f64	d7, d0
 80122ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80122b2:	ed9f 7b49 	vldr	d7, [pc, #292]	; 80123d8 <__kernel_tan+0x1b8>
 80122b6:	bfb8      	it	lt
 80122b8:	eeb1 1b41 	vneglt.f64	d1, d1
 80122bc:	ee37 7b41 	vsub.f64	d7, d7, d1
 80122c0:	ed9f 1b47 	vldr	d1, [pc, #284]	; 80123e0 <__kernel_tan+0x1c0>
 80122c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80122c8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80122cc:	ed9f 3b46 	vldr	d3, [pc, #280]	; 80123e8 <__kernel_tan+0x1c8>
 80122d0:	ee25 6b05 	vmul.f64	d6, d5, d5
 80122d4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 80123f0 <__kernel_tan+0x1d0>
 80122d8:	eea6 4b03 	vfma.f64	d4, d6, d3
 80122dc:	ed9f 3b46 	vldr	d3, [pc, #280]	; 80123f8 <__kernel_tan+0x1d8>
 80122e0:	eea4 3b06 	vfma.f64	d3, d4, d6
 80122e4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8012400 <__kernel_tan+0x1e0>
 80122e8:	eea3 4b06 	vfma.f64	d4, d3, d6
 80122ec:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8012408 <__kernel_tan+0x1e8>
 80122f0:	eea4 3b06 	vfma.f64	d3, d4, d6
 80122f4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8012410 <__kernel_tan+0x1f0>
 80122f8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8012418 <__kernel_tan+0x1f8>
 80122fc:	eea3 4b06 	vfma.f64	d4, d3, d6
 8012300:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8012420 <__kernel_tan+0x200>
 8012304:	eea6 3b02 	vfma.f64	d3, d6, d2
 8012308:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8012428 <__kernel_tan+0x208>
 801230c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8012310:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8012430 <__kernel_tan+0x210>
 8012314:	eea2 3b06 	vfma.f64	d3, d2, d6
 8012318:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8012438 <__kernel_tan+0x218>
 801231c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8012320:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8012440 <__kernel_tan+0x220>
 8012324:	494b      	ldr	r1, [pc, #300]	; (8012454 <__kernel_tan+0x234>)
 8012326:	eea2 3b06 	vfma.f64	d3, d2, d6
 801232a:	ee27 2b05 	vmul.f64	d2, d7, d5
 801232e:	eeb0 6b44 	vmov.f64	d6, d4
 8012332:	eeb0 4b41 	vmov.f64	d4, d1
 8012336:	eea3 6b05 	vfma.f64	d6, d3, d5
 801233a:	eea6 4b02 	vfma.f64	d4, d6, d2
 801233e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8012448 <__kernel_tan+0x228>
 8012342:	eea4 1b05 	vfma.f64	d1, d4, d5
 8012346:	428a      	cmp	r2, r1
 8012348:	eea2 1b06 	vfma.f64	d1, d2, d6
 801234c:	ee37 5b01 	vadd.f64	d5, d7, d1
 8012350:	dd1d      	ble.n	801238e <__kernel_tan+0x16e>
 8012352:	ee25 3b05 	vmul.f64	d3, d5, d5
 8012356:	179b      	asrs	r3, r3, #30
 8012358:	ee06 0a90 	vmov	s13, r0
 801235c:	f003 0302 	and.w	r3, r3, #2
 8012360:	f1c3 0301 	rsb	r3, r3, #1
 8012364:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012368:	ee35 5b06 	vadd.f64	d5, d5, d6
 801236c:	ee83 4b05 	vdiv.f64	d4, d3, d5
 8012370:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012374:	ee34 4b41 	vsub.f64	d4, d4, d1
 8012378:	ee37 7b44 	vsub.f64	d7, d7, d4
 801237c:	eea7 6b45 	vfms.f64	d6, d7, d5
 8012380:	ee07 3a90 	vmov	s15, r3
 8012384:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012388:	ee27 7b06 	vmul.f64	d7, d7, d6
 801238c:	e764      	b.n	8012258 <__kernel_tan+0x38>
 801238e:	2801      	cmp	r0, #1
 8012390:	d01a      	beq.n	80123c8 <__kernel_tan+0x1a8>
 8012392:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012396:	ec51 0b15 	vmov	r0, r1, d5
 801239a:	2000      	movs	r0, #0
 801239c:	ec41 0b13 	vmov	d3, r0, r1
 80123a0:	ee33 7b47 	vsub.f64	d7, d3, d7
 80123a4:	ee31 1b47 	vsub.f64	d1, d1, d7
 80123a8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80123ac:	ee87 4b05 	vdiv.f64	d4, d7, d5
 80123b0:	ec53 2b14 	vmov	r2, r3, d4
 80123b4:	4602      	mov	r2, r0
 80123b6:	ec43 2b17 	vmov	d7, r2, r3
 80123ba:	eea3 6b07 	vfma.f64	d6, d3, d7
 80123be:	eea1 6b07 	vfma.f64	d6, d1, d7
 80123c2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80123c6:	e747      	b.n	8012258 <__kernel_tan+0x38>
 80123c8:	eeb0 7b45 	vmov.f64	d7, d5
 80123cc:	e744      	b.n	8012258 <__kernel_tan+0x38>
 80123ce:	bf00      	nop
 80123d0:	54442d18 	.word	0x54442d18
 80123d4:	3fe921fb 	.word	0x3fe921fb
 80123d8:	33145c07 	.word	0x33145c07
 80123dc:	3c81a626 	.word	0x3c81a626
	...
 80123e8:	db605373 	.word	0xdb605373
 80123ec:	bef375cb 	.word	0xbef375cb
 80123f0:	a03792a6 	.word	0xa03792a6
 80123f4:	3f147e88 	.word	0x3f147e88
 80123f8:	f2f26501 	.word	0xf2f26501
 80123fc:	3f4344d8 	.word	0x3f4344d8
 8012400:	c9560328 	.word	0xc9560328
 8012404:	3f6d6d22 	.word	0x3f6d6d22
 8012408:	8406d637 	.word	0x8406d637
 801240c:	3f9664f4 	.word	0x3f9664f4
 8012410:	1110fe7a 	.word	0x1110fe7a
 8012414:	3fc11111 	.word	0x3fc11111
 8012418:	74bf7ad4 	.word	0x74bf7ad4
 801241c:	3efb2a70 	.word	0x3efb2a70
 8012420:	32f0a7e9 	.word	0x32f0a7e9
 8012424:	3f12b80f 	.word	0x3f12b80f
 8012428:	1a8d1068 	.word	0x1a8d1068
 801242c:	3f3026f7 	.word	0x3f3026f7
 8012430:	fee08315 	.word	0xfee08315
 8012434:	3f57dbc8 	.word	0x3f57dbc8
 8012438:	e96e8493 	.word	0xe96e8493
 801243c:	3f8226e3 	.word	0x3f8226e3
 8012440:	1bb341fe 	.word	0x1bb341fe
 8012444:	3faba1ba 	.word	0x3faba1ba
 8012448:	55555563 	.word	0x55555563
 801244c:	3fd55555 	.word	0x3fd55555
 8012450:	3e2fffff 	.word	0x3e2fffff
 8012454:	3fe59427 	.word	0x3fe59427

08012458 <fabs>:
 8012458:	ec51 0b10 	vmov	r0, r1, d0
 801245c:	ee10 2a10 	vmov	r2, s0
 8012460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012464:	ec43 2b10 	vmov	d0, r2, r3
 8012468:	4770      	bx	lr
 801246a:	0000      	movs	r0, r0
 801246c:	0000      	movs	r0, r0
	...

08012470 <scalbn>:
 8012470:	ee10 1a90 	vmov	r1, s1
 8012474:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012478:	b98b      	cbnz	r3, 801249e <scalbn+0x2e>
 801247a:	ee10 3a10 	vmov	r3, s0
 801247e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012482:	4319      	orrs	r1, r3
 8012484:	d00a      	beq.n	801249c <scalbn+0x2c>
 8012486:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8012538 <scalbn+0xc8>
 801248a:	4b37      	ldr	r3, [pc, #220]	; (8012568 <scalbn+0xf8>)
 801248c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012490:	4298      	cmp	r0, r3
 8012492:	da0b      	bge.n	80124ac <scalbn+0x3c>
 8012494:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8012540 <scalbn+0xd0>
 8012498:	ee20 0b07 	vmul.f64	d0, d0, d7
 801249c:	4770      	bx	lr
 801249e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d107      	bne.n	80124b6 <scalbn+0x46>
 80124a6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80124aa:	4770      	bx	lr
 80124ac:	ee10 1a90 	vmov	r1, s1
 80124b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80124b4:	3b36      	subs	r3, #54	; 0x36
 80124b6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80124ba:	4290      	cmp	r0, r2
 80124bc:	dd0d      	ble.n	80124da <scalbn+0x6a>
 80124be:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8012548 <scalbn+0xd8>
 80124c2:	ee10 3a90 	vmov	r3, s1
 80124c6:	eeb0 6b47 	vmov.f64	d6, d7
 80124ca:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012550 <scalbn+0xe0>
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80124d4:	ee27 0b06 	vmul.f64	d0, d7, d6
 80124d8:	4770      	bx	lr
 80124da:	4418      	add	r0, r3
 80124dc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80124e0:	4298      	cmp	r0, r3
 80124e2:	dcec      	bgt.n	80124be <scalbn+0x4e>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	dd0a      	ble.n	80124fe <scalbn+0x8e>
 80124e8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80124ec:	ec53 2b10 	vmov	r2, r3, d0
 80124f0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80124f4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80124f8:	ec43 2b10 	vmov	d0, r2, r3
 80124fc:	4770      	bx	lr
 80124fe:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8012502:	da09      	bge.n	8012518 <scalbn+0xa8>
 8012504:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012540 <scalbn+0xd0>
 8012508:	ee10 3a90 	vmov	r3, s1
 801250c:	eeb0 6b47 	vmov.f64	d6, d7
 8012510:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8012558 <scalbn+0xe8>
 8012514:	2b00      	cmp	r3, #0
 8012516:	e7db      	b.n	80124d0 <scalbn+0x60>
 8012518:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801251c:	ec53 2b10 	vmov	r2, r3, d0
 8012520:	3036      	adds	r0, #54	; 0x36
 8012522:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012526:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801252a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012560 <scalbn+0xf0>
 801252e:	ec43 2b10 	vmov	d0, r2, r3
 8012532:	e7b1      	b.n	8012498 <scalbn+0x28>
 8012534:	f3af 8000 	nop.w
 8012538:	00000000 	.word	0x00000000
 801253c:	43500000 	.word	0x43500000
 8012540:	c2f8f359 	.word	0xc2f8f359
 8012544:	01a56e1f 	.word	0x01a56e1f
 8012548:	8800759c 	.word	0x8800759c
 801254c:	7e37e43c 	.word	0x7e37e43c
 8012550:	8800759c 	.word	0x8800759c
 8012554:	fe37e43c 	.word	0xfe37e43c
 8012558:	c2f8f359 	.word	0xc2f8f359
 801255c:	81a56e1f 	.word	0x81a56e1f
 8012560:	00000000 	.word	0x00000000
 8012564:	3c900000 	.word	0x3c900000
 8012568:	ffff3cb0 	.word	0xffff3cb0
 801256c:	00000000 	.word	0x00000000

08012570 <floor>:
 8012570:	ee10 1a90 	vmov	r1, s1
 8012574:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012578:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801257c:	2b13      	cmp	r3, #19
 801257e:	b530      	push	{r4, r5, lr}
 8012580:	ee10 0a10 	vmov	r0, s0
 8012584:	ee10 5a10 	vmov	r5, s0
 8012588:	dc31      	bgt.n	80125ee <floor+0x7e>
 801258a:	2b00      	cmp	r3, #0
 801258c:	da15      	bge.n	80125ba <floor+0x4a>
 801258e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012650 <floor+0xe0>
 8012592:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012596:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259e:	dd07      	ble.n	80125b0 <floor+0x40>
 80125a0:	2900      	cmp	r1, #0
 80125a2:	da4e      	bge.n	8012642 <floor+0xd2>
 80125a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80125a8:	4308      	orrs	r0, r1
 80125aa:	d04d      	beq.n	8012648 <floor+0xd8>
 80125ac:	492a      	ldr	r1, [pc, #168]	; (8012658 <floor+0xe8>)
 80125ae:	2000      	movs	r0, #0
 80125b0:	460b      	mov	r3, r1
 80125b2:	4602      	mov	r2, r0
 80125b4:	ec43 2b10 	vmov	d0, r2, r3
 80125b8:	e020      	b.n	80125fc <floor+0x8c>
 80125ba:	4a28      	ldr	r2, [pc, #160]	; (801265c <floor+0xec>)
 80125bc:	411a      	asrs	r2, r3
 80125be:	ea01 0402 	and.w	r4, r1, r2
 80125c2:	4304      	orrs	r4, r0
 80125c4:	d01a      	beq.n	80125fc <floor+0x8c>
 80125c6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8012650 <floor+0xe0>
 80125ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80125ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80125d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d6:	ddeb      	ble.n	80125b0 <floor+0x40>
 80125d8:	2900      	cmp	r1, #0
 80125da:	bfbe      	ittt	lt
 80125dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80125e0:	fa40 f303 	asrlt.w	r3, r0, r3
 80125e4:	18c9      	addlt	r1, r1, r3
 80125e6:	ea21 0102 	bic.w	r1, r1, r2
 80125ea:	2000      	movs	r0, #0
 80125ec:	e7e0      	b.n	80125b0 <floor+0x40>
 80125ee:	2b33      	cmp	r3, #51	; 0x33
 80125f0:	dd05      	ble.n	80125fe <floor+0x8e>
 80125f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80125f6:	d101      	bne.n	80125fc <floor+0x8c>
 80125f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80125fc:	bd30      	pop	{r4, r5, pc}
 80125fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012606:	40e2      	lsrs	r2, r4
 8012608:	4210      	tst	r0, r2
 801260a:	d0f7      	beq.n	80125fc <floor+0x8c>
 801260c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012650 <floor+0xe0>
 8012610:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012614:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801261c:	ddc8      	ble.n	80125b0 <floor+0x40>
 801261e:	2900      	cmp	r1, #0
 8012620:	da02      	bge.n	8012628 <floor+0xb8>
 8012622:	2b14      	cmp	r3, #20
 8012624:	d103      	bne.n	801262e <floor+0xbe>
 8012626:	3101      	adds	r1, #1
 8012628:	ea20 0002 	bic.w	r0, r0, r2
 801262c:	e7c0      	b.n	80125b0 <floor+0x40>
 801262e:	2401      	movs	r4, #1
 8012630:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012634:	fa04 f303 	lsl.w	r3, r4, r3
 8012638:	4418      	add	r0, r3
 801263a:	4285      	cmp	r5, r0
 801263c:	bf88      	it	hi
 801263e:	1909      	addhi	r1, r1, r4
 8012640:	e7f2      	b.n	8012628 <floor+0xb8>
 8012642:	2000      	movs	r0, #0
 8012644:	4601      	mov	r1, r0
 8012646:	e7b3      	b.n	80125b0 <floor+0x40>
 8012648:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801264c:	e7b0      	b.n	80125b0 <floor+0x40>
 801264e:	bf00      	nop
 8012650:	8800759c 	.word	0x8800759c
 8012654:	7e37e43c 	.word	0x7e37e43c
 8012658:	bff00000 	.word	0xbff00000
 801265c:	000fffff 	.word	0x000fffff

08012660 <abort>:
 8012660:	b508      	push	{r3, lr}
 8012662:	2006      	movs	r0, #6
 8012664:	f000 fa64 	bl	8012b30 <raise>
 8012668:	2001      	movs	r0, #1
 801266a:	f7f0 fd53 	bl	8003114 <_exit>
	...

08012670 <malloc>:
 8012670:	4b02      	ldr	r3, [pc, #8]	; (801267c <malloc+0xc>)
 8012672:	4601      	mov	r1, r0
 8012674:	6818      	ldr	r0, [r3, #0]
 8012676:	f000 b82b 	b.w	80126d0 <_malloc_r>
 801267a:	bf00      	nop
 801267c:	20000110 	.word	0x20000110

08012680 <free>:
 8012680:	4b02      	ldr	r3, [pc, #8]	; (801268c <free+0xc>)
 8012682:	4601      	mov	r1, r0
 8012684:	6818      	ldr	r0, [r3, #0]
 8012686:	f000 bab9 	b.w	8012bfc <_free_r>
 801268a:	bf00      	nop
 801268c:	20000110 	.word	0x20000110

08012690 <sbrk_aligned>:
 8012690:	b570      	push	{r4, r5, r6, lr}
 8012692:	4e0e      	ldr	r6, [pc, #56]	; (80126cc <sbrk_aligned+0x3c>)
 8012694:	460c      	mov	r4, r1
 8012696:	6831      	ldr	r1, [r6, #0]
 8012698:	4605      	mov	r5, r0
 801269a:	b911      	cbnz	r1, 80126a2 <sbrk_aligned+0x12>
 801269c:	f000 fa64 	bl	8012b68 <_sbrk_r>
 80126a0:	6030      	str	r0, [r6, #0]
 80126a2:	4621      	mov	r1, r4
 80126a4:	4628      	mov	r0, r5
 80126a6:	f000 fa5f 	bl	8012b68 <_sbrk_r>
 80126aa:	1c43      	adds	r3, r0, #1
 80126ac:	d00a      	beq.n	80126c4 <sbrk_aligned+0x34>
 80126ae:	1cc4      	adds	r4, r0, #3
 80126b0:	f024 0403 	bic.w	r4, r4, #3
 80126b4:	42a0      	cmp	r0, r4
 80126b6:	d007      	beq.n	80126c8 <sbrk_aligned+0x38>
 80126b8:	1a21      	subs	r1, r4, r0
 80126ba:	4628      	mov	r0, r5
 80126bc:	f000 fa54 	bl	8012b68 <_sbrk_r>
 80126c0:	3001      	adds	r0, #1
 80126c2:	d101      	bne.n	80126c8 <sbrk_aligned+0x38>
 80126c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80126c8:	4620      	mov	r0, r4
 80126ca:	bd70      	pop	{r4, r5, r6, pc}
 80126cc:	20006bb4 	.word	0x20006bb4

080126d0 <_malloc_r>:
 80126d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126d4:	1ccd      	adds	r5, r1, #3
 80126d6:	f025 0503 	bic.w	r5, r5, #3
 80126da:	3508      	adds	r5, #8
 80126dc:	2d0c      	cmp	r5, #12
 80126de:	bf38      	it	cc
 80126e0:	250c      	movcc	r5, #12
 80126e2:	2d00      	cmp	r5, #0
 80126e4:	4607      	mov	r7, r0
 80126e6:	db01      	blt.n	80126ec <_malloc_r+0x1c>
 80126e8:	42a9      	cmp	r1, r5
 80126ea:	d905      	bls.n	80126f8 <_malloc_r+0x28>
 80126ec:	230c      	movs	r3, #12
 80126ee:	603b      	str	r3, [r7, #0]
 80126f0:	2600      	movs	r6, #0
 80126f2:	4630      	mov	r0, r6
 80126f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80127cc <_malloc_r+0xfc>
 80126fc:	f000 f868 	bl	80127d0 <__malloc_lock>
 8012700:	f8d8 3000 	ldr.w	r3, [r8]
 8012704:	461c      	mov	r4, r3
 8012706:	bb5c      	cbnz	r4, 8012760 <_malloc_r+0x90>
 8012708:	4629      	mov	r1, r5
 801270a:	4638      	mov	r0, r7
 801270c:	f7ff ffc0 	bl	8012690 <sbrk_aligned>
 8012710:	1c43      	adds	r3, r0, #1
 8012712:	4604      	mov	r4, r0
 8012714:	d155      	bne.n	80127c2 <_malloc_r+0xf2>
 8012716:	f8d8 4000 	ldr.w	r4, [r8]
 801271a:	4626      	mov	r6, r4
 801271c:	2e00      	cmp	r6, #0
 801271e:	d145      	bne.n	80127ac <_malloc_r+0xdc>
 8012720:	2c00      	cmp	r4, #0
 8012722:	d048      	beq.n	80127b6 <_malloc_r+0xe6>
 8012724:	6823      	ldr	r3, [r4, #0]
 8012726:	4631      	mov	r1, r6
 8012728:	4638      	mov	r0, r7
 801272a:	eb04 0903 	add.w	r9, r4, r3
 801272e:	f000 fa1b 	bl	8012b68 <_sbrk_r>
 8012732:	4581      	cmp	r9, r0
 8012734:	d13f      	bne.n	80127b6 <_malloc_r+0xe6>
 8012736:	6821      	ldr	r1, [r4, #0]
 8012738:	1a6d      	subs	r5, r5, r1
 801273a:	4629      	mov	r1, r5
 801273c:	4638      	mov	r0, r7
 801273e:	f7ff ffa7 	bl	8012690 <sbrk_aligned>
 8012742:	3001      	adds	r0, #1
 8012744:	d037      	beq.n	80127b6 <_malloc_r+0xe6>
 8012746:	6823      	ldr	r3, [r4, #0]
 8012748:	442b      	add	r3, r5
 801274a:	6023      	str	r3, [r4, #0]
 801274c:	f8d8 3000 	ldr.w	r3, [r8]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d038      	beq.n	80127c6 <_malloc_r+0xf6>
 8012754:	685a      	ldr	r2, [r3, #4]
 8012756:	42a2      	cmp	r2, r4
 8012758:	d12b      	bne.n	80127b2 <_malloc_r+0xe2>
 801275a:	2200      	movs	r2, #0
 801275c:	605a      	str	r2, [r3, #4]
 801275e:	e00f      	b.n	8012780 <_malloc_r+0xb0>
 8012760:	6822      	ldr	r2, [r4, #0]
 8012762:	1b52      	subs	r2, r2, r5
 8012764:	d41f      	bmi.n	80127a6 <_malloc_r+0xd6>
 8012766:	2a0b      	cmp	r2, #11
 8012768:	d917      	bls.n	801279a <_malloc_r+0xca>
 801276a:	1961      	adds	r1, r4, r5
 801276c:	42a3      	cmp	r3, r4
 801276e:	6025      	str	r5, [r4, #0]
 8012770:	bf18      	it	ne
 8012772:	6059      	strne	r1, [r3, #4]
 8012774:	6863      	ldr	r3, [r4, #4]
 8012776:	bf08      	it	eq
 8012778:	f8c8 1000 	streq.w	r1, [r8]
 801277c:	5162      	str	r2, [r4, r5]
 801277e:	604b      	str	r3, [r1, #4]
 8012780:	4638      	mov	r0, r7
 8012782:	f104 060b 	add.w	r6, r4, #11
 8012786:	f000 f829 	bl	80127dc <__malloc_unlock>
 801278a:	f026 0607 	bic.w	r6, r6, #7
 801278e:	1d23      	adds	r3, r4, #4
 8012790:	1af2      	subs	r2, r6, r3
 8012792:	d0ae      	beq.n	80126f2 <_malloc_r+0x22>
 8012794:	1b9b      	subs	r3, r3, r6
 8012796:	50a3      	str	r3, [r4, r2]
 8012798:	e7ab      	b.n	80126f2 <_malloc_r+0x22>
 801279a:	42a3      	cmp	r3, r4
 801279c:	6862      	ldr	r2, [r4, #4]
 801279e:	d1dd      	bne.n	801275c <_malloc_r+0x8c>
 80127a0:	f8c8 2000 	str.w	r2, [r8]
 80127a4:	e7ec      	b.n	8012780 <_malloc_r+0xb0>
 80127a6:	4623      	mov	r3, r4
 80127a8:	6864      	ldr	r4, [r4, #4]
 80127aa:	e7ac      	b.n	8012706 <_malloc_r+0x36>
 80127ac:	4634      	mov	r4, r6
 80127ae:	6876      	ldr	r6, [r6, #4]
 80127b0:	e7b4      	b.n	801271c <_malloc_r+0x4c>
 80127b2:	4613      	mov	r3, r2
 80127b4:	e7cc      	b.n	8012750 <_malloc_r+0x80>
 80127b6:	230c      	movs	r3, #12
 80127b8:	603b      	str	r3, [r7, #0]
 80127ba:	4638      	mov	r0, r7
 80127bc:	f000 f80e 	bl	80127dc <__malloc_unlock>
 80127c0:	e797      	b.n	80126f2 <_malloc_r+0x22>
 80127c2:	6025      	str	r5, [r4, #0]
 80127c4:	e7dc      	b.n	8012780 <_malloc_r+0xb0>
 80127c6:	605b      	str	r3, [r3, #4]
 80127c8:	deff      	udf	#255	; 0xff
 80127ca:	bf00      	nop
 80127cc:	20006bb0 	.word	0x20006bb0

080127d0 <__malloc_lock>:
 80127d0:	4801      	ldr	r0, [pc, #4]	; (80127d8 <__malloc_lock+0x8>)
 80127d2:	f000 ba03 	b.w	8012bdc <__retarget_lock_acquire_recursive>
 80127d6:	bf00      	nop
 80127d8:	20006cf8 	.word	0x20006cf8

080127dc <__malloc_unlock>:
 80127dc:	4801      	ldr	r0, [pc, #4]	; (80127e4 <__malloc_unlock+0x8>)
 80127de:	f000 b9fe 	b.w	8012bde <__retarget_lock_release_recursive>
 80127e2:	bf00      	nop
 80127e4:	20006cf8 	.word	0x20006cf8

080127e8 <std>:
 80127e8:	2300      	movs	r3, #0
 80127ea:	b510      	push	{r4, lr}
 80127ec:	4604      	mov	r4, r0
 80127ee:	e9c0 3300 	strd	r3, r3, [r0]
 80127f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127f6:	6083      	str	r3, [r0, #8]
 80127f8:	8181      	strh	r1, [r0, #12]
 80127fa:	6643      	str	r3, [r0, #100]	; 0x64
 80127fc:	81c2      	strh	r2, [r0, #14]
 80127fe:	6183      	str	r3, [r0, #24]
 8012800:	4619      	mov	r1, r3
 8012802:	2208      	movs	r2, #8
 8012804:	305c      	adds	r0, #92	; 0x5c
 8012806:	f000 f90d 	bl	8012a24 <memset>
 801280a:	4b05      	ldr	r3, [pc, #20]	; (8012820 <std+0x38>)
 801280c:	6263      	str	r3, [r4, #36]	; 0x24
 801280e:	4b05      	ldr	r3, [pc, #20]	; (8012824 <std+0x3c>)
 8012810:	62a3      	str	r3, [r4, #40]	; 0x28
 8012812:	4b05      	ldr	r3, [pc, #20]	; (8012828 <std+0x40>)
 8012814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012816:	4b05      	ldr	r3, [pc, #20]	; (801282c <std+0x44>)
 8012818:	6224      	str	r4, [r4, #32]
 801281a:	6323      	str	r3, [r4, #48]	; 0x30
 801281c:	bd10      	pop	{r4, pc}
 801281e:	bf00      	nop
 8012820:	08013399 	.word	0x08013399
 8012824:	080133bb 	.word	0x080133bb
 8012828:	080133f3 	.word	0x080133f3
 801282c:	08013417 	.word	0x08013417

08012830 <stdio_exit_handler>:
 8012830:	4a02      	ldr	r2, [pc, #8]	; (801283c <stdio_exit_handler+0xc>)
 8012832:	4903      	ldr	r1, [pc, #12]	; (8012840 <stdio_exit_handler+0x10>)
 8012834:	4803      	ldr	r0, [pc, #12]	; (8012844 <stdio_exit_handler+0x14>)
 8012836:	f000 b869 	b.w	801290c <_fwalk_sglue>
 801283a:	bf00      	nop
 801283c:	200000b8 	.word	0x200000b8
 8012840:	08013349 	.word	0x08013349
 8012844:	200000c4 	.word	0x200000c4

08012848 <cleanup_stdio>:
 8012848:	6841      	ldr	r1, [r0, #4]
 801284a:	4b0c      	ldr	r3, [pc, #48]	; (801287c <cleanup_stdio+0x34>)
 801284c:	4299      	cmp	r1, r3
 801284e:	b510      	push	{r4, lr}
 8012850:	4604      	mov	r4, r0
 8012852:	d001      	beq.n	8012858 <cleanup_stdio+0x10>
 8012854:	f000 fd78 	bl	8013348 <_fflush_r>
 8012858:	68a1      	ldr	r1, [r4, #8]
 801285a:	4b09      	ldr	r3, [pc, #36]	; (8012880 <cleanup_stdio+0x38>)
 801285c:	4299      	cmp	r1, r3
 801285e:	d002      	beq.n	8012866 <cleanup_stdio+0x1e>
 8012860:	4620      	mov	r0, r4
 8012862:	f000 fd71 	bl	8013348 <_fflush_r>
 8012866:	68e1      	ldr	r1, [r4, #12]
 8012868:	4b06      	ldr	r3, [pc, #24]	; (8012884 <cleanup_stdio+0x3c>)
 801286a:	4299      	cmp	r1, r3
 801286c:	d004      	beq.n	8012878 <cleanup_stdio+0x30>
 801286e:	4620      	mov	r0, r4
 8012870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012874:	f000 bd68 	b.w	8013348 <_fflush_r>
 8012878:	bd10      	pop	{r4, pc}
 801287a:	bf00      	nop
 801287c:	20006bb8 	.word	0x20006bb8
 8012880:	20006c20 	.word	0x20006c20
 8012884:	20006c88 	.word	0x20006c88

08012888 <global_stdio_init.part.0>:
 8012888:	b510      	push	{r4, lr}
 801288a:	4b0b      	ldr	r3, [pc, #44]	; (80128b8 <global_stdio_init.part.0+0x30>)
 801288c:	4c0b      	ldr	r4, [pc, #44]	; (80128bc <global_stdio_init.part.0+0x34>)
 801288e:	4a0c      	ldr	r2, [pc, #48]	; (80128c0 <global_stdio_init.part.0+0x38>)
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	4620      	mov	r0, r4
 8012894:	2200      	movs	r2, #0
 8012896:	2104      	movs	r1, #4
 8012898:	f7ff ffa6 	bl	80127e8 <std>
 801289c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80128a0:	2201      	movs	r2, #1
 80128a2:	2109      	movs	r1, #9
 80128a4:	f7ff ffa0 	bl	80127e8 <std>
 80128a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80128ac:	2202      	movs	r2, #2
 80128ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128b2:	2112      	movs	r1, #18
 80128b4:	f7ff bf98 	b.w	80127e8 <std>
 80128b8:	20006cf0 	.word	0x20006cf0
 80128bc:	20006bb8 	.word	0x20006bb8
 80128c0:	08012831 	.word	0x08012831

080128c4 <__sfp_lock_acquire>:
 80128c4:	4801      	ldr	r0, [pc, #4]	; (80128cc <__sfp_lock_acquire+0x8>)
 80128c6:	f000 b989 	b.w	8012bdc <__retarget_lock_acquire_recursive>
 80128ca:	bf00      	nop
 80128cc:	20006cf9 	.word	0x20006cf9

080128d0 <__sfp_lock_release>:
 80128d0:	4801      	ldr	r0, [pc, #4]	; (80128d8 <__sfp_lock_release+0x8>)
 80128d2:	f000 b984 	b.w	8012bde <__retarget_lock_release_recursive>
 80128d6:	bf00      	nop
 80128d8:	20006cf9 	.word	0x20006cf9

080128dc <__sinit>:
 80128dc:	b510      	push	{r4, lr}
 80128de:	4604      	mov	r4, r0
 80128e0:	f7ff fff0 	bl	80128c4 <__sfp_lock_acquire>
 80128e4:	6a23      	ldr	r3, [r4, #32]
 80128e6:	b11b      	cbz	r3, 80128f0 <__sinit+0x14>
 80128e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128ec:	f7ff bff0 	b.w	80128d0 <__sfp_lock_release>
 80128f0:	4b04      	ldr	r3, [pc, #16]	; (8012904 <__sinit+0x28>)
 80128f2:	6223      	str	r3, [r4, #32]
 80128f4:	4b04      	ldr	r3, [pc, #16]	; (8012908 <__sinit+0x2c>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d1f5      	bne.n	80128e8 <__sinit+0xc>
 80128fc:	f7ff ffc4 	bl	8012888 <global_stdio_init.part.0>
 8012900:	e7f2      	b.n	80128e8 <__sinit+0xc>
 8012902:	bf00      	nop
 8012904:	08012849 	.word	0x08012849
 8012908:	20006cf0 	.word	0x20006cf0

0801290c <_fwalk_sglue>:
 801290c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012910:	4607      	mov	r7, r0
 8012912:	4688      	mov	r8, r1
 8012914:	4614      	mov	r4, r2
 8012916:	2600      	movs	r6, #0
 8012918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801291c:	f1b9 0901 	subs.w	r9, r9, #1
 8012920:	d505      	bpl.n	801292e <_fwalk_sglue+0x22>
 8012922:	6824      	ldr	r4, [r4, #0]
 8012924:	2c00      	cmp	r4, #0
 8012926:	d1f7      	bne.n	8012918 <_fwalk_sglue+0xc>
 8012928:	4630      	mov	r0, r6
 801292a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801292e:	89ab      	ldrh	r3, [r5, #12]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d907      	bls.n	8012944 <_fwalk_sglue+0x38>
 8012934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012938:	3301      	adds	r3, #1
 801293a:	d003      	beq.n	8012944 <_fwalk_sglue+0x38>
 801293c:	4629      	mov	r1, r5
 801293e:	4638      	mov	r0, r7
 8012940:	47c0      	blx	r8
 8012942:	4306      	orrs	r6, r0
 8012944:	3568      	adds	r5, #104	; 0x68
 8012946:	e7e9      	b.n	801291c <_fwalk_sglue+0x10>

08012948 <iprintf>:
 8012948:	b40f      	push	{r0, r1, r2, r3}
 801294a:	b507      	push	{r0, r1, r2, lr}
 801294c:	4906      	ldr	r1, [pc, #24]	; (8012968 <iprintf+0x20>)
 801294e:	ab04      	add	r3, sp, #16
 8012950:	6808      	ldr	r0, [r1, #0]
 8012952:	f853 2b04 	ldr.w	r2, [r3], #4
 8012956:	6881      	ldr	r1, [r0, #8]
 8012958:	9301      	str	r3, [sp, #4]
 801295a:	f000 f9c5 	bl	8012ce8 <_vfiprintf_r>
 801295e:	b003      	add	sp, #12
 8012960:	f85d eb04 	ldr.w	lr, [sp], #4
 8012964:	b004      	add	sp, #16
 8012966:	4770      	bx	lr
 8012968:	20000110 	.word	0x20000110

0801296c <_puts_r>:
 801296c:	6a03      	ldr	r3, [r0, #32]
 801296e:	b570      	push	{r4, r5, r6, lr}
 8012970:	6884      	ldr	r4, [r0, #8]
 8012972:	4605      	mov	r5, r0
 8012974:	460e      	mov	r6, r1
 8012976:	b90b      	cbnz	r3, 801297c <_puts_r+0x10>
 8012978:	f7ff ffb0 	bl	80128dc <__sinit>
 801297c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801297e:	07db      	lsls	r3, r3, #31
 8012980:	d405      	bmi.n	801298e <_puts_r+0x22>
 8012982:	89a3      	ldrh	r3, [r4, #12]
 8012984:	0598      	lsls	r0, r3, #22
 8012986:	d402      	bmi.n	801298e <_puts_r+0x22>
 8012988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801298a:	f000 f927 	bl	8012bdc <__retarget_lock_acquire_recursive>
 801298e:	89a3      	ldrh	r3, [r4, #12]
 8012990:	0719      	lsls	r1, r3, #28
 8012992:	d513      	bpl.n	80129bc <_puts_r+0x50>
 8012994:	6923      	ldr	r3, [r4, #16]
 8012996:	b18b      	cbz	r3, 80129bc <_puts_r+0x50>
 8012998:	3e01      	subs	r6, #1
 801299a:	68a3      	ldr	r3, [r4, #8]
 801299c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80129a0:	3b01      	subs	r3, #1
 80129a2:	60a3      	str	r3, [r4, #8]
 80129a4:	b9e9      	cbnz	r1, 80129e2 <_puts_r+0x76>
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	da2e      	bge.n	8012a08 <_puts_r+0x9c>
 80129aa:	4622      	mov	r2, r4
 80129ac:	210a      	movs	r1, #10
 80129ae:	4628      	mov	r0, r5
 80129b0:	f000 fd35 	bl	801341e <__swbuf_r>
 80129b4:	3001      	adds	r0, #1
 80129b6:	d007      	beq.n	80129c8 <_puts_r+0x5c>
 80129b8:	250a      	movs	r5, #10
 80129ba:	e007      	b.n	80129cc <_puts_r+0x60>
 80129bc:	4621      	mov	r1, r4
 80129be:	4628      	mov	r0, r5
 80129c0:	f000 fd6a 	bl	8013498 <__swsetup_r>
 80129c4:	2800      	cmp	r0, #0
 80129c6:	d0e7      	beq.n	8012998 <_puts_r+0x2c>
 80129c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80129cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129ce:	07da      	lsls	r2, r3, #31
 80129d0:	d405      	bmi.n	80129de <_puts_r+0x72>
 80129d2:	89a3      	ldrh	r3, [r4, #12]
 80129d4:	059b      	lsls	r3, r3, #22
 80129d6:	d402      	bmi.n	80129de <_puts_r+0x72>
 80129d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129da:	f000 f900 	bl	8012bde <__retarget_lock_release_recursive>
 80129de:	4628      	mov	r0, r5
 80129e0:	bd70      	pop	{r4, r5, r6, pc}
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	da04      	bge.n	80129f0 <_puts_r+0x84>
 80129e6:	69a2      	ldr	r2, [r4, #24]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	dc06      	bgt.n	80129fa <_puts_r+0x8e>
 80129ec:	290a      	cmp	r1, #10
 80129ee:	d004      	beq.n	80129fa <_puts_r+0x8e>
 80129f0:	6823      	ldr	r3, [r4, #0]
 80129f2:	1c5a      	adds	r2, r3, #1
 80129f4:	6022      	str	r2, [r4, #0]
 80129f6:	7019      	strb	r1, [r3, #0]
 80129f8:	e7cf      	b.n	801299a <_puts_r+0x2e>
 80129fa:	4622      	mov	r2, r4
 80129fc:	4628      	mov	r0, r5
 80129fe:	f000 fd0e 	bl	801341e <__swbuf_r>
 8012a02:	3001      	adds	r0, #1
 8012a04:	d1c9      	bne.n	801299a <_puts_r+0x2e>
 8012a06:	e7df      	b.n	80129c8 <_puts_r+0x5c>
 8012a08:	6823      	ldr	r3, [r4, #0]
 8012a0a:	250a      	movs	r5, #10
 8012a0c:	1c5a      	adds	r2, r3, #1
 8012a0e:	6022      	str	r2, [r4, #0]
 8012a10:	701d      	strb	r5, [r3, #0]
 8012a12:	e7db      	b.n	80129cc <_puts_r+0x60>

08012a14 <puts>:
 8012a14:	4b02      	ldr	r3, [pc, #8]	; (8012a20 <puts+0xc>)
 8012a16:	4601      	mov	r1, r0
 8012a18:	6818      	ldr	r0, [r3, #0]
 8012a1a:	f7ff bfa7 	b.w	801296c <_puts_r>
 8012a1e:	bf00      	nop
 8012a20:	20000110 	.word	0x20000110

08012a24 <memset>:
 8012a24:	4402      	add	r2, r0
 8012a26:	4603      	mov	r3, r0
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d100      	bne.n	8012a2e <memset+0xa>
 8012a2c:	4770      	bx	lr
 8012a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8012a32:	e7f9      	b.n	8012a28 <memset+0x4>

08012a34 <_reclaim_reent>:
 8012a34:	4b29      	ldr	r3, [pc, #164]	; (8012adc <_reclaim_reent+0xa8>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4283      	cmp	r3, r0
 8012a3a:	b570      	push	{r4, r5, r6, lr}
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	d04b      	beq.n	8012ad8 <_reclaim_reent+0xa4>
 8012a40:	69c3      	ldr	r3, [r0, #28]
 8012a42:	b143      	cbz	r3, 8012a56 <_reclaim_reent+0x22>
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d144      	bne.n	8012ad4 <_reclaim_reent+0xa0>
 8012a4a:	69e3      	ldr	r3, [r4, #28]
 8012a4c:	6819      	ldr	r1, [r3, #0]
 8012a4e:	b111      	cbz	r1, 8012a56 <_reclaim_reent+0x22>
 8012a50:	4620      	mov	r0, r4
 8012a52:	f000 f8d3 	bl	8012bfc <_free_r>
 8012a56:	6961      	ldr	r1, [r4, #20]
 8012a58:	b111      	cbz	r1, 8012a60 <_reclaim_reent+0x2c>
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f000 f8ce 	bl	8012bfc <_free_r>
 8012a60:	69e1      	ldr	r1, [r4, #28]
 8012a62:	b111      	cbz	r1, 8012a6a <_reclaim_reent+0x36>
 8012a64:	4620      	mov	r0, r4
 8012a66:	f000 f8c9 	bl	8012bfc <_free_r>
 8012a6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012a6c:	b111      	cbz	r1, 8012a74 <_reclaim_reent+0x40>
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f000 f8c4 	bl	8012bfc <_free_r>
 8012a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a76:	b111      	cbz	r1, 8012a7e <_reclaim_reent+0x4a>
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f000 f8bf 	bl	8012bfc <_free_r>
 8012a7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012a80:	b111      	cbz	r1, 8012a88 <_reclaim_reent+0x54>
 8012a82:	4620      	mov	r0, r4
 8012a84:	f000 f8ba 	bl	8012bfc <_free_r>
 8012a88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012a8a:	b111      	cbz	r1, 8012a92 <_reclaim_reent+0x5e>
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f000 f8b5 	bl	8012bfc <_free_r>
 8012a92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012a94:	b111      	cbz	r1, 8012a9c <_reclaim_reent+0x68>
 8012a96:	4620      	mov	r0, r4
 8012a98:	f000 f8b0 	bl	8012bfc <_free_r>
 8012a9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012a9e:	b111      	cbz	r1, 8012aa6 <_reclaim_reent+0x72>
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f000 f8ab 	bl	8012bfc <_free_r>
 8012aa6:	6a23      	ldr	r3, [r4, #32]
 8012aa8:	b1b3      	cbz	r3, 8012ad8 <_reclaim_reent+0xa4>
 8012aaa:	4620      	mov	r0, r4
 8012aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ab0:	4718      	bx	r3
 8012ab2:	5949      	ldr	r1, [r1, r5]
 8012ab4:	b941      	cbnz	r1, 8012ac8 <_reclaim_reent+0x94>
 8012ab6:	3504      	adds	r5, #4
 8012ab8:	69e3      	ldr	r3, [r4, #28]
 8012aba:	2d80      	cmp	r5, #128	; 0x80
 8012abc:	68d9      	ldr	r1, [r3, #12]
 8012abe:	d1f8      	bne.n	8012ab2 <_reclaim_reent+0x7e>
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f000 f89b 	bl	8012bfc <_free_r>
 8012ac6:	e7c0      	b.n	8012a4a <_reclaim_reent+0x16>
 8012ac8:	680e      	ldr	r6, [r1, #0]
 8012aca:	4620      	mov	r0, r4
 8012acc:	f000 f896 	bl	8012bfc <_free_r>
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	e7ef      	b.n	8012ab4 <_reclaim_reent+0x80>
 8012ad4:	2500      	movs	r5, #0
 8012ad6:	e7ef      	b.n	8012ab8 <_reclaim_reent+0x84>
 8012ad8:	bd70      	pop	{r4, r5, r6, pc}
 8012ada:	bf00      	nop
 8012adc:	20000110 	.word	0x20000110

08012ae0 <_raise_r>:
 8012ae0:	291f      	cmp	r1, #31
 8012ae2:	b538      	push	{r3, r4, r5, lr}
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	460d      	mov	r5, r1
 8012ae8:	d904      	bls.n	8012af4 <_raise_r+0x14>
 8012aea:	2316      	movs	r3, #22
 8012aec:	6003      	str	r3, [r0, #0]
 8012aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012af2:	bd38      	pop	{r3, r4, r5, pc}
 8012af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012af6:	b112      	cbz	r2, 8012afe <_raise_r+0x1e>
 8012af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012afc:	b94b      	cbnz	r3, 8012b12 <_raise_r+0x32>
 8012afe:	4620      	mov	r0, r4
 8012b00:	f000 f830 	bl	8012b64 <_getpid_r>
 8012b04:	462a      	mov	r2, r5
 8012b06:	4601      	mov	r1, r0
 8012b08:	4620      	mov	r0, r4
 8012b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b0e:	f000 b817 	b.w	8012b40 <_kill_r>
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d00a      	beq.n	8012b2c <_raise_r+0x4c>
 8012b16:	1c59      	adds	r1, r3, #1
 8012b18:	d103      	bne.n	8012b22 <_raise_r+0x42>
 8012b1a:	2316      	movs	r3, #22
 8012b1c:	6003      	str	r3, [r0, #0]
 8012b1e:	2001      	movs	r0, #1
 8012b20:	e7e7      	b.n	8012af2 <_raise_r+0x12>
 8012b22:	2400      	movs	r4, #0
 8012b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b28:	4628      	mov	r0, r5
 8012b2a:	4798      	blx	r3
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	e7e0      	b.n	8012af2 <_raise_r+0x12>

08012b30 <raise>:
 8012b30:	4b02      	ldr	r3, [pc, #8]	; (8012b3c <raise+0xc>)
 8012b32:	4601      	mov	r1, r0
 8012b34:	6818      	ldr	r0, [r3, #0]
 8012b36:	f7ff bfd3 	b.w	8012ae0 <_raise_r>
 8012b3a:	bf00      	nop
 8012b3c:	20000110 	.word	0x20000110

08012b40 <_kill_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4d07      	ldr	r5, [pc, #28]	; (8012b60 <_kill_r+0x20>)
 8012b44:	2300      	movs	r3, #0
 8012b46:	4604      	mov	r4, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	602b      	str	r3, [r5, #0]
 8012b4e:	f7f0 fad1 	bl	80030f4 <_kill>
 8012b52:	1c43      	adds	r3, r0, #1
 8012b54:	d102      	bne.n	8012b5c <_kill_r+0x1c>
 8012b56:	682b      	ldr	r3, [r5, #0]
 8012b58:	b103      	cbz	r3, 8012b5c <_kill_r+0x1c>
 8012b5a:	6023      	str	r3, [r4, #0]
 8012b5c:	bd38      	pop	{r3, r4, r5, pc}
 8012b5e:	bf00      	nop
 8012b60:	20006cf4 	.word	0x20006cf4

08012b64 <_getpid_r>:
 8012b64:	f7f0 babe 	b.w	80030e4 <_getpid>

08012b68 <_sbrk_r>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	4d06      	ldr	r5, [pc, #24]	; (8012b84 <_sbrk_r+0x1c>)
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4604      	mov	r4, r0
 8012b70:	4608      	mov	r0, r1
 8012b72:	602b      	str	r3, [r5, #0]
 8012b74:	f7f0 fb46 	bl	8003204 <_sbrk>
 8012b78:	1c43      	adds	r3, r0, #1
 8012b7a:	d102      	bne.n	8012b82 <_sbrk_r+0x1a>
 8012b7c:	682b      	ldr	r3, [r5, #0]
 8012b7e:	b103      	cbz	r3, 8012b82 <_sbrk_r+0x1a>
 8012b80:	6023      	str	r3, [r4, #0]
 8012b82:	bd38      	pop	{r3, r4, r5, pc}
 8012b84:	20006cf4 	.word	0x20006cf4

08012b88 <__errno>:
 8012b88:	4b01      	ldr	r3, [pc, #4]	; (8012b90 <__errno+0x8>)
 8012b8a:	6818      	ldr	r0, [r3, #0]
 8012b8c:	4770      	bx	lr
 8012b8e:	bf00      	nop
 8012b90:	20000110 	.word	0x20000110

08012b94 <__libc_init_array>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	4d0d      	ldr	r5, [pc, #52]	; (8012bcc <__libc_init_array+0x38>)
 8012b98:	4c0d      	ldr	r4, [pc, #52]	; (8012bd0 <__libc_init_array+0x3c>)
 8012b9a:	1b64      	subs	r4, r4, r5
 8012b9c:	10a4      	asrs	r4, r4, #2
 8012b9e:	2600      	movs	r6, #0
 8012ba0:	42a6      	cmp	r6, r4
 8012ba2:	d109      	bne.n	8012bb8 <__libc_init_array+0x24>
 8012ba4:	4d0b      	ldr	r5, [pc, #44]	; (8012bd4 <__libc_init_array+0x40>)
 8012ba6:	4c0c      	ldr	r4, [pc, #48]	; (8012bd8 <__libc_init_array+0x44>)
 8012ba8:	f000 fd98 	bl	80136dc <_init>
 8012bac:	1b64      	subs	r4, r4, r5
 8012bae:	10a4      	asrs	r4, r4, #2
 8012bb0:	2600      	movs	r6, #0
 8012bb2:	42a6      	cmp	r6, r4
 8012bb4:	d105      	bne.n	8012bc2 <__libc_init_array+0x2e>
 8012bb6:	bd70      	pop	{r4, r5, r6, pc}
 8012bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bbc:	4798      	blx	r3
 8012bbe:	3601      	adds	r6, #1
 8012bc0:	e7ee      	b.n	8012ba0 <__libc_init_array+0xc>
 8012bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bc6:	4798      	blx	r3
 8012bc8:	3601      	adds	r6, #1
 8012bca:	e7f2      	b.n	8012bb2 <__libc_init_array+0x1e>
 8012bcc:	08015624 	.word	0x08015624
 8012bd0:	08015624 	.word	0x08015624
 8012bd4:	08015624 	.word	0x08015624
 8012bd8:	0801562c 	.word	0x0801562c

08012bdc <__retarget_lock_acquire_recursive>:
 8012bdc:	4770      	bx	lr

08012bde <__retarget_lock_release_recursive>:
 8012bde:	4770      	bx	lr

08012be0 <memcpy>:
 8012be0:	440a      	add	r2, r1
 8012be2:	4291      	cmp	r1, r2
 8012be4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012be8:	d100      	bne.n	8012bec <memcpy+0xc>
 8012bea:	4770      	bx	lr
 8012bec:	b510      	push	{r4, lr}
 8012bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bf6:	4291      	cmp	r1, r2
 8012bf8:	d1f9      	bne.n	8012bee <memcpy+0xe>
 8012bfa:	bd10      	pop	{r4, pc}

08012bfc <_free_r>:
 8012bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bfe:	2900      	cmp	r1, #0
 8012c00:	d044      	beq.n	8012c8c <_free_r+0x90>
 8012c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c06:	9001      	str	r0, [sp, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8012c0e:	bfb8      	it	lt
 8012c10:	18e4      	addlt	r4, r4, r3
 8012c12:	f7ff fddd 	bl	80127d0 <__malloc_lock>
 8012c16:	4a1e      	ldr	r2, [pc, #120]	; (8012c90 <_free_r+0x94>)
 8012c18:	9801      	ldr	r0, [sp, #4]
 8012c1a:	6813      	ldr	r3, [r2, #0]
 8012c1c:	b933      	cbnz	r3, 8012c2c <_free_r+0x30>
 8012c1e:	6063      	str	r3, [r4, #4]
 8012c20:	6014      	str	r4, [r2, #0]
 8012c22:	b003      	add	sp, #12
 8012c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c28:	f7ff bdd8 	b.w	80127dc <__malloc_unlock>
 8012c2c:	42a3      	cmp	r3, r4
 8012c2e:	d908      	bls.n	8012c42 <_free_r+0x46>
 8012c30:	6825      	ldr	r5, [r4, #0]
 8012c32:	1961      	adds	r1, r4, r5
 8012c34:	428b      	cmp	r3, r1
 8012c36:	bf01      	itttt	eq
 8012c38:	6819      	ldreq	r1, [r3, #0]
 8012c3a:	685b      	ldreq	r3, [r3, #4]
 8012c3c:	1949      	addeq	r1, r1, r5
 8012c3e:	6021      	streq	r1, [r4, #0]
 8012c40:	e7ed      	b.n	8012c1e <_free_r+0x22>
 8012c42:	461a      	mov	r2, r3
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	b10b      	cbz	r3, 8012c4c <_free_r+0x50>
 8012c48:	42a3      	cmp	r3, r4
 8012c4a:	d9fa      	bls.n	8012c42 <_free_r+0x46>
 8012c4c:	6811      	ldr	r1, [r2, #0]
 8012c4e:	1855      	adds	r5, r2, r1
 8012c50:	42a5      	cmp	r5, r4
 8012c52:	d10b      	bne.n	8012c6c <_free_r+0x70>
 8012c54:	6824      	ldr	r4, [r4, #0]
 8012c56:	4421      	add	r1, r4
 8012c58:	1854      	adds	r4, r2, r1
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	6011      	str	r1, [r2, #0]
 8012c5e:	d1e0      	bne.n	8012c22 <_free_r+0x26>
 8012c60:	681c      	ldr	r4, [r3, #0]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	6053      	str	r3, [r2, #4]
 8012c66:	440c      	add	r4, r1
 8012c68:	6014      	str	r4, [r2, #0]
 8012c6a:	e7da      	b.n	8012c22 <_free_r+0x26>
 8012c6c:	d902      	bls.n	8012c74 <_free_r+0x78>
 8012c6e:	230c      	movs	r3, #12
 8012c70:	6003      	str	r3, [r0, #0]
 8012c72:	e7d6      	b.n	8012c22 <_free_r+0x26>
 8012c74:	6825      	ldr	r5, [r4, #0]
 8012c76:	1961      	adds	r1, r4, r5
 8012c78:	428b      	cmp	r3, r1
 8012c7a:	bf04      	itt	eq
 8012c7c:	6819      	ldreq	r1, [r3, #0]
 8012c7e:	685b      	ldreq	r3, [r3, #4]
 8012c80:	6063      	str	r3, [r4, #4]
 8012c82:	bf04      	itt	eq
 8012c84:	1949      	addeq	r1, r1, r5
 8012c86:	6021      	streq	r1, [r4, #0]
 8012c88:	6054      	str	r4, [r2, #4]
 8012c8a:	e7ca      	b.n	8012c22 <_free_r+0x26>
 8012c8c:	b003      	add	sp, #12
 8012c8e:	bd30      	pop	{r4, r5, pc}
 8012c90:	20006bb0 	.word	0x20006bb0

08012c94 <__sfputc_r>:
 8012c94:	6893      	ldr	r3, [r2, #8]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	b410      	push	{r4}
 8012c9c:	6093      	str	r3, [r2, #8]
 8012c9e:	da08      	bge.n	8012cb2 <__sfputc_r+0x1e>
 8012ca0:	6994      	ldr	r4, [r2, #24]
 8012ca2:	42a3      	cmp	r3, r4
 8012ca4:	db01      	blt.n	8012caa <__sfputc_r+0x16>
 8012ca6:	290a      	cmp	r1, #10
 8012ca8:	d103      	bne.n	8012cb2 <__sfputc_r+0x1e>
 8012caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cae:	f000 bbb6 	b.w	801341e <__swbuf_r>
 8012cb2:	6813      	ldr	r3, [r2, #0]
 8012cb4:	1c58      	adds	r0, r3, #1
 8012cb6:	6010      	str	r0, [r2, #0]
 8012cb8:	7019      	strb	r1, [r3, #0]
 8012cba:	4608      	mov	r0, r1
 8012cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cc0:	4770      	bx	lr

08012cc2 <__sfputs_r>:
 8012cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc4:	4606      	mov	r6, r0
 8012cc6:	460f      	mov	r7, r1
 8012cc8:	4614      	mov	r4, r2
 8012cca:	18d5      	adds	r5, r2, r3
 8012ccc:	42ac      	cmp	r4, r5
 8012cce:	d101      	bne.n	8012cd4 <__sfputs_r+0x12>
 8012cd0:	2000      	movs	r0, #0
 8012cd2:	e007      	b.n	8012ce4 <__sfputs_r+0x22>
 8012cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cd8:	463a      	mov	r2, r7
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f7ff ffda 	bl	8012c94 <__sfputc_r>
 8012ce0:	1c43      	adds	r3, r0, #1
 8012ce2:	d1f3      	bne.n	8012ccc <__sfputs_r+0xa>
 8012ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ce8 <_vfiprintf_r>:
 8012ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cec:	460d      	mov	r5, r1
 8012cee:	b09d      	sub	sp, #116	; 0x74
 8012cf0:	4614      	mov	r4, r2
 8012cf2:	4698      	mov	r8, r3
 8012cf4:	4606      	mov	r6, r0
 8012cf6:	b118      	cbz	r0, 8012d00 <_vfiprintf_r+0x18>
 8012cf8:	6a03      	ldr	r3, [r0, #32]
 8012cfa:	b90b      	cbnz	r3, 8012d00 <_vfiprintf_r+0x18>
 8012cfc:	f7ff fdee 	bl	80128dc <__sinit>
 8012d00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d02:	07d9      	lsls	r1, r3, #31
 8012d04:	d405      	bmi.n	8012d12 <_vfiprintf_r+0x2a>
 8012d06:	89ab      	ldrh	r3, [r5, #12]
 8012d08:	059a      	lsls	r2, r3, #22
 8012d0a:	d402      	bmi.n	8012d12 <_vfiprintf_r+0x2a>
 8012d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d0e:	f7ff ff65 	bl	8012bdc <__retarget_lock_acquire_recursive>
 8012d12:	89ab      	ldrh	r3, [r5, #12]
 8012d14:	071b      	lsls	r3, r3, #28
 8012d16:	d501      	bpl.n	8012d1c <_vfiprintf_r+0x34>
 8012d18:	692b      	ldr	r3, [r5, #16]
 8012d1a:	b99b      	cbnz	r3, 8012d44 <_vfiprintf_r+0x5c>
 8012d1c:	4629      	mov	r1, r5
 8012d1e:	4630      	mov	r0, r6
 8012d20:	f000 fbba 	bl	8013498 <__swsetup_r>
 8012d24:	b170      	cbz	r0, 8012d44 <_vfiprintf_r+0x5c>
 8012d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d28:	07dc      	lsls	r4, r3, #31
 8012d2a:	d504      	bpl.n	8012d36 <_vfiprintf_r+0x4e>
 8012d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d30:	b01d      	add	sp, #116	; 0x74
 8012d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d36:	89ab      	ldrh	r3, [r5, #12]
 8012d38:	0598      	lsls	r0, r3, #22
 8012d3a:	d4f7      	bmi.n	8012d2c <_vfiprintf_r+0x44>
 8012d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d3e:	f7ff ff4e 	bl	8012bde <__retarget_lock_release_recursive>
 8012d42:	e7f3      	b.n	8012d2c <_vfiprintf_r+0x44>
 8012d44:	2300      	movs	r3, #0
 8012d46:	9309      	str	r3, [sp, #36]	; 0x24
 8012d48:	2320      	movs	r3, #32
 8012d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d52:	2330      	movs	r3, #48	; 0x30
 8012d54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012f08 <_vfiprintf_r+0x220>
 8012d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d5c:	f04f 0901 	mov.w	r9, #1
 8012d60:	4623      	mov	r3, r4
 8012d62:	469a      	mov	sl, r3
 8012d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d68:	b10a      	cbz	r2, 8012d6e <_vfiprintf_r+0x86>
 8012d6a:	2a25      	cmp	r2, #37	; 0x25
 8012d6c:	d1f9      	bne.n	8012d62 <_vfiprintf_r+0x7a>
 8012d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8012d72:	d00b      	beq.n	8012d8c <_vfiprintf_r+0xa4>
 8012d74:	465b      	mov	r3, fp
 8012d76:	4622      	mov	r2, r4
 8012d78:	4629      	mov	r1, r5
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	f7ff ffa1 	bl	8012cc2 <__sfputs_r>
 8012d80:	3001      	adds	r0, #1
 8012d82:	f000 80a9 	beq.w	8012ed8 <_vfiprintf_r+0x1f0>
 8012d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d88:	445a      	add	r2, fp
 8012d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8012d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f000 80a1 	beq.w	8012ed8 <_vfiprintf_r+0x1f0>
 8012d96:	2300      	movs	r3, #0
 8012d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012da0:	f10a 0a01 	add.w	sl, sl, #1
 8012da4:	9304      	str	r3, [sp, #16]
 8012da6:	9307      	str	r3, [sp, #28]
 8012da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012dac:	931a      	str	r3, [sp, #104]	; 0x68
 8012dae:	4654      	mov	r4, sl
 8012db0:	2205      	movs	r2, #5
 8012db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012db6:	4854      	ldr	r0, [pc, #336]	; (8012f08 <_vfiprintf_r+0x220>)
 8012db8:	f7ed fa42 	bl	8000240 <memchr>
 8012dbc:	9a04      	ldr	r2, [sp, #16]
 8012dbe:	b9d8      	cbnz	r0, 8012df8 <_vfiprintf_r+0x110>
 8012dc0:	06d1      	lsls	r1, r2, #27
 8012dc2:	bf44      	itt	mi
 8012dc4:	2320      	movmi	r3, #32
 8012dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dca:	0713      	lsls	r3, r2, #28
 8012dcc:	bf44      	itt	mi
 8012dce:	232b      	movmi	r3, #43	; 0x2b
 8012dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8012dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8012dda:	d015      	beq.n	8012e08 <_vfiprintf_r+0x120>
 8012ddc:	9a07      	ldr	r2, [sp, #28]
 8012dde:	4654      	mov	r4, sl
 8012de0:	2000      	movs	r0, #0
 8012de2:	f04f 0c0a 	mov.w	ip, #10
 8012de6:	4621      	mov	r1, r4
 8012de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dec:	3b30      	subs	r3, #48	; 0x30
 8012dee:	2b09      	cmp	r3, #9
 8012df0:	d94d      	bls.n	8012e8e <_vfiprintf_r+0x1a6>
 8012df2:	b1b0      	cbz	r0, 8012e22 <_vfiprintf_r+0x13a>
 8012df4:	9207      	str	r2, [sp, #28]
 8012df6:	e014      	b.n	8012e22 <_vfiprintf_r+0x13a>
 8012df8:	eba0 0308 	sub.w	r3, r0, r8
 8012dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8012e00:	4313      	orrs	r3, r2
 8012e02:	9304      	str	r3, [sp, #16]
 8012e04:	46a2      	mov	sl, r4
 8012e06:	e7d2      	b.n	8012dae <_vfiprintf_r+0xc6>
 8012e08:	9b03      	ldr	r3, [sp, #12]
 8012e0a:	1d19      	adds	r1, r3, #4
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	9103      	str	r1, [sp, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	bfbb      	ittet	lt
 8012e14:	425b      	neglt	r3, r3
 8012e16:	f042 0202 	orrlt.w	r2, r2, #2
 8012e1a:	9307      	strge	r3, [sp, #28]
 8012e1c:	9307      	strlt	r3, [sp, #28]
 8012e1e:	bfb8      	it	lt
 8012e20:	9204      	strlt	r2, [sp, #16]
 8012e22:	7823      	ldrb	r3, [r4, #0]
 8012e24:	2b2e      	cmp	r3, #46	; 0x2e
 8012e26:	d10c      	bne.n	8012e42 <_vfiprintf_r+0x15a>
 8012e28:	7863      	ldrb	r3, [r4, #1]
 8012e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8012e2c:	d134      	bne.n	8012e98 <_vfiprintf_r+0x1b0>
 8012e2e:	9b03      	ldr	r3, [sp, #12]
 8012e30:	1d1a      	adds	r2, r3, #4
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	9203      	str	r2, [sp, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	bfb8      	it	lt
 8012e3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012e3e:	3402      	adds	r4, #2
 8012e40:	9305      	str	r3, [sp, #20]
 8012e42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012f18 <_vfiprintf_r+0x230>
 8012e46:	7821      	ldrb	r1, [r4, #0]
 8012e48:	2203      	movs	r2, #3
 8012e4a:	4650      	mov	r0, sl
 8012e4c:	f7ed f9f8 	bl	8000240 <memchr>
 8012e50:	b138      	cbz	r0, 8012e62 <_vfiprintf_r+0x17a>
 8012e52:	9b04      	ldr	r3, [sp, #16]
 8012e54:	eba0 000a 	sub.w	r0, r0, sl
 8012e58:	2240      	movs	r2, #64	; 0x40
 8012e5a:	4082      	lsls	r2, r0
 8012e5c:	4313      	orrs	r3, r2
 8012e5e:	3401      	adds	r4, #1
 8012e60:	9304      	str	r3, [sp, #16]
 8012e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e66:	4829      	ldr	r0, [pc, #164]	; (8012f0c <_vfiprintf_r+0x224>)
 8012e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e6c:	2206      	movs	r2, #6
 8012e6e:	f7ed f9e7 	bl	8000240 <memchr>
 8012e72:	2800      	cmp	r0, #0
 8012e74:	d03f      	beq.n	8012ef6 <_vfiprintf_r+0x20e>
 8012e76:	4b26      	ldr	r3, [pc, #152]	; (8012f10 <_vfiprintf_r+0x228>)
 8012e78:	bb1b      	cbnz	r3, 8012ec2 <_vfiprintf_r+0x1da>
 8012e7a:	9b03      	ldr	r3, [sp, #12]
 8012e7c:	3307      	adds	r3, #7
 8012e7e:	f023 0307 	bic.w	r3, r3, #7
 8012e82:	3308      	adds	r3, #8
 8012e84:	9303      	str	r3, [sp, #12]
 8012e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e88:	443b      	add	r3, r7
 8012e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8012e8c:	e768      	b.n	8012d60 <_vfiprintf_r+0x78>
 8012e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e92:	460c      	mov	r4, r1
 8012e94:	2001      	movs	r0, #1
 8012e96:	e7a6      	b.n	8012de6 <_vfiprintf_r+0xfe>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	3401      	adds	r4, #1
 8012e9c:	9305      	str	r3, [sp, #20]
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	f04f 0c0a 	mov.w	ip, #10
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012eaa:	3a30      	subs	r2, #48	; 0x30
 8012eac:	2a09      	cmp	r2, #9
 8012eae:	d903      	bls.n	8012eb8 <_vfiprintf_r+0x1d0>
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d0c6      	beq.n	8012e42 <_vfiprintf_r+0x15a>
 8012eb4:	9105      	str	r1, [sp, #20]
 8012eb6:	e7c4      	b.n	8012e42 <_vfiprintf_r+0x15a>
 8012eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	2301      	movs	r3, #1
 8012ec0:	e7f0      	b.n	8012ea4 <_vfiprintf_r+0x1bc>
 8012ec2:	ab03      	add	r3, sp, #12
 8012ec4:	9300      	str	r3, [sp, #0]
 8012ec6:	462a      	mov	r2, r5
 8012ec8:	4b12      	ldr	r3, [pc, #72]	; (8012f14 <_vfiprintf_r+0x22c>)
 8012eca:	a904      	add	r1, sp, #16
 8012ecc:	4630      	mov	r0, r6
 8012ece:	f3af 8000 	nop.w
 8012ed2:	4607      	mov	r7, r0
 8012ed4:	1c78      	adds	r0, r7, #1
 8012ed6:	d1d6      	bne.n	8012e86 <_vfiprintf_r+0x19e>
 8012ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012eda:	07d9      	lsls	r1, r3, #31
 8012edc:	d405      	bmi.n	8012eea <_vfiprintf_r+0x202>
 8012ede:	89ab      	ldrh	r3, [r5, #12]
 8012ee0:	059a      	lsls	r2, r3, #22
 8012ee2:	d402      	bmi.n	8012eea <_vfiprintf_r+0x202>
 8012ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ee6:	f7ff fe7a 	bl	8012bde <__retarget_lock_release_recursive>
 8012eea:	89ab      	ldrh	r3, [r5, #12]
 8012eec:	065b      	lsls	r3, r3, #25
 8012eee:	f53f af1d 	bmi.w	8012d2c <_vfiprintf_r+0x44>
 8012ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ef4:	e71c      	b.n	8012d30 <_vfiprintf_r+0x48>
 8012ef6:	ab03      	add	r3, sp, #12
 8012ef8:	9300      	str	r3, [sp, #0]
 8012efa:	462a      	mov	r2, r5
 8012efc:	4b05      	ldr	r3, [pc, #20]	; (8012f14 <_vfiprintf_r+0x22c>)
 8012efe:	a904      	add	r1, sp, #16
 8012f00:	4630      	mov	r0, r6
 8012f02:	f000 f879 	bl	8012ff8 <_printf_i>
 8012f06:	e7e4      	b.n	8012ed2 <_vfiprintf_r+0x1ea>
 8012f08:	080155e8 	.word	0x080155e8
 8012f0c:	080155f2 	.word	0x080155f2
 8012f10:	00000000 	.word	0x00000000
 8012f14:	08012cc3 	.word	0x08012cc3
 8012f18:	080155ee 	.word	0x080155ee

08012f1c <_printf_common>:
 8012f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f20:	4616      	mov	r6, r2
 8012f22:	4699      	mov	r9, r3
 8012f24:	688a      	ldr	r2, [r1, #8]
 8012f26:	690b      	ldr	r3, [r1, #16]
 8012f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f2c:	4293      	cmp	r3, r2
 8012f2e:	bfb8      	it	lt
 8012f30:	4613      	movlt	r3, r2
 8012f32:	6033      	str	r3, [r6, #0]
 8012f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f38:	4607      	mov	r7, r0
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	b10a      	cbz	r2, 8012f42 <_printf_common+0x26>
 8012f3e:	3301      	adds	r3, #1
 8012f40:	6033      	str	r3, [r6, #0]
 8012f42:	6823      	ldr	r3, [r4, #0]
 8012f44:	0699      	lsls	r1, r3, #26
 8012f46:	bf42      	ittt	mi
 8012f48:	6833      	ldrmi	r3, [r6, #0]
 8012f4a:	3302      	addmi	r3, #2
 8012f4c:	6033      	strmi	r3, [r6, #0]
 8012f4e:	6825      	ldr	r5, [r4, #0]
 8012f50:	f015 0506 	ands.w	r5, r5, #6
 8012f54:	d106      	bne.n	8012f64 <_printf_common+0x48>
 8012f56:	f104 0a19 	add.w	sl, r4, #25
 8012f5a:	68e3      	ldr	r3, [r4, #12]
 8012f5c:	6832      	ldr	r2, [r6, #0]
 8012f5e:	1a9b      	subs	r3, r3, r2
 8012f60:	42ab      	cmp	r3, r5
 8012f62:	dc26      	bgt.n	8012fb2 <_printf_common+0x96>
 8012f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f68:	1e13      	subs	r3, r2, #0
 8012f6a:	6822      	ldr	r2, [r4, #0]
 8012f6c:	bf18      	it	ne
 8012f6e:	2301      	movne	r3, #1
 8012f70:	0692      	lsls	r2, r2, #26
 8012f72:	d42b      	bmi.n	8012fcc <_printf_common+0xb0>
 8012f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f78:	4649      	mov	r1, r9
 8012f7a:	4638      	mov	r0, r7
 8012f7c:	47c0      	blx	r8
 8012f7e:	3001      	adds	r0, #1
 8012f80:	d01e      	beq.n	8012fc0 <_printf_common+0xa4>
 8012f82:	6823      	ldr	r3, [r4, #0]
 8012f84:	6922      	ldr	r2, [r4, #16]
 8012f86:	f003 0306 	and.w	r3, r3, #6
 8012f8a:	2b04      	cmp	r3, #4
 8012f8c:	bf02      	ittt	eq
 8012f8e:	68e5      	ldreq	r5, [r4, #12]
 8012f90:	6833      	ldreq	r3, [r6, #0]
 8012f92:	1aed      	subeq	r5, r5, r3
 8012f94:	68a3      	ldr	r3, [r4, #8]
 8012f96:	bf0c      	ite	eq
 8012f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f9c:	2500      	movne	r5, #0
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	bfc4      	itt	gt
 8012fa2:	1a9b      	subgt	r3, r3, r2
 8012fa4:	18ed      	addgt	r5, r5, r3
 8012fa6:	2600      	movs	r6, #0
 8012fa8:	341a      	adds	r4, #26
 8012faa:	42b5      	cmp	r5, r6
 8012fac:	d11a      	bne.n	8012fe4 <_printf_common+0xc8>
 8012fae:	2000      	movs	r0, #0
 8012fb0:	e008      	b.n	8012fc4 <_printf_common+0xa8>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	4652      	mov	r2, sl
 8012fb6:	4649      	mov	r1, r9
 8012fb8:	4638      	mov	r0, r7
 8012fba:	47c0      	blx	r8
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	d103      	bne.n	8012fc8 <_printf_common+0xac>
 8012fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fc8:	3501      	adds	r5, #1
 8012fca:	e7c6      	b.n	8012f5a <_printf_common+0x3e>
 8012fcc:	18e1      	adds	r1, r4, r3
 8012fce:	1c5a      	adds	r2, r3, #1
 8012fd0:	2030      	movs	r0, #48	; 0x30
 8012fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012fd6:	4422      	add	r2, r4
 8012fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012fe0:	3302      	adds	r3, #2
 8012fe2:	e7c7      	b.n	8012f74 <_printf_common+0x58>
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	4622      	mov	r2, r4
 8012fe8:	4649      	mov	r1, r9
 8012fea:	4638      	mov	r0, r7
 8012fec:	47c0      	blx	r8
 8012fee:	3001      	adds	r0, #1
 8012ff0:	d0e6      	beq.n	8012fc0 <_printf_common+0xa4>
 8012ff2:	3601      	adds	r6, #1
 8012ff4:	e7d9      	b.n	8012faa <_printf_common+0x8e>
	...

08012ff8 <_printf_i>:
 8012ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ffc:	7e0f      	ldrb	r7, [r1, #24]
 8012ffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013000:	2f78      	cmp	r7, #120	; 0x78
 8013002:	4691      	mov	r9, r2
 8013004:	4680      	mov	r8, r0
 8013006:	460c      	mov	r4, r1
 8013008:	469a      	mov	sl, r3
 801300a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801300e:	d807      	bhi.n	8013020 <_printf_i+0x28>
 8013010:	2f62      	cmp	r7, #98	; 0x62
 8013012:	d80a      	bhi.n	801302a <_printf_i+0x32>
 8013014:	2f00      	cmp	r7, #0
 8013016:	f000 80d4 	beq.w	80131c2 <_printf_i+0x1ca>
 801301a:	2f58      	cmp	r7, #88	; 0x58
 801301c:	f000 80c0 	beq.w	80131a0 <_printf_i+0x1a8>
 8013020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013028:	e03a      	b.n	80130a0 <_printf_i+0xa8>
 801302a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801302e:	2b15      	cmp	r3, #21
 8013030:	d8f6      	bhi.n	8013020 <_printf_i+0x28>
 8013032:	a101      	add	r1, pc, #4	; (adr r1, 8013038 <_printf_i+0x40>)
 8013034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013038:	08013091 	.word	0x08013091
 801303c:	080130a5 	.word	0x080130a5
 8013040:	08013021 	.word	0x08013021
 8013044:	08013021 	.word	0x08013021
 8013048:	08013021 	.word	0x08013021
 801304c:	08013021 	.word	0x08013021
 8013050:	080130a5 	.word	0x080130a5
 8013054:	08013021 	.word	0x08013021
 8013058:	08013021 	.word	0x08013021
 801305c:	08013021 	.word	0x08013021
 8013060:	08013021 	.word	0x08013021
 8013064:	080131a9 	.word	0x080131a9
 8013068:	080130d1 	.word	0x080130d1
 801306c:	08013163 	.word	0x08013163
 8013070:	08013021 	.word	0x08013021
 8013074:	08013021 	.word	0x08013021
 8013078:	080131cb 	.word	0x080131cb
 801307c:	08013021 	.word	0x08013021
 8013080:	080130d1 	.word	0x080130d1
 8013084:	08013021 	.word	0x08013021
 8013088:	08013021 	.word	0x08013021
 801308c:	0801316b 	.word	0x0801316b
 8013090:	682b      	ldr	r3, [r5, #0]
 8013092:	1d1a      	adds	r2, r3, #4
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	602a      	str	r2, [r5, #0]
 8013098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801309c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80130a0:	2301      	movs	r3, #1
 80130a2:	e09f      	b.n	80131e4 <_printf_i+0x1ec>
 80130a4:	6820      	ldr	r0, [r4, #0]
 80130a6:	682b      	ldr	r3, [r5, #0]
 80130a8:	0607      	lsls	r7, r0, #24
 80130aa:	f103 0104 	add.w	r1, r3, #4
 80130ae:	6029      	str	r1, [r5, #0]
 80130b0:	d501      	bpl.n	80130b6 <_printf_i+0xbe>
 80130b2:	681e      	ldr	r6, [r3, #0]
 80130b4:	e003      	b.n	80130be <_printf_i+0xc6>
 80130b6:	0646      	lsls	r6, r0, #25
 80130b8:	d5fb      	bpl.n	80130b2 <_printf_i+0xba>
 80130ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80130be:	2e00      	cmp	r6, #0
 80130c0:	da03      	bge.n	80130ca <_printf_i+0xd2>
 80130c2:	232d      	movs	r3, #45	; 0x2d
 80130c4:	4276      	negs	r6, r6
 80130c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130ca:	485a      	ldr	r0, [pc, #360]	; (8013234 <_printf_i+0x23c>)
 80130cc:	230a      	movs	r3, #10
 80130ce:	e012      	b.n	80130f6 <_printf_i+0xfe>
 80130d0:	682b      	ldr	r3, [r5, #0]
 80130d2:	6820      	ldr	r0, [r4, #0]
 80130d4:	1d19      	adds	r1, r3, #4
 80130d6:	6029      	str	r1, [r5, #0]
 80130d8:	0605      	lsls	r5, r0, #24
 80130da:	d501      	bpl.n	80130e0 <_printf_i+0xe8>
 80130dc:	681e      	ldr	r6, [r3, #0]
 80130de:	e002      	b.n	80130e6 <_printf_i+0xee>
 80130e0:	0641      	lsls	r1, r0, #25
 80130e2:	d5fb      	bpl.n	80130dc <_printf_i+0xe4>
 80130e4:	881e      	ldrh	r6, [r3, #0]
 80130e6:	4853      	ldr	r0, [pc, #332]	; (8013234 <_printf_i+0x23c>)
 80130e8:	2f6f      	cmp	r7, #111	; 0x6f
 80130ea:	bf0c      	ite	eq
 80130ec:	2308      	moveq	r3, #8
 80130ee:	230a      	movne	r3, #10
 80130f0:	2100      	movs	r1, #0
 80130f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80130f6:	6865      	ldr	r5, [r4, #4]
 80130f8:	60a5      	str	r5, [r4, #8]
 80130fa:	2d00      	cmp	r5, #0
 80130fc:	bfa2      	ittt	ge
 80130fe:	6821      	ldrge	r1, [r4, #0]
 8013100:	f021 0104 	bicge.w	r1, r1, #4
 8013104:	6021      	strge	r1, [r4, #0]
 8013106:	b90e      	cbnz	r6, 801310c <_printf_i+0x114>
 8013108:	2d00      	cmp	r5, #0
 801310a:	d04b      	beq.n	80131a4 <_printf_i+0x1ac>
 801310c:	4615      	mov	r5, r2
 801310e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013112:	fb03 6711 	mls	r7, r3, r1, r6
 8013116:	5dc7      	ldrb	r7, [r0, r7]
 8013118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801311c:	4637      	mov	r7, r6
 801311e:	42bb      	cmp	r3, r7
 8013120:	460e      	mov	r6, r1
 8013122:	d9f4      	bls.n	801310e <_printf_i+0x116>
 8013124:	2b08      	cmp	r3, #8
 8013126:	d10b      	bne.n	8013140 <_printf_i+0x148>
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	07de      	lsls	r6, r3, #31
 801312c:	d508      	bpl.n	8013140 <_printf_i+0x148>
 801312e:	6923      	ldr	r3, [r4, #16]
 8013130:	6861      	ldr	r1, [r4, #4]
 8013132:	4299      	cmp	r1, r3
 8013134:	bfde      	ittt	le
 8013136:	2330      	movle	r3, #48	; 0x30
 8013138:	f805 3c01 	strble.w	r3, [r5, #-1]
 801313c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013140:	1b52      	subs	r2, r2, r5
 8013142:	6122      	str	r2, [r4, #16]
 8013144:	f8cd a000 	str.w	sl, [sp]
 8013148:	464b      	mov	r3, r9
 801314a:	aa03      	add	r2, sp, #12
 801314c:	4621      	mov	r1, r4
 801314e:	4640      	mov	r0, r8
 8013150:	f7ff fee4 	bl	8012f1c <_printf_common>
 8013154:	3001      	adds	r0, #1
 8013156:	d14a      	bne.n	80131ee <_printf_i+0x1f6>
 8013158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801315c:	b004      	add	sp, #16
 801315e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013162:	6823      	ldr	r3, [r4, #0]
 8013164:	f043 0320 	orr.w	r3, r3, #32
 8013168:	6023      	str	r3, [r4, #0]
 801316a:	4833      	ldr	r0, [pc, #204]	; (8013238 <_printf_i+0x240>)
 801316c:	2778      	movs	r7, #120	; 0x78
 801316e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013172:	6823      	ldr	r3, [r4, #0]
 8013174:	6829      	ldr	r1, [r5, #0]
 8013176:	061f      	lsls	r7, r3, #24
 8013178:	f851 6b04 	ldr.w	r6, [r1], #4
 801317c:	d402      	bmi.n	8013184 <_printf_i+0x18c>
 801317e:	065f      	lsls	r7, r3, #25
 8013180:	bf48      	it	mi
 8013182:	b2b6      	uxthmi	r6, r6
 8013184:	07df      	lsls	r7, r3, #31
 8013186:	bf48      	it	mi
 8013188:	f043 0320 	orrmi.w	r3, r3, #32
 801318c:	6029      	str	r1, [r5, #0]
 801318e:	bf48      	it	mi
 8013190:	6023      	strmi	r3, [r4, #0]
 8013192:	b91e      	cbnz	r6, 801319c <_printf_i+0x1a4>
 8013194:	6823      	ldr	r3, [r4, #0]
 8013196:	f023 0320 	bic.w	r3, r3, #32
 801319a:	6023      	str	r3, [r4, #0]
 801319c:	2310      	movs	r3, #16
 801319e:	e7a7      	b.n	80130f0 <_printf_i+0xf8>
 80131a0:	4824      	ldr	r0, [pc, #144]	; (8013234 <_printf_i+0x23c>)
 80131a2:	e7e4      	b.n	801316e <_printf_i+0x176>
 80131a4:	4615      	mov	r5, r2
 80131a6:	e7bd      	b.n	8013124 <_printf_i+0x12c>
 80131a8:	682b      	ldr	r3, [r5, #0]
 80131aa:	6826      	ldr	r6, [r4, #0]
 80131ac:	6961      	ldr	r1, [r4, #20]
 80131ae:	1d18      	adds	r0, r3, #4
 80131b0:	6028      	str	r0, [r5, #0]
 80131b2:	0635      	lsls	r5, r6, #24
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	d501      	bpl.n	80131bc <_printf_i+0x1c4>
 80131b8:	6019      	str	r1, [r3, #0]
 80131ba:	e002      	b.n	80131c2 <_printf_i+0x1ca>
 80131bc:	0670      	lsls	r0, r6, #25
 80131be:	d5fb      	bpl.n	80131b8 <_printf_i+0x1c0>
 80131c0:	8019      	strh	r1, [r3, #0]
 80131c2:	2300      	movs	r3, #0
 80131c4:	6123      	str	r3, [r4, #16]
 80131c6:	4615      	mov	r5, r2
 80131c8:	e7bc      	b.n	8013144 <_printf_i+0x14c>
 80131ca:	682b      	ldr	r3, [r5, #0]
 80131cc:	1d1a      	adds	r2, r3, #4
 80131ce:	602a      	str	r2, [r5, #0]
 80131d0:	681d      	ldr	r5, [r3, #0]
 80131d2:	6862      	ldr	r2, [r4, #4]
 80131d4:	2100      	movs	r1, #0
 80131d6:	4628      	mov	r0, r5
 80131d8:	f7ed f832 	bl	8000240 <memchr>
 80131dc:	b108      	cbz	r0, 80131e2 <_printf_i+0x1ea>
 80131de:	1b40      	subs	r0, r0, r5
 80131e0:	6060      	str	r0, [r4, #4]
 80131e2:	6863      	ldr	r3, [r4, #4]
 80131e4:	6123      	str	r3, [r4, #16]
 80131e6:	2300      	movs	r3, #0
 80131e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131ec:	e7aa      	b.n	8013144 <_printf_i+0x14c>
 80131ee:	6923      	ldr	r3, [r4, #16]
 80131f0:	462a      	mov	r2, r5
 80131f2:	4649      	mov	r1, r9
 80131f4:	4640      	mov	r0, r8
 80131f6:	47d0      	blx	sl
 80131f8:	3001      	adds	r0, #1
 80131fa:	d0ad      	beq.n	8013158 <_printf_i+0x160>
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	079b      	lsls	r3, r3, #30
 8013200:	d413      	bmi.n	801322a <_printf_i+0x232>
 8013202:	68e0      	ldr	r0, [r4, #12]
 8013204:	9b03      	ldr	r3, [sp, #12]
 8013206:	4298      	cmp	r0, r3
 8013208:	bfb8      	it	lt
 801320a:	4618      	movlt	r0, r3
 801320c:	e7a6      	b.n	801315c <_printf_i+0x164>
 801320e:	2301      	movs	r3, #1
 8013210:	4632      	mov	r2, r6
 8013212:	4649      	mov	r1, r9
 8013214:	4640      	mov	r0, r8
 8013216:	47d0      	blx	sl
 8013218:	3001      	adds	r0, #1
 801321a:	d09d      	beq.n	8013158 <_printf_i+0x160>
 801321c:	3501      	adds	r5, #1
 801321e:	68e3      	ldr	r3, [r4, #12]
 8013220:	9903      	ldr	r1, [sp, #12]
 8013222:	1a5b      	subs	r3, r3, r1
 8013224:	42ab      	cmp	r3, r5
 8013226:	dcf2      	bgt.n	801320e <_printf_i+0x216>
 8013228:	e7eb      	b.n	8013202 <_printf_i+0x20a>
 801322a:	2500      	movs	r5, #0
 801322c:	f104 0619 	add.w	r6, r4, #25
 8013230:	e7f5      	b.n	801321e <_printf_i+0x226>
 8013232:	bf00      	nop
 8013234:	080155f9 	.word	0x080155f9
 8013238:	0801560a 	.word	0x0801560a

0801323c <__sflush_r>:
 801323c:	898a      	ldrh	r2, [r1, #12]
 801323e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013242:	4605      	mov	r5, r0
 8013244:	0710      	lsls	r0, r2, #28
 8013246:	460c      	mov	r4, r1
 8013248:	d458      	bmi.n	80132fc <__sflush_r+0xc0>
 801324a:	684b      	ldr	r3, [r1, #4]
 801324c:	2b00      	cmp	r3, #0
 801324e:	dc05      	bgt.n	801325c <__sflush_r+0x20>
 8013250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013252:	2b00      	cmp	r3, #0
 8013254:	dc02      	bgt.n	801325c <__sflush_r+0x20>
 8013256:	2000      	movs	r0, #0
 8013258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801325c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801325e:	2e00      	cmp	r6, #0
 8013260:	d0f9      	beq.n	8013256 <__sflush_r+0x1a>
 8013262:	2300      	movs	r3, #0
 8013264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013268:	682f      	ldr	r7, [r5, #0]
 801326a:	6a21      	ldr	r1, [r4, #32]
 801326c:	602b      	str	r3, [r5, #0]
 801326e:	d032      	beq.n	80132d6 <__sflush_r+0x9a>
 8013270:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013272:	89a3      	ldrh	r3, [r4, #12]
 8013274:	075a      	lsls	r2, r3, #29
 8013276:	d505      	bpl.n	8013284 <__sflush_r+0x48>
 8013278:	6863      	ldr	r3, [r4, #4]
 801327a:	1ac0      	subs	r0, r0, r3
 801327c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801327e:	b10b      	cbz	r3, 8013284 <__sflush_r+0x48>
 8013280:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013282:	1ac0      	subs	r0, r0, r3
 8013284:	2300      	movs	r3, #0
 8013286:	4602      	mov	r2, r0
 8013288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801328a:	6a21      	ldr	r1, [r4, #32]
 801328c:	4628      	mov	r0, r5
 801328e:	47b0      	blx	r6
 8013290:	1c43      	adds	r3, r0, #1
 8013292:	89a3      	ldrh	r3, [r4, #12]
 8013294:	d106      	bne.n	80132a4 <__sflush_r+0x68>
 8013296:	6829      	ldr	r1, [r5, #0]
 8013298:	291d      	cmp	r1, #29
 801329a:	d82b      	bhi.n	80132f4 <__sflush_r+0xb8>
 801329c:	4a29      	ldr	r2, [pc, #164]	; (8013344 <__sflush_r+0x108>)
 801329e:	410a      	asrs	r2, r1
 80132a0:	07d6      	lsls	r6, r2, #31
 80132a2:	d427      	bmi.n	80132f4 <__sflush_r+0xb8>
 80132a4:	2200      	movs	r2, #0
 80132a6:	6062      	str	r2, [r4, #4]
 80132a8:	04d9      	lsls	r1, r3, #19
 80132aa:	6922      	ldr	r2, [r4, #16]
 80132ac:	6022      	str	r2, [r4, #0]
 80132ae:	d504      	bpl.n	80132ba <__sflush_r+0x7e>
 80132b0:	1c42      	adds	r2, r0, #1
 80132b2:	d101      	bne.n	80132b8 <__sflush_r+0x7c>
 80132b4:	682b      	ldr	r3, [r5, #0]
 80132b6:	b903      	cbnz	r3, 80132ba <__sflush_r+0x7e>
 80132b8:	6560      	str	r0, [r4, #84]	; 0x54
 80132ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132bc:	602f      	str	r7, [r5, #0]
 80132be:	2900      	cmp	r1, #0
 80132c0:	d0c9      	beq.n	8013256 <__sflush_r+0x1a>
 80132c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132c6:	4299      	cmp	r1, r3
 80132c8:	d002      	beq.n	80132d0 <__sflush_r+0x94>
 80132ca:	4628      	mov	r0, r5
 80132cc:	f7ff fc96 	bl	8012bfc <_free_r>
 80132d0:	2000      	movs	r0, #0
 80132d2:	6360      	str	r0, [r4, #52]	; 0x34
 80132d4:	e7c0      	b.n	8013258 <__sflush_r+0x1c>
 80132d6:	2301      	movs	r3, #1
 80132d8:	4628      	mov	r0, r5
 80132da:	47b0      	blx	r6
 80132dc:	1c41      	adds	r1, r0, #1
 80132de:	d1c8      	bne.n	8013272 <__sflush_r+0x36>
 80132e0:	682b      	ldr	r3, [r5, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d0c5      	beq.n	8013272 <__sflush_r+0x36>
 80132e6:	2b1d      	cmp	r3, #29
 80132e8:	d001      	beq.n	80132ee <__sflush_r+0xb2>
 80132ea:	2b16      	cmp	r3, #22
 80132ec:	d101      	bne.n	80132f2 <__sflush_r+0xb6>
 80132ee:	602f      	str	r7, [r5, #0]
 80132f0:	e7b1      	b.n	8013256 <__sflush_r+0x1a>
 80132f2:	89a3      	ldrh	r3, [r4, #12]
 80132f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132f8:	81a3      	strh	r3, [r4, #12]
 80132fa:	e7ad      	b.n	8013258 <__sflush_r+0x1c>
 80132fc:	690f      	ldr	r7, [r1, #16]
 80132fe:	2f00      	cmp	r7, #0
 8013300:	d0a9      	beq.n	8013256 <__sflush_r+0x1a>
 8013302:	0793      	lsls	r3, r2, #30
 8013304:	680e      	ldr	r6, [r1, #0]
 8013306:	bf08      	it	eq
 8013308:	694b      	ldreq	r3, [r1, #20]
 801330a:	600f      	str	r7, [r1, #0]
 801330c:	bf18      	it	ne
 801330e:	2300      	movne	r3, #0
 8013310:	eba6 0807 	sub.w	r8, r6, r7
 8013314:	608b      	str	r3, [r1, #8]
 8013316:	f1b8 0f00 	cmp.w	r8, #0
 801331a:	dd9c      	ble.n	8013256 <__sflush_r+0x1a>
 801331c:	6a21      	ldr	r1, [r4, #32]
 801331e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013320:	4643      	mov	r3, r8
 8013322:	463a      	mov	r2, r7
 8013324:	4628      	mov	r0, r5
 8013326:	47b0      	blx	r6
 8013328:	2800      	cmp	r0, #0
 801332a:	dc06      	bgt.n	801333a <__sflush_r+0xfe>
 801332c:	89a3      	ldrh	r3, [r4, #12]
 801332e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013332:	81a3      	strh	r3, [r4, #12]
 8013334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013338:	e78e      	b.n	8013258 <__sflush_r+0x1c>
 801333a:	4407      	add	r7, r0
 801333c:	eba8 0800 	sub.w	r8, r8, r0
 8013340:	e7e9      	b.n	8013316 <__sflush_r+0xda>
 8013342:	bf00      	nop
 8013344:	dfbffffe 	.word	0xdfbffffe

08013348 <_fflush_r>:
 8013348:	b538      	push	{r3, r4, r5, lr}
 801334a:	690b      	ldr	r3, [r1, #16]
 801334c:	4605      	mov	r5, r0
 801334e:	460c      	mov	r4, r1
 8013350:	b913      	cbnz	r3, 8013358 <_fflush_r+0x10>
 8013352:	2500      	movs	r5, #0
 8013354:	4628      	mov	r0, r5
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	b118      	cbz	r0, 8013362 <_fflush_r+0x1a>
 801335a:	6a03      	ldr	r3, [r0, #32]
 801335c:	b90b      	cbnz	r3, 8013362 <_fflush_r+0x1a>
 801335e:	f7ff fabd 	bl	80128dc <__sinit>
 8013362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d0f3      	beq.n	8013352 <_fflush_r+0xa>
 801336a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801336c:	07d0      	lsls	r0, r2, #31
 801336e:	d404      	bmi.n	801337a <_fflush_r+0x32>
 8013370:	0599      	lsls	r1, r3, #22
 8013372:	d402      	bmi.n	801337a <_fflush_r+0x32>
 8013374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013376:	f7ff fc31 	bl	8012bdc <__retarget_lock_acquire_recursive>
 801337a:	4628      	mov	r0, r5
 801337c:	4621      	mov	r1, r4
 801337e:	f7ff ff5d 	bl	801323c <__sflush_r>
 8013382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013384:	07da      	lsls	r2, r3, #31
 8013386:	4605      	mov	r5, r0
 8013388:	d4e4      	bmi.n	8013354 <_fflush_r+0xc>
 801338a:	89a3      	ldrh	r3, [r4, #12]
 801338c:	059b      	lsls	r3, r3, #22
 801338e:	d4e1      	bmi.n	8013354 <_fflush_r+0xc>
 8013390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013392:	f7ff fc24 	bl	8012bde <__retarget_lock_release_recursive>
 8013396:	e7dd      	b.n	8013354 <_fflush_r+0xc>

08013398 <__sread>:
 8013398:	b510      	push	{r4, lr}
 801339a:	460c      	mov	r4, r1
 801339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133a0:	f000 f978 	bl	8013694 <_read_r>
 80133a4:	2800      	cmp	r0, #0
 80133a6:	bfab      	itete	ge
 80133a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133aa:	89a3      	ldrhlt	r3, [r4, #12]
 80133ac:	181b      	addge	r3, r3, r0
 80133ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133b2:	bfac      	ite	ge
 80133b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80133b6:	81a3      	strhlt	r3, [r4, #12]
 80133b8:	bd10      	pop	{r4, pc}

080133ba <__swrite>:
 80133ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133be:	461f      	mov	r7, r3
 80133c0:	898b      	ldrh	r3, [r1, #12]
 80133c2:	05db      	lsls	r3, r3, #23
 80133c4:	4605      	mov	r5, r0
 80133c6:	460c      	mov	r4, r1
 80133c8:	4616      	mov	r6, r2
 80133ca:	d505      	bpl.n	80133d8 <__swrite+0x1e>
 80133cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133d0:	2302      	movs	r3, #2
 80133d2:	2200      	movs	r2, #0
 80133d4:	f000 f94c 	bl	8013670 <_lseek_r>
 80133d8:	89a3      	ldrh	r3, [r4, #12]
 80133da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80133e2:	81a3      	strh	r3, [r4, #12]
 80133e4:	4632      	mov	r2, r6
 80133e6:	463b      	mov	r3, r7
 80133e8:	4628      	mov	r0, r5
 80133ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133ee:	f000 b963 	b.w	80136b8 <_write_r>

080133f2 <__sseek>:
 80133f2:	b510      	push	{r4, lr}
 80133f4:	460c      	mov	r4, r1
 80133f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133fa:	f000 f939 	bl	8013670 <_lseek_r>
 80133fe:	1c43      	adds	r3, r0, #1
 8013400:	89a3      	ldrh	r3, [r4, #12]
 8013402:	bf15      	itete	ne
 8013404:	6560      	strne	r0, [r4, #84]	; 0x54
 8013406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801340a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801340e:	81a3      	strheq	r3, [r4, #12]
 8013410:	bf18      	it	ne
 8013412:	81a3      	strhne	r3, [r4, #12]
 8013414:	bd10      	pop	{r4, pc}

08013416 <__sclose>:
 8013416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801341a:	f000 b8f7 	b.w	801360c <_close_r>

0801341e <__swbuf_r>:
 801341e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013420:	460e      	mov	r6, r1
 8013422:	4614      	mov	r4, r2
 8013424:	4605      	mov	r5, r0
 8013426:	b118      	cbz	r0, 8013430 <__swbuf_r+0x12>
 8013428:	6a03      	ldr	r3, [r0, #32]
 801342a:	b90b      	cbnz	r3, 8013430 <__swbuf_r+0x12>
 801342c:	f7ff fa56 	bl	80128dc <__sinit>
 8013430:	69a3      	ldr	r3, [r4, #24]
 8013432:	60a3      	str	r3, [r4, #8]
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	071a      	lsls	r2, r3, #28
 8013438:	d525      	bpl.n	8013486 <__swbuf_r+0x68>
 801343a:	6923      	ldr	r3, [r4, #16]
 801343c:	b31b      	cbz	r3, 8013486 <__swbuf_r+0x68>
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	6922      	ldr	r2, [r4, #16]
 8013442:	1a98      	subs	r0, r3, r2
 8013444:	6963      	ldr	r3, [r4, #20]
 8013446:	b2f6      	uxtb	r6, r6
 8013448:	4283      	cmp	r3, r0
 801344a:	4637      	mov	r7, r6
 801344c:	dc04      	bgt.n	8013458 <__swbuf_r+0x3a>
 801344e:	4621      	mov	r1, r4
 8013450:	4628      	mov	r0, r5
 8013452:	f7ff ff79 	bl	8013348 <_fflush_r>
 8013456:	b9e0      	cbnz	r0, 8013492 <__swbuf_r+0x74>
 8013458:	68a3      	ldr	r3, [r4, #8]
 801345a:	3b01      	subs	r3, #1
 801345c:	60a3      	str	r3, [r4, #8]
 801345e:	6823      	ldr	r3, [r4, #0]
 8013460:	1c5a      	adds	r2, r3, #1
 8013462:	6022      	str	r2, [r4, #0]
 8013464:	701e      	strb	r6, [r3, #0]
 8013466:	6962      	ldr	r2, [r4, #20]
 8013468:	1c43      	adds	r3, r0, #1
 801346a:	429a      	cmp	r2, r3
 801346c:	d004      	beq.n	8013478 <__swbuf_r+0x5a>
 801346e:	89a3      	ldrh	r3, [r4, #12]
 8013470:	07db      	lsls	r3, r3, #31
 8013472:	d506      	bpl.n	8013482 <__swbuf_r+0x64>
 8013474:	2e0a      	cmp	r6, #10
 8013476:	d104      	bne.n	8013482 <__swbuf_r+0x64>
 8013478:	4621      	mov	r1, r4
 801347a:	4628      	mov	r0, r5
 801347c:	f7ff ff64 	bl	8013348 <_fflush_r>
 8013480:	b938      	cbnz	r0, 8013492 <__swbuf_r+0x74>
 8013482:	4638      	mov	r0, r7
 8013484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013486:	4621      	mov	r1, r4
 8013488:	4628      	mov	r0, r5
 801348a:	f000 f805 	bl	8013498 <__swsetup_r>
 801348e:	2800      	cmp	r0, #0
 8013490:	d0d5      	beq.n	801343e <__swbuf_r+0x20>
 8013492:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013496:	e7f4      	b.n	8013482 <__swbuf_r+0x64>

08013498 <__swsetup_r>:
 8013498:	b538      	push	{r3, r4, r5, lr}
 801349a:	4b2a      	ldr	r3, [pc, #168]	; (8013544 <__swsetup_r+0xac>)
 801349c:	4605      	mov	r5, r0
 801349e:	6818      	ldr	r0, [r3, #0]
 80134a0:	460c      	mov	r4, r1
 80134a2:	b118      	cbz	r0, 80134ac <__swsetup_r+0x14>
 80134a4:	6a03      	ldr	r3, [r0, #32]
 80134a6:	b90b      	cbnz	r3, 80134ac <__swsetup_r+0x14>
 80134a8:	f7ff fa18 	bl	80128dc <__sinit>
 80134ac:	89a3      	ldrh	r3, [r4, #12]
 80134ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134b2:	0718      	lsls	r0, r3, #28
 80134b4:	d422      	bmi.n	80134fc <__swsetup_r+0x64>
 80134b6:	06d9      	lsls	r1, r3, #27
 80134b8:	d407      	bmi.n	80134ca <__swsetup_r+0x32>
 80134ba:	2309      	movs	r3, #9
 80134bc:	602b      	str	r3, [r5, #0]
 80134be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80134c2:	81a3      	strh	r3, [r4, #12]
 80134c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134c8:	e034      	b.n	8013534 <__swsetup_r+0x9c>
 80134ca:	0758      	lsls	r0, r3, #29
 80134cc:	d512      	bpl.n	80134f4 <__swsetup_r+0x5c>
 80134ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134d0:	b141      	cbz	r1, 80134e4 <__swsetup_r+0x4c>
 80134d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134d6:	4299      	cmp	r1, r3
 80134d8:	d002      	beq.n	80134e0 <__swsetup_r+0x48>
 80134da:	4628      	mov	r0, r5
 80134dc:	f7ff fb8e 	bl	8012bfc <_free_r>
 80134e0:	2300      	movs	r3, #0
 80134e2:	6363      	str	r3, [r4, #52]	; 0x34
 80134e4:	89a3      	ldrh	r3, [r4, #12]
 80134e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80134ea:	81a3      	strh	r3, [r4, #12]
 80134ec:	2300      	movs	r3, #0
 80134ee:	6063      	str	r3, [r4, #4]
 80134f0:	6923      	ldr	r3, [r4, #16]
 80134f2:	6023      	str	r3, [r4, #0]
 80134f4:	89a3      	ldrh	r3, [r4, #12]
 80134f6:	f043 0308 	orr.w	r3, r3, #8
 80134fa:	81a3      	strh	r3, [r4, #12]
 80134fc:	6923      	ldr	r3, [r4, #16]
 80134fe:	b94b      	cbnz	r3, 8013514 <__swsetup_r+0x7c>
 8013500:	89a3      	ldrh	r3, [r4, #12]
 8013502:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801350a:	d003      	beq.n	8013514 <__swsetup_r+0x7c>
 801350c:	4621      	mov	r1, r4
 801350e:	4628      	mov	r0, r5
 8013510:	f000 f840 	bl	8013594 <__smakebuf_r>
 8013514:	89a0      	ldrh	r0, [r4, #12]
 8013516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801351a:	f010 0301 	ands.w	r3, r0, #1
 801351e:	d00a      	beq.n	8013536 <__swsetup_r+0x9e>
 8013520:	2300      	movs	r3, #0
 8013522:	60a3      	str	r3, [r4, #8]
 8013524:	6963      	ldr	r3, [r4, #20]
 8013526:	425b      	negs	r3, r3
 8013528:	61a3      	str	r3, [r4, #24]
 801352a:	6923      	ldr	r3, [r4, #16]
 801352c:	b943      	cbnz	r3, 8013540 <__swsetup_r+0xa8>
 801352e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013532:	d1c4      	bne.n	80134be <__swsetup_r+0x26>
 8013534:	bd38      	pop	{r3, r4, r5, pc}
 8013536:	0781      	lsls	r1, r0, #30
 8013538:	bf58      	it	pl
 801353a:	6963      	ldrpl	r3, [r4, #20]
 801353c:	60a3      	str	r3, [r4, #8]
 801353e:	e7f4      	b.n	801352a <__swsetup_r+0x92>
 8013540:	2000      	movs	r0, #0
 8013542:	e7f7      	b.n	8013534 <__swsetup_r+0x9c>
 8013544:	20000110 	.word	0x20000110

08013548 <__swhatbuf_r>:
 8013548:	b570      	push	{r4, r5, r6, lr}
 801354a:	460c      	mov	r4, r1
 801354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013550:	2900      	cmp	r1, #0
 8013552:	b096      	sub	sp, #88	; 0x58
 8013554:	4615      	mov	r5, r2
 8013556:	461e      	mov	r6, r3
 8013558:	da0d      	bge.n	8013576 <__swhatbuf_r+0x2e>
 801355a:	89a3      	ldrh	r3, [r4, #12]
 801355c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013560:	f04f 0100 	mov.w	r1, #0
 8013564:	bf0c      	ite	eq
 8013566:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801356a:	2340      	movne	r3, #64	; 0x40
 801356c:	2000      	movs	r0, #0
 801356e:	6031      	str	r1, [r6, #0]
 8013570:	602b      	str	r3, [r5, #0]
 8013572:	b016      	add	sp, #88	; 0x58
 8013574:	bd70      	pop	{r4, r5, r6, pc}
 8013576:	466a      	mov	r2, sp
 8013578:	f000 f858 	bl	801362c <_fstat_r>
 801357c:	2800      	cmp	r0, #0
 801357e:	dbec      	blt.n	801355a <__swhatbuf_r+0x12>
 8013580:	9901      	ldr	r1, [sp, #4]
 8013582:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013586:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801358a:	4259      	negs	r1, r3
 801358c:	4159      	adcs	r1, r3
 801358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013592:	e7eb      	b.n	801356c <__swhatbuf_r+0x24>

08013594 <__smakebuf_r>:
 8013594:	898b      	ldrh	r3, [r1, #12]
 8013596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013598:	079d      	lsls	r5, r3, #30
 801359a:	4606      	mov	r6, r0
 801359c:	460c      	mov	r4, r1
 801359e:	d507      	bpl.n	80135b0 <__smakebuf_r+0x1c>
 80135a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	6123      	str	r3, [r4, #16]
 80135a8:	2301      	movs	r3, #1
 80135aa:	6163      	str	r3, [r4, #20]
 80135ac:	b002      	add	sp, #8
 80135ae:	bd70      	pop	{r4, r5, r6, pc}
 80135b0:	ab01      	add	r3, sp, #4
 80135b2:	466a      	mov	r2, sp
 80135b4:	f7ff ffc8 	bl	8013548 <__swhatbuf_r>
 80135b8:	9900      	ldr	r1, [sp, #0]
 80135ba:	4605      	mov	r5, r0
 80135bc:	4630      	mov	r0, r6
 80135be:	f7ff f887 	bl	80126d0 <_malloc_r>
 80135c2:	b948      	cbnz	r0, 80135d8 <__smakebuf_r+0x44>
 80135c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135c8:	059a      	lsls	r2, r3, #22
 80135ca:	d4ef      	bmi.n	80135ac <__smakebuf_r+0x18>
 80135cc:	f023 0303 	bic.w	r3, r3, #3
 80135d0:	f043 0302 	orr.w	r3, r3, #2
 80135d4:	81a3      	strh	r3, [r4, #12]
 80135d6:	e7e3      	b.n	80135a0 <__smakebuf_r+0xc>
 80135d8:	89a3      	ldrh	r3, [r4, #12]
 80135da:	6020      	str	r0, [r4, #0]
 80135dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135e0:	81a3      	strh	r3, [r4, #12]
 80135e2:	9b00      	ldr	r3, [sp, #0]
 80135e4:	6163      	str	r3, [r4, #20]
 80135e6:	9b01      	ldr	r3, [sp, #4]
 80135e8:	6120      	str	r0, [r4, #16]
 80135ea:	b15b      	cbz	r3, 8013604 <__smakebuf_r+0x70>
 80135ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135f0:	4630      	mov	r0, r6
 80135f2:	f000 f82d 	bl	8013650 <_isatty_r>
 80135f6:	b128      	cbz	r0, 8013604 <__smakebuf_r+0x70>
 80135f8:	89a3      	ldrh	r3, [r4, #12]
 80135fa:	f023 0303 	bic.w	r3, r3, #3
 80135fe:	f043 0301 	orr.w	r3, r3, #1
 8013602:	81a3      	strh	r3, [r4, #12]
 8013604:	89a3      	ldrh	r3, [r4, #12]
 8013606:	431d      	orrs	r5, r3
 8013608:	81a5      	strh	r5, [r4, #12]
 801360a:	e7cf      	b.n	80135ac <__smakebuf_r+0x18>

0801360c <_close_r>:
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	4d06      	ldr	r5, [pc, #24]	; (8013628 <_close_r+0x1c>)
 8013610:	2300      	movs	r3, #0
 8013612:	4604      	mov	r4, r0
 8013614:	4608      	mov	r0, r1
 8013616:	602b      	str	r3, [r5, #0]
 8013618:	f7ef fdbf 	bl	800319a <_close>
 801361c:	1c43      	adds	r3, r0, #1
 801361e:	d102      	bne.n	8013626 <_close_r+0x1a>
 8013620:	682b      	ldr	r3, [r5, #0]
 8013622:	b103      	cbz	r3, 8013626 <_close_r+0x1a>
 8013624:	6023      	str	r3, [r4, #0]
 8013626:	bd38      	pop	{r3, r4, r5, pc}
 8013628:	20006cf4 	.word	0x20006cf4

0801362c <_fstat_r>:
 801362c:	b538      	push	{r3, r4, r5, lr}
 801362e:	4d07      	ldr	r5, [pc, #28]	; (801364c <_fstat_r+0x20>)
 8013630:	2300      	movs	r3, #0
 8013632:	4604      	mov	r4, r0
 8013634:	4608      	mov	r0, r1
 8013636:	4611      	mov	r1, r2
 8013638:	602b      	str	r3, [r5, #0]
 801363a:	f7ef fdba 	bl	80031b2 <_fstat>
 801363e:	1c43      	adds	r3, r0, #1
 8013640:	d102      	bne.n	8013648 <_fstat_r+0x1c>
 8013642:	682b      	ldr	r3, [r5, #0]
 8013644:	b103      	cbz	r3, 8013648 <_fstat_r+0x1c>
 8013646:	6023      	str	r3, [r4, #0]
 8013648:	bd38      	pop	{r3, r4, r5, pc}
 801364a:	bf00      	nop
 801364c:	20006cf4 	.word	0x20006cf4

08013650 <_isatty_r>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	4d06      	ldr	r5, [pc, #24]	; (801366c <_isatty_r+0x1c>)
 8013654:	2300      	movs	r3, #0
 8013656:	4604      	mov	r4, r0
 8013658:	4608      	mov	r0, r1
 801365a:	602b      	str	r3, [r5, #0]
 801365c:	f7ef fdb9 	bl	80031d2 <_isatty>
 8013660:	1c43      	adds	r3, r0, #1
 8013662:	d102      	bne.n	801366a <_isatty_r+0x1a>
 8013664:	682b      	ldr	r3, [r5, #0]
 8013666:	b103      	cbz	r3, 801366a <_isatty_r+0x1a>
 8013668:	6023      	str	r3, [r4, #0]
 801366a:	bd38      	pop	{r3, r4, r5, pc}
 801366c:	20006cf4 	.word	0x20006cf4

08013670 <_lseek_r>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	4d07      	ldr	r5, [pc, #28]	; (8013690 <_lseek_r+0x20>)
 8013674:	4604      	mov	r4, r0
 8013676:	4608      	mov	r0, r1
 8013678:	4611      	mov	r1, r2
 801367a:	2200      	movs	r2, #0
 801367c:	602a      	str	r2, [r5, #0]
 801367e:	461a      	mov	r2, r3
 8013680:	f7ef fdb2 	bl	80031e8 <_lseek>
 8013684:	1c43      	adds	r3, r0, #1
 8013686:	d102      	bne.n	801368e <_lseek_r+0x1e>
 8013688:	682b      	ldr	r3, [r5, #0]
 801368a:	b103      	cbz	r3, 801368e <_lseek_r+0x1e>
 801368c:	6023      	str	r3, [r4, #0]
 801368e:	bd38      	pop	{r3, r4, r5, pc}
 8013690:	20006cf4 	.word	0x20006cf4

08013694 <_read_r>:
 8013694:	b538      	push	{r3, r4, r5, lr}
 8013696:	4d07      	ldr	r5, [pc, #28]	; (80136b4 <_read_r+0x20>)
 8013698:	4604      	mov	r4, r0
 801369a:	4608      	mov	r0, r1
 801369c:	4611      	mov	r1, r2
 801369e:	2200      	movs	r2, #0
 80136a0:	602a      	str	r2, [r5, #0]
 80136a2:	461a      	mov	r2, r3
 80136a4:	f7ef fd40 	bl	8003128 <_read>
 80136a8:	1c43      	adds	r3, r0, #1
 80136aa:	d102      	bne.n	80136b2 <_read_r+0x1e>
 80136ac:	682b      	ldr	r3, [r5, #0]
 80136ae:	b103      	cbz	r3, 80136b2 <_read_r+0x1e>
 80136b0:	6023      	str	r3, [r4, #0]
 80136b2:	bd38      	pop	{r3, r4, r5, pc}
 80136b4:	20006cf4 	.word	0x20006cf4

080136b8 <_write_r>:
 80136b8:	b538      	push	{r3, r4, r5, lr}
 80136ba:	4d07      	ldr	r5, [pc, #28]	; (80136d8 <_write_r+0x20>)
 80136bc:	4604      	mov	r4, r0
 80136be:	4608      	mov	r0, r1
 80136c0:	4611      	mov	r1, r2
 80136c2:	2200      	movs	r2, #0
 80136c4:	602a      	str	r2, [r5, #0]
 80136c6:	461a      	mov	r2, r3
 80136c8:	f7ef fd4b 	bl	8003162 <_write>
 80136cc:	1c43      	adds	r3, r0, #1
 80136ce:	d102      	bne.n	80136d6 <_write_r+0x1e>
 80136d0:	682b      	ldr	r3, [r5, #0]
 80136d2:	b103      	cbz	r3, 80136d6 <_write_r+0x1e>
 80136d4:	6023      	str	r3, [r4, #0]
 80136d6:	bd38      	pop	{r3, r4, r5, pc}
 80136d8:	20006cf4 	.word	0x20006cf4

080136dc <_init>:
 80136dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136de:	bf00      	nop
 80136e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136e2:	bc08      	pop	{r3}
 80136e4:	469e      	mov	lr, r3
 80136e6:	4770      	bx	lr

080136e8 <_fini>:
 80136e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ea:	bf00      	nop
 80136ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ee:	bc08      	pop	{r3}
 80136f0:	469e      	mov	lr, r3
 80136f2:	4770      	bx	lr
